var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var AchievementsManager = (function () {
        function AchievementsManager() {
            if (AchievementsManager._instance) {
                throw new Error("Error: Instantiation failed: Use AchievementsMangager.getInstance() instead of new");
            }
            else {
                AchievementsManager._instance = this;
            }
        }
        AchievementsManager.getInstance = function () {
            if (AchievementsManager._instance === null) {
                AchievementsManager._instance = new AchievementsManager();
            }
            return AchievementsManager._instance;
        };
        AchievementsManager.prototype.init = function () {
            this.winningGoal = false;
            this.unlockedAchievements = [];
            var achievementsDataStr = SuperSoccerNoggins.GameVars.getInstance().getLocalStorageData(SuperSoccerNoggins.GameConstants.ACHIEVEMENTS_DATA_KEY_NAME);
            if (achievementsDataStr !== "") {
                this._achievementsData = JSON.parse(achievementsDataStr);
            }
            else {
                this._achievementsData = AchievementsManager.ACHIEVEMENTS;
            }
        };
        AchievementsManager.prototype.onPlayerGoalScored = function () {
            if (!SuperSoccerNoggins.GameVars.ai) {
                return;
            }
            var time = SuperSoccerNoggins.GameVars.getInstance().time;
            var ball = SuperSoccerNoggins.BallsManager.currentInstance.ball;
            if (time > 54) {
                this._achievementsData[5].unlocked = true;
            }
            if (ball.sender === SuperSoccerNoggins.GameConstants.PLAYER_WITH_JETPACK_FLYING) {
                this._achievementsData[4].achieved += 1;
            }
            if (ball.isWeldedToHelm) {
                this._achievementsData[9].achieved += 1;
            }
            if (ball.sender === SuperSoccerNoggins.GameConstants.PLAYER_BODYGUARD) {
                this._achievementsData[2].achieved += 1;
            }
            this.winningGoal = false;
            if (time < 6 && (SuperSoccerNoggins.GameVars.getInstance().adversaryGoals - SuperSoccerNoggins.GameVars.getInstance().playerGoals < 0) && !(SuperSoccerNoggins.GameVars.getInstance().goldenGoal)) {
                this.winningGoal = true;
            }
        };
        AchievementsManager.prototype.onAIMatchEnd = function () {
            this._achievementsData[7].achieved = this._achievementsData[7].achieved + SuperSoccerNoggins.GameVars.getInstance().playerGoals;
            this._achievementsData[8].achieved = this._achievementsData[8].achieved + SuperSoccerNoggins.GameVars.getInstance().playerGoals;
            if (SuperSoccerNoggins.GameVars.getInstance().playerGoals > 3 && SuperSoccerNoggins.GameVars.getInstance().victory) {
                this._achievementsData[0].unlocked = true;
            }
            if (SuperSoccerNoggins.GameVars.getInstance().matchID === 7 && SuperSoccerNoggins.GameVars.getInstance().victory) {
                this._achievementsData[6].unlocked = true;
            }
            if (SuperSoccerNoggins.GameVars.getInstance().playerGoals > 2 && SuperSoccerNoggins.GameVars.getInstance().matchID === 31 && SuperSoccerNoggins.GameVars.getInstance().victory) {
                this._achievementsData[1].unlocked = true;
            }
            if (this.winningGoal) {
                this._achievementsData[3].unlocked = true;
            }
            if (this._achievementsData[2].achieved >= 3) {
                this._achievementsData[2].unlocked = true;
            }
            if (this._achievementsData[4].achieved >= 3) {
                this._achievementsData[4].unlocked = true;
            }
            if (this._achievementsData[7].achieved >= 75) {
                this._achievementsData[7].unlocked = true;
            }
            if (this._achievementsData[8].achieved >= 150) {
                this._achievementsData[8].unlocked = true;
            }
            if (this._achievementsData[9].achieved >= 10) {
                this._achievementsData[9].unlocked = true;
            }
            SuperSoccerNoggins.GameVars.getInstance().setLocalStorageData(SuperSoccerNoggins.GameConstants.ACHIEVEMENTS_DATA_KEY_NAME, JSON.stringify(this._achievementsData));
            return this.getAchievements();
        };
        Object.defineProperty(AchievementsManager.prototype, "achievementsData", {
            get: function () {
                return this._achievementsData;
            },
            set: function (value) {
                this._achievementsData = value;
            },
            enumerable: true,
            configurable: true
        });
        AchievementsManager.prototype.getAchievements = function () {
            this.creditsAchieved = 0;
            for (var i = 0; i < this._achievementsData.length; i++) {
                if (!this._achievementsData[i].collected && this._achievementsData[i].unlocked) {
                    this.unlockedAchievements.push(i);
                    this._achievementsData[i].collected = true;
                    this.creditsAchieved += this._achievementsData[i].prize;
                }
            }
            SuperSoccerNoggins.GameVars.getInstance().setLocalStorageData(SuperSoccerNoggins.GameConstants.ACHIEVEMENTS_DATA_KEY_NAME, JSON.stringify(this._achievementsData));
            return this.creditsAchieved;
        };
        return AchievementsManager;
    }());
    AchievementsManager._instance = null;
    AchievementsManager.ACHIEVEMENTS = [
        { id: 0, description: "GOAL KILLER:Score 4 goals in one match", numeric: false, goal: 4, achieved: 0, unlocked: false, prize: 100000, collected: false },
        { id: 1, description: "LORD OF THE SKULL:Score more than 3 goals in the Golden Skull final", numeric: false, goal: 0, achieved: 0, unlocked: false, prize: 400000, collected: false },
        { id: 2, description: "PROTECTION BOSS:Your bodyguard scores 3 goals", numeric: true, goal: 3, achieved: 0, unlocked: false, prize: 300000, collected: false },
        { id: 3, description: "LAST SECOND:Score the winning goal with less than 5 seconds to play", numeric: false, goal: 3, achieved: 3, unlocked: false, prize: 100000, collected: false },
        { id: 4, description: "JETPACK ACE:Score 3 goals while flying with the jetpack", numeric: true, goal: 3, achieved: 0, unlocked: false, prize: 300000, collected: false },
        { id: 5, description: "LIGHTING KNIGHT:Score a goal within the first 5 seconds of a match", numeric: false, goal: 0, achieved: 0, unlocked: false, prize: 100000, collected: false },
        { id: 6, description: "MONSIEUR CROISSANT:Win the Le Croissant Cup", numeric: false, goal: 0, achieved: 0, unlocked: false, prize: 100000, collected: false },
        { id: 7, description: "TOP SCORER:Score 75 goals", numeric: true, goal: 75, achieved: 0, unlocked: false, prize: 300000, collected: false },
        { id: 8, description: "LIVING LEGEND:Score 150 goals", numeric: true, goal: 150, achieved: 0, unlocked: false, prize: 600000, collected: false },
        { id: 9, description: "VIKING HERO:Score 10 goals with the ball inserted in the Viking helmet", numeric: true, goal: 10, achieved: 0, unlocked: false, prize: 100000, collected: false }
    ];
    SuperSoccerNoggins.AchievementsManager = AchievementsManager;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
window.onload = function () {
    var game = new SuperSoccerNoggins.Game();
};
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var AudioManager = (function () {
        function AudioManager() {
            if (AudioManager._instance) {
                throw new Error("Error: Instantiation failed: Use AudioManager.getInstance() instead of new.");
            }
            AudioManager._instance = this;
            var audioState;
            var audioStateString = SuperSoccerNoggins.GameVars.getInstance().getLocalStorageData(SuperSoccerNoggins.GameConstants.AUDIO_STATE_KEY_NAME);
            if (audioStateString !== "") {
                audioState = JSON.parse(audioStateString);
            }
            else {
                audioState = [false, false];
            }
            this._isMusicMuted = audioState[0];
            this._areEffectsMuted = audioState[1];
            this._musicLoopPlayingKey = null;
            this.effectLoopPlayingKey = null;
            this.lastEffectPlayed = null;
            this.timeLastEffectPlayed = null;
            this.effectsPlaying = new Array();
            this._discriminateAudioEffects = false;
            this.volume = 1;
        }
        AudioManager.getInstance = function () {
            if (AudioManager._instance === null) {
                AudioManager._instance = new AudioManager();
            }
            return AudioManager._instance;
        };
        AudioManager.prototype.init = function (game) {
            this.game = game;
            this.audioSpriteEffects = this.game.add.audioSprite("audio-sprite-effects");
            this.audioSpriteMusic = this.game.add.audioSprite("audio-sprite-music");
        };
        AudioManager.prototype.playLoop = function (key, volume) {
            this._currentTrack = key;
            if (this._musicLoopPlayingKey === key) {
                return;
            }
            this.stopLoop(this._musicLoopPlayingKey);
            this._musicLoopPlayingKey = key;
            if (!this._isMusicMuted) {
                var sound = this.audioSpriteMusic.get(key);
                if (sound) {
                    if (volume) {
                        sound.play(key, volume);
                    }
                    else {
                        sound.play(key, this.volume);
                    }
                }
                else {
                    console.error("This audio key does not exist:", key);
                }
            }
        };
        AudioManager.prototype.stopLoop = function (key) {
            if (key === null || typeof key === "undefined") {
                return;
            }
            this._musicLoopPlayingKey = null;
            var sound = this.audioSpriteMusic.get(key);
            if (sound) {
                sound.stop();
            }
        };
        AudioManager.prototype.playEffect = function (key, loop, overTheLevelEffect, volume) {
            this._currentEffect = key;
            if (loop) {
                this.effectLoopPlayingKey = key;
            }
            if (!this._areEffectsMuted) {
                if (!volume) {
                    volume = 1;
                }
                if (this.game.time.now - this.timeLastEffectPlayed < 150 && key === this.lastEffectPlayed) {
                    return;
                }
                if (!overTheLevelEffect && this._discriminateAudioEffects) {
                    return;
                }
                var sound = this.audioSpriteEffects.get(key);
                if (sound) {
                    if (loop) {
                        sound.play(key, this.volume * volume);
                    }
                    else {
                        sound.play(key, this.volume * volume);
                        sound.onStop.add(this.onEffectStopped, this);
                        this.effectsPlaying.push(key);
                        this.lastEffectPlayed = key;
                        this.timeLastEffectPlayed = this.game.time.now;
                    }
                }
                else {
                    console.error("This audio key does not exist:", key);
                }
            }
        };
        AudioManager.prototype.stopEffect = function (key, fade, loop) {
            if (key === null || typeof key === "undefined") {
                return;
            }
            var sound = this.audioSpriteEffects.get(key);
            if (loop) {
                this.effectLoopPlayingKey = null;
                if (fade) {
                    sound.fadeIn(400);
                }
                else {
                    sound.stop();
                }
            }
            else {
                if (fade) {
                    sound.fadeIn(400);
                }
                else {
                    sound.stop();
                }
            }
        };
        AudioManager.prototype.setVolumePlayingLoop = function (volume) {
            if (this._isMusicMuted || this._musicLoopPlayingKey === null) {
                return;
            }
            var sound = this.audioSpriteMusic.get(this._musicLoopPlayingKey);
            sound.fadeTo(500, volume);
            if (this.effectLoopPlayingKey !== null) {
                sound = this.audioSpriteMusic.get(this.effectLoopPlayingKey);
                sound.fadeTo(500, volume);
            }
        };
        AudioManager.prototype.onEffectStopped = function (sound) {
            var audioSprite = sound.markers;
            var propertyName;
            for (propertyName in audioSprite) {
                break;
            }
            var index = this.effectsPlaying.indexOf(propertyName);
            if (index > -1) {
                this.effectsPlaying.splice(index, 1);
            }
        };
        Object.defineProperty(AudioManager.prototype, "isMusicMuted", {
            get: function () {
                return this._isMusicMuted;
            },
            set: function (value) {
                this._isMusicMuted = value;
                if (this._isMusicMuted && this._musicLoopPlayingKey !== null) {
                    var currentLoop = this._musicLoopPlayingKey;
                    this.stopLoop(this._musicLoopPlayingKey);
                    this._musicLoopPlayingKey = currentLoop;
                }
                else {
                    var sound = this.audioSpriteMusic.get(this._musicLoopPlayingKey);
                    sound.play(this._musicLoopPlayingKey, this.volume);
                }
                var audioState = [this._isMusicMuted, this._areEffectsMuted];
                SuperSoccerNoggins.GameVars.getInstance().setLocalStorageData(SuperSoccerNoggins.GameConstants.AUDIO_STATE_KEY_NAME, JSON.stringify(audioState));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AudioManager.prototype, "areEffectsMuted", {
            get: function () {
                return this._areEffectsMuted;
            },
            set: function (value) {
                this._areEffectsMuted = value;
                if (this._areEffectsMuted) {
                    for (var i = 0; i < this.effectsPlaying.length; i++) {
                        this.stopEffect(this.effectsPlaying[i]);
                    }
                    if (this.effectLoopPlayingKey !== null) {
                        var effectLoopPlayingKey;
                        this.stopEffect(this.effectLoopPlayingKey, false, true);
                        this.effectLoopPlayingKey = effectLoopPlayingKey;
                    }
                }
                else {
                    if (this.effectLoopPlayingKey !== null) {
                        this.playEffect(this.effectLoopPlayingKey, true);
                    }
                }
                var audioState = [this._isMusicMuted, this._areEffectsMuted];
                SuperSoccerNoggins.GameVars.getInstance().setLocalStorageData(SuperSoccerNoggins.GameConstants.AUDIO_STATE_KEY_NAME, JSON.stringify(audioState));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AudioManager.prototype, "discriminateAudioEffects", {
            get: function () {
                return this._discriminateAudioEffects;
            },
            set: function (value) {
                this._discriminateAudioEffects = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AudioManager.prototype, "musicLoopPlayingKey", {
            get: function () {
                return this._musicLoopPlayingKey;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AudioManager.prototype, "currentTrack", {
            get: function () {
                return this._currentTrack;
            },
            set: function (value) {
                this._currentTrack = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AudioManager.prototype, "currentEffect", {
            get: function () {
                return this._currentEffect;
            },
            set: function (value) {
                this._currentEffect = value;
            },
            enumerable: true,
            configurable: true
        });
        return AudioManager;
    }());
    AudioManager._instance = null;
    SuperSoccerNoggins.AudioManager = AudioManager;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var Game = (function (_super) {
        __extends(Game, _super);
        function Game() {
            var _this = _super.call(this, SuperSoccerNoggins.GameConstants.GAME_WIDTH, SuperSoccerNoggins.GameConstants.GAME_HEIGHT, Phaser.AUTO, "content", null, false, true) || this;
            _this.state.add("PreLoader", SuperSoccerNoggins.PreLoader, false);
            _this.state.add("SplashState", SuperSoccerNoggins.SplashState, false);
            _this.state.add("MatchSelectionState", SuperSoccerNoggins.MatchSelectionState, false);
            _this.state.add("AchievementsState", SuperSoccerNoggins.AchievementsState, false);
            _this.state.add("MatchState", SuperSoccerNoggins.MatchState, false);
            _this.state.add("LocalMultiPlayerState", SuperSoccerNoggins.LocalMultiPlayerState, false);
            _this.state.add("CreditsState", SuperSoccerNoggins.CreditsState, false);
            _this.state.add("Boot", SuperSoccerNoggins.Boot, true);
            return _this;
        }
        return Game;
    }(Phaser.Game));
    SuperSoccerNoggins.Game = Game;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var GameConstants = (function () {
        function GameConstants() {
        }
        return GameConstants;
    }());
    GameConstants.VERSION = "2.1";
    GameConstants.DEVELOPMENT = false;
    GameConstants.SHOW_PHYSICS_BODIES = false;
    GameConstants.POWERUPS = true;
    GameConstants.QA = false;
    GameConstants.UNLOCK_ALL_MATCHES = false;
    GameConstants.GAME_WIDTH = 640;
    GameConstants.GAME_HEIGHT = 420;
    GameConstants.NUM_MATCHES = 48;
    GameConstants.SECONDS_MATCH = 60;
    GameConstants.POWER_UP_SPAWNING_TIME = 10000;
    GameConstants.COLOR_FADE_IN_OUT = 0x034151;
    GameConstants.TIME_FADE_IN_OUT = 250;
    GameConstants.RIGHT = "right";
    GameConstants.LEFT = "left";
    GameConstants.RACE_BLACK = "black";
    GameConstants.RACE_CRAB = "crab";
    GameConstants.RACE_LATIN = "latin";
    GameConstants.RACE_PALE = "pale";
    GameConstants.RACE_WHITE = "white";
    GameConstants.CREDITS_PASSED_LEVEL = 100000;
    GameConstants.CREDITS_CONSOLATION = 10000;
    GameConstants.UPGRADE_2_PRICE = 150000;
    GameConstants.UPGRADE_3_PRICE = 300000;
    GameConstants.UPGRADE_4_PRICE = 450000;
    GameConstants.UPGRADE_5_PRICE = 650000;
    GameConstants.MESSAGE_PLAYER_GOAL = "player_goal";
    GameConstants.MESSAGE_ADVERSARY_GOAL = "adversary_goal";
    GameConstants.SURFACE_FIELD = "surface_field";
    GameConstants.SURFACE_NOGGIN = "surface_noggin";
    GameConstants.SURFACE_STAGE_WALLS = "surface_stage_walls";
    GameConstants.SURFACE_BUMPER = "surface_bumper";
    GameConstants.SURFACE_WATER = "surface_water";
    GameConstants.SURFACE_GOAL_BAR = "surface_goal_bar";
    GameConstants.SURFACE_SMOKE_JETPACK = "surface_smoke_jetpack";
    GameConstants.STAGE_WALLS = "stage-walls";
    GameConstants.NOGGIN = "noggin";
    GameConstants.WATER_PY = 395;
    GameConstants.HARDCODED_TERRAINS_PY = [346.6, 341.6, 381.6, 381.6, 342.6, 341.6, 381.6, 351.6];
    GameConstants.NOGGIN_RADIUS = 30;
    GameConstants.FOOT_RADIUS = 20;
    GameConstants.DELTA_X_GOAL = 35;
    GameConstants.PLAYER = "player";
    GameConstants.PLAYER_WITH_JETPACK_FLYING = "player-with-jetpacK-flying";
    GameConstants.ADVERSARY = "adversary";
    GameConstants.PLAYER_BODYGUARD = "player-bodyguard";
    GameConstants.ADVERSARY_BODYGUARD = "adversary-bodyguard";
    GameConstants.BALL = "ball";
    GameConstants.WATER = "water";
    GameConstants.DUCK = "duck";
    GameConstants.GOAL_BAR = "goal-bar";
    GameConstants.PLAYER_HEAD = "player-head";
    GameConstants.ADVERSARY_HEAD = "adversary-head";
    GameConstants.PLAYER_TORSO = "player-torso";
    GameConstants.ADVERSARY_TORSO = "adversary-torso";
    GameConstants.PLAYER_FOOT = "player-foot";
    GameConstants.ADVERSARY_FOOT = "adversary-foot";
    GameConstants.ADVERSARY_INITIAL_PX = 85;
    GameConstants.PLAYER_INITIAL_PX = 545;
    GameConstants.STAGE_WALLS_RESTITUTION = .15;
    GameConstants.BUMPER_RESTITUTION = 1.25;
    GameConstants.TERRAIN_BIG_LAKE = "big-lake";
    GameConstants.TERRAIN_SMALL_ISLANDS = "small-islands";
    GameConstants.TERRAIN_FLAT = "flat";
    GameConstants.TERRAIN_MOVING_SLICES_1 = "moving-slices-1";
    GameConstants.TERRAIN_MOVING_SLICES_2 = "moving-slices-2";
    GameConstants.TERRAIN_MOVING_SLICES_3 = "moving-slices-3";
    GameConstants.TERRAIN_ISLAND = "island";
    GameConstants.OBSTACLES_NONE = "none";
    GameConstants.OBSTACLES_ONE_CIRCLE = "one-circle";
    GameConstants.OBSTACLES_BUMPERS_2 = "bumpers-2";
    GameConstants.OBSTACLES_BUMPERS_3 = "bumpers-3";
    GameConstants.OBSTACLES_THREE_MOVING_CIRCLES = "three-moving-circles";
    GameConstants.FLAT_FIELD_Y = 382;
    GameConstants.FIELD_WITH_WATER_Y = 415;
    GameConstants.TIME_POWER_UP_ACTIVE = 10000;
    GameConstants.PU_BIG_GOAL_GREEN = "power-up-big-goal-green";
    GameConstants.PU_BIG_GOAL_RED = "power-up-big-goal-red";
    GameConstants.PU_SMALL_GOAL_GREEN = "power-up-small-goal-green";
    GameConstants.PU_SMALL_GOAL_RED = "power-up-small-goal-red";
    GameConstants.PU_BOUNCY_BALL = "power-up-bouncy-ball";
    GameConstants.PU_BIG_BALL = "power-up-big-ball";
    GameConstants.PU_SMALL_BALL = "power-up-small-ball";
    GameConstants.PU_BIG_HEAD_GREEN = "power-up-big-head-green";
    GameConstants.PU_BIG_HEAD_RED = "power-up-big-head-red";
    GameConstants.PU_BODYGUARD_GREEN = "power-up-twin-green";
    GameConstants.PU_BODYGUARD_RED = "power-up-twin-red";
    GameConstants.PU_JETPACK_GREEN = "power-up-jetpack-green";
    GameConstants.PU_JETPACK_RED = "power-up-jetpack-red";
    GameConstants.PU_CAN_T_KICK_GREEN = "power-up-can-t-kick-green";
    GameConstants.PU_CAN_T_KICK_RED = "power-up-can-t-kick-red";
    GameConstants.PU_VICKING_GREEN = "power-up-vicking-green";
    GameConstants.PU_VICKING_RED = "power-up-vicking-red";
    GameConstants.ABILITY_JUMP = "JUMP";
    GameConstants.ABILITY_RUSH = "RUSH";
    GameConstants.ABILITY_BACKTRACK = "BACKTRACK";
    GameConstants.ABILITY_KICK = "KICK";
    GameConstants.JUMP_VELOCITY = [-350, -450, -550, -750, -1000];
    GameConstants.JUMP_GRAVITY_SCALE = [1.15, 1.25, 1.5, 2, 2.5];
    GameConstants.RUSH_VELOCITY = [78, 92.5, 105, 126, 158];
    GameConstants.RUSH_VELOCITY_WATER = [62.5, 68, 73.5, 78, 90];
    GameConstants.BACKTRACK_VELOCITY = [78, 92.5, 105, 126, 158];
    GameConstants.BACKTRACK_VELOCITY_WATER = [62.5, 68, 73.5, 78, 90];
    GameConstants.KICK_X_FORCE = [225, 350, 430, 580, 775];
    GameConstants.HEAD_X_FORCE = [250, 325, 400, 475, 600];
    GameConstants.HEAD_MASS = [1.25, 1, 1, .625, .42];
    GameConstants.TORSO_MASS = [1.75, 1.4, 1.4, .85, .58];
    GameConstants.CATEGORY_BALL = 0x0001;
    GameConstants.CATEGORY_PLAYER_TORSO = 0x0002;
    GameConstants.CATEGORY_ADVERSARY_TORSO = 0x0004;
    GameConstants.CATEGORY_PLAYER_HEAD = 0x0008;
    GameConstants.CATEGORY_ADVERSARY_HEAD = 0x0010;
    GameConstants.CATEGORY_FOOT = 0x0020;
    GameConstants.CATEGORY_FIELD = 0x0040;
    GameConstants.CATEGORY_POWER_UP = 0x0080;
    GameConstants.CATEGORY_GOAL_BAR = 0x0100;
    GameConstants.MASK_BALL = GameConstants.CATEGORY_GOAL_BAR | GameConstants.CATEGORY_PLAYER_HEAD
        | GameConstants.CATEGORY_PLAYER_TORSO | GameConstants.CATEGORY_ADVERSARY_HEAD | GameConstants.CATEGORY_ADVERSARY_TORSO
        | GameConstants.CATEGORY_FOOT | GameConstants.CATEGORY_FIELD | GameConstants.CATEGORY_POWER_UP;
    GameConstants.MASK_BALL_WELDED_TO_HELM = GameConstants.CATEGORY_PLAYER_HEAD
        | GameConstants.CATEGORY_PLAYER_TORSO | GameConstants.CATEGORY_ADVERSARY_HEAD | GameConstants.CATEGORY_ADVERSARY_TORSO
        | GameConstants.CATEGORY_FOOT | GameConstants.CATEGORY_FIELD | GameConstants.CATEGORY_POWER_UP;
    GameConstants.MASK_ONLY_BALL = GameConstants.CATEGORY_BALL;
    GameConstants.MASK_PLAYER_HEAD = GameConstants.CATEGORY_ADVERSARY_TORSO | GameConstants.CATEGORY_BALL | GameConstants.CATEGORY_GOAL_BAR;
    GameConstants.MASK_ADVERSARY_HEAD = GameConstants.CATEGORY_PLAYER_TORSO | GameConstants.CATEGORY_BALL | GameConstants.CATEGORY_GOAL_BAR;
    GameConstants.MASK_PLAYER_TORSO = GameConstants.CATEGORY_ADVERSARY_HEAD | GameConstants.CATEGORY_ADVERSARY_TORSO | GameConstants.CATEGORY_BALL | GameConstants.CATEGORY_GOAL_BAR | GameConstants.CATEGORY_FIELD;
    GameConstants.MASK_ADVERSARY_TORSO = GameConstants.CATEGORY_PLAYER_HEAD | GameConstants.CATEGORY_PLAYER_TORSO | GameConstants.CATEGORY_BALL | GameConstants.CATEGORY_GOAL_BAR | GameConstants.CATEGORY_FIELD;
    GameConstants.MASK_NOGGIN_RESET = GameConstants.CATEGORY_FIELD;
    GameConstants.INSTRUCTIONS_CONTROLS = 0;
    GameConstants.INSTRUCTIONS_POWERUP = 1;
    GameConstants.WHITE_SQUARE = "white-square";
    GameConstants.GREEN_SQUARE = "green-square";
    GameConstants.BLUE_SQUARE = "blue-square";
    GameConstants.DARK_BLUE_SQUARE = "dark-blue-square";
    GameConstants.WASD = "wasd";
    GameConstants.ZQSD = "zqsd";
    GameConstants.GOLDEN_GOAL_MATCH = "golden goal";
    GameConstants.TIMED_MATCH = "timed";
    GameConstants.FIRST_TO_SEVEN_MATCH = "first to seven";
    GameConstants.PREFAB_FIELDS = [
        { id: 0, water: false, terrain: GameConstants.TERRAIN_FLAT, obstacles: GameConstants.OBSTACLES_ONE_CIRCLE, rival: null, powerUps: [
                ["power-up-small-goal-green", "power-up-small-goal-red", "power-up-small-ball"],
                ["power-up-big-ball", "power-up-big-head-red", "power-up-big-head-green"],
                ["power-up-jetpack-red", "power-up-jetpack-green", "power-up-bouncy-ball"],
                ["power-up-big-goal-green", "power-up-vicking-red", "power-up-big-goal-red", "power-up-vicking-green"],
                ["power-up-twin-green", "power-up-twin-red"]
            ]
        },
        { id: 1, water: true, terrain: GameConstants.TERRAIN_BIG_LAKE, obstacles: GameConstants.OBSTACLES_BUMPERS_2, rival: null, powerUps: [
                ["power-up-big-ball", "power-up-big-head-red", "power-up-big-head-green"],
                ["power-up-small-goal-green", "power-up-small-goal-red", "power-up-small-ball"],
                ["power-up-vicking-green", "power-up-vicking-green"]
            ] },
        { id: 2, water: false, terrain: GameConstants.TERRAIN_SMALL_ISLANDS, obstacles: GameConstants.OBSTACLES_ONE_CIRCLE, rival: null, powerUps: [
                ["power-up-jetpack-red", "power-up-jetpack-green", "power-up-bouncy-ball"],
                ["power-up-small-goal-green", "power-up-can-t-kick-green", "power-up-big-goal-green", "power-up-can-t-kick-red"],
                ["power-up-big-ball", "power-up-small-ball", "power-up-bouncy-ball", "power-up-small-goal-green", "power-up-small-goal-red"]
            ] },
        { id: 3, water: true, terrain: GameConstants.TERRAIN_SMALL_ISLANDS, obstacles: GameConstants.OBSTACLES_NONE, rival: null, powerUps: [
                ["power-up-big-ball", "power-up-vicking-red", "power-up-vicking-green"],
                ["power-up-twin-green", "power-up-big-goal-green", "power-up-big-goal-red", "power-up-twin-red"],
                ["power-up-small-ball", "power-up-big-goal-green", "power-up-bouncy-ball"],
                ["power-up-small-ball", "power-up-bouncy-ball", "power-up-small-goal-green", "power-up-small-goal-red"]
            ] },
        { id: 4, water: true, terrain: GameConstants.TERRAIN_MOVING_SLICES_2, obstacles: GameConstants.OBSTACLES_NONE, rival: null, powerUps: [
                ["power-up-bouncy-ball", "power-up-twin-green", "power-up-twin-red"],
                ["power-up-jetpack-red", "power-up-jetpack-green", "power-up-big-ball", "power-up-bouncy-ball"],
                ["power-up-vicking-red", "power-up-vicking-green"],
                ["power-up-big-ball", "power-up-jetpack-red", "power-up-jetpack-green"]
            ] },
        { id: 5, water: false, terrain: GameConstants.TERRAIN_MOVING_SLICES_3, obstacles: GameConstants.OBSTACLES_ONE_CIRCLE, rival: null, powerUps: [
                ["power-up-twin-green", "power-up-twin-red"],
                ["power-up-small-goal-green", "power-up-small-goal-red", "power-up-small-ball"],
                ["power-up-vicking-green", "power-up-vicking-green", "power-up-big-goal-green", "power-up-big-goal-red"],
                ["power-up-small-goal-green", "power-up-small-goal-red"],
                ["power-up-big-ball", "power-up-can-t-kick-red", "power-up-bouncy-ball", "power-up-big-goal-green", "power-up-big-goal-red"]
            ] },
    ];
    GameConstants.AUDIO_STATE_KEY_NAME = "ssn-audio-state";
    GameConstants.PLAYER_ABILITY_JUMP_KEY_NAME = "ssn-player-abililty-jump";
    GameConstants.PLAYER_ABILITY_RUSH_KEY_NAME = "ssn-player-abililty-rush";
    GameConstants.PLAYER_ABILITY_BACKTRACK_KEY_NAME = "ssn-player-abililty-backtrack";
    GameConstants.PLAYER_ABILITY_KICK_KEY_NAME = "ssn-player-abililty-kick";
    GameConstants.CREDITS_KEY_NAME = "ssn-credits";
    GameConstants.ACHIEVED_MATCH_ID_KEY_NAME = "ssn-achieved-match-id";
    GameConstants.SELECTED_TEAMS_ID_KEY_NAME = "ssn-selected-teams-id";
    GameConstants.ACHIEVEMENTS_DATA_KEY_NAME = "ssn-achievements-data";
    SuperSoccerNoggins.GameConstants = GameConstants;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var GameManager = (function () {
        function GameManager() {
            if (GameManager._instance) {
                throw new Error("Error: Instantiation failed: Use GameManager.getInstance() instead of new");
            }
            else {
                GameManager._instance = this;
            }
        }
        GameManager.getInstance = function () {
            if (GameManager._instance === null) {
                GameManager._instance = new GameManager();
            }
            return GameManager._instance;
        };
        GameManager.prototype.init = function (game) {
            this.game = game;
            var beginChristmasDate = new Date("12/12/2016");
            var endChristmasDate = new Date("01/16/2017");
            var currentDate = new Date();
            if (currentDate >= beginChristmasDate && currentDate <= endChristmasDate) {
                SuperSoccerNoggins.GameVars.getInstance().christmasVersion = true;
            }
            else {
                SuperSoccerNoggins.GameVars.getInstance().christmasVersion = false;
            }
            SuperSoccerNoggins.GameVars.ai = true;
            var jump = SuperSoccerNoggins.GameVars.getInstance().getLocalStorageData(SuperSoccerNoggins.GameConstants.PLAYER_ABILITY_JUMP_KEY_NAME);
            if (jump !== "") {
                SuperSoccerNoggins.GameVars.getInstance().playerJumpIndex = parseInt(jump);
            }
            else {
                SuperSoccerNoggins.GameVars.getInstance().playerJumpIndex = 1;
            }
            var rush = SuperSoccerNoggins.GameVars.getInstance().getLocalStorageData(SuperSoccerNoggins.GameConstants.PLAYER_ABILITY_RUSH_KEY_NAME);
            if (rush !== "") {
                SuperSoccerNoggins.GameVars.getInstance().playerRushIndex = parseInt(rush);
            }
            else {
                SuperSoccerNoggins.GameVars.getInstance().playerRushIndex = 1;
            }
            var backtrack = SuperSoccerNoggins.GameVars.getInstance().getLocalStorageData(SuperSoccerNoggins.GameConstants.PLAYER_ABILITY_BACKTRACK_KEY_NAME);
            if (backtrack !== "") {
                SuperSoccerNoggins.GameVars.getInstance().playerBacktrackIndex = parseInt(backtrack);
            }
            else {
                SuperSoccerNoggins.GameVars.getInstance().playerBacktrackIndex = 1;
            }
            var kick = SuperSoccerNoggins.GameVars.getInstance().getLocalStorageData(SuperSoccerNoggins.GameConstants.PLAYER_ABILITY_KICK_KEY_NAME);
            if (kick !== "") {
                SuperSoccerNoggins.GameVars.getInstance().playerKickIndex = parseInt(kick);
            }
            else {
                SuperSoccerNoggins.GameVars.getInstance().playerKickIndex = 1;
            }
            var creditsStr = SuperSoccerNoggins.GameVars.getInstance().getLocalStorageData(SuperSoccerNoggins.GameConstants.CREDITS_KEY_NAME);
            if (creditsStr !== "") {
                SuperSoccerNoggins.GameVars.getInstance().credits = parseInt(creditsStr);
            }
            else {
                SuperSoccerNoggins.GameVars.getInstance().credits = 0;
            }
            var achievedMatchIDStr = SuperSoccerNoggins.GameVars.getInstance().getLocalStorageData(SuperSoccerNoggins.GameConstants.ACHIEVED_MATCH_ID_KEY_NAME);
            if (achievedMatchIDStr !== "") {
                SuperSoccerNoggins.GameVars.getInstance().achievedMatchID = parseInt(achievedMatchIDStr);
            }
            else {
                SuperSoccerNoggins.GameVars.getInstance().achievedMatchID = 0;
            }
            SuperSoccerNoggins.GameVars.getInstance().matchID = SuperSoccerNoggins.GameVars.getInstance().achievedMatchID < SuperSoccerNoggins.GameConstants.NUM_MATCHES ? SuperSoccerNoggins.GameVars.getInstance().achievedMatchID : SuperSoccerNoggins.GameConstants.NUM_MATCHES - 1;
            var selectedTeamsIDStr = SuperSoccerNoggins.GameVars.getInstance().getLocalStorageData(SuperSoccerNoggins.GameConstants.SELECTED_TEAMS_ID_KEY_NAME);
            if (selectedTeamsIDStr !== "") {
                SuperSoccerNoggins.GameVars.getInstance().selectedTeamsID = JSON.parse(selectedTeamsIDStr);
            }
            else {
                SuperSoccerNoggins.GameVars.getInstance().selectedTeamsID = [-1, -1, -1, -1, -1, -1];
            }
            var tournamentIndex = Math.floor(SuperSoccerNoggins.GameVars.getInstance().matchID / 8);
            SuperSoccerNoggins.GameVars.getInstance().playerTeamID = SuperSoccerNoggins.GameVars.getInstance().selectedTeamsID[tournamentIndex];
            SuperSoccerNoggins.GameVars.getInstance().gameCompleted = false;
        };
        GameManager.prototype.processJSONData = function () {
            SuperSoccerNoggins.GameVars.getInstance().teamsData = this.game.cache.getJSON("teams-data");
            SuperSoccerNoggins.GameVars.getInstance().tournamentsData = this.game.cache.getJSON("tournaments-data");
            SuperSoccerNoggins.GameVars.getInstance().aiData = this.game.cache.getJSON("ai-config");
            var teams;
            var selectedTeamsID = SuperSoccerNoggins.GameVars.getInstance().selectedTeamsID;
            var j;
            for (var i = 0; i < SuperSoccerNoggins.GameVars.getInstance().tournamentsData.length; i++) {
                teams = SuperSoccerNoggins.GameVars.getInstance().tournamentsData[i].teams;
                j = teams.indexOf(selectedTeamsID[i]);
                if (j >= 0) {
                    teams[j] = SuperSoccerNoggins.GameVars.getInstance().tournamentsData[i].reserve_team;
                    SuperSoccerNoggins.GameVars.getInstance().tournamentsData[i].reserve_team = selectedTeamsID[i];
                }
            }
            if (SuperSoccerNoggins.GameConstants.UNLOCK_ALL_MATCHES) {
                SuperSoccerNoggins.GameVars.getInstance().selectedTeamsID = [4, 11, 18, 27, 28, 1];
                SuperSoccerNoggins.GameVars.getInstance().matchID = 47;
                SuperSoccerNoggins.GameVars.getInstance().achievedMatchID = 47;
            }
        };
        GameManager.prototype.onMatchSelected = function (matchID, adversaryTeamID, playerTeamID) {
            SuperSoccerNoggins.GameVars.ai = true;
            if (typeof matchID !== "undefined" && typeof adversaryTeamID !== "undefined") {
                SuperSoccerNoggins.GameVars.getInstance().matchID = matchID;
                SuperSoccerNoggins.GameVars.getInstance().adversaryTeamID = adversaryTeamID;
                if (typeof playerTeamID !== "undefined") {
                    SuperSoccerNoggins.GameVars.getInstance().playerTeamID = playerTeamID;
                }
            }
            else {
                SuperSoccerNoggins.GameVars.getInstance().matchID = 1;
                SuperSoccerNoggins.GameVars.getInstance().adversaryTeamID = 0;
                SuperSoccerNoggins.GameVars.getInstance().playerTeamID = 2;
            }
            var tournamentData = this.game.cache.getJSON("tournaments-data");
            var tournamentID = Math.floor(SuperSoccerNoggins.GameVars.getInstance().matchID / 8);
            var matchesConfiguration = tournamentData[tournamentID].matchesConfiguration;
            var matchConfiguration = matchesConfiguration[(SuperSoccerNoggins.GameVars.getInstance().matchID + 8) % 8];
            SuperSoccerNoggins.GameVars.getInstance().terrain = matchConfiguration.terrain;
            SuperSoccerNoggins.GameVars.getInstance().water = matchConfiguration.water;
            SuperSoccerNoggins.GameVars.getInstance().obstacles = matchConfiguration.obstacles;
            var numPowerUpsConfigurations = matchConfiguration.powerUps.length;
            SuperSoccerNoggins.GameVars.getInstance().powerUps = matchConfiguration.powerUps[Math.floor(numPowerUpsConfigurations * Math.random())];
            SuperSoccerNoggins.GameVars.getInstance().adversaryJumpIndex = matchConfiguration.rival.jump;
            SuperSoccerNoggins.GameVars.getInstance().adversaryRushIndex = matchConfiguration.rival.rush;
            SuperSoccerNoggins.GameVars.getInstance().adversaryBacktrackIndex = matchConfiguration.rival.backtrack;
            SuperSoccerNoggins.GameVars.getInstance().adversaryKickIndex = matchConfiguration.rival.kick;
            SuperSoccerNoggins.GameVars.getInstance().adversaryPrecision = matchConfiguration.rival.precision;
            SuperSoccerNoggins.GameVars.getInstance().matchUnlocked = false;
            SuperSoccerNoggins.GameVars.getInstance().tournamentUnlocked = false;
            if (SuperSoccerNoggins.MatchSelectionState.currentInstance) {
                SuperSoccerNoggins.MatchSelectionState.currentInstance.matchSelected();
            }
        };
        GameManager.prototype.onMatchEnded = function () {
            SuperSoccerNoggins.GameVars.getInstance().victory = SuperSoccerNoggins.GameVars.getInstance().playerGoals > SuperSoccerNoggins.GameVars.getInstance().adversaryGoals;
            if (SuperSoccerNoggins.GameVars.getInstance().victory && SuperSoccerNoggins.GameVars.getInstance().achievedMatchID === SuperSoccerNoggins.GameVars.getInstance().matchID) {
                SuperSoccerNoggins.GameVars.getInstance().achievedMatchID++;
                SuperSoccerNoggins.GameVars.getInstance().matchUnlocked = true;
                if (SuperSoccerNoggins.GameVars.getInstance().achievedMatchID % 8 === 0) {
                    SuperSoccerNoggins.GameVars.getInstance().tournamentUnlocked = true;
                    if (SuperSoccerNoggins.GameVars.getInstance().achievedMatchID === SuperSoccerNoggins.GameConstants.NUM_MATCHES) {
                        SuperSoccerNoggins.GameVars.getInstance().gameCompleted = true;
                    }
                }
                SuperSoccerNoggins.GameVars.getInstance().credits += SuperSoccerNoggins.GameConstants.CREDITS_PASSED_LEVEL;
            }
            if (!SuperSoccerNoggins.GameVars.getInstance().victory && SuperSoccerNoggins.GameVars.getInstance().achievedMatchID === SuperSoccerNoggins.GameVars.getInstance().matchID) {
                SuperSoccerNoggins.GameVars.getInstance().credits += SuperSoccerNoggins.GameConstants.CREDITS_CONSOLATION;
            }
            var achievementsCredits = SuperSoccerNoggins.AchievementsManager.getInstance().onAIMatchEnd();
            SuperSoccerNoggins.GameVars.getInstance().credits += achievementsCredits;
        };
        GameManager.prototype.onMatchReset = function () {
            if (!SuperSoccerNoggins.GameVars.ai) {
                var numPowerUpsConfigurations = SuperSoccerNoggins.GameVars.pvpConfigurationData.powerUps.length;
                SuperSoccerNoggins.GameVars.getInstance().powerUps = SuperSoccerNoggins.GameVars.pvpConfigurationData.powerUps[Math.floor(numPowerUpsConfigurations * Math.random())];
            }
        };
        GameManager.prototype.onTeamSelected = function (teamID, visibleTournamentIndex) {
            SuperSoccerNoggins.GameVars.getInstance().playerTeamID = teamID;
            var selectedTeams = SuperSoccerNoggins.GameVars.getInstance().selectedTeamsID;
            selectedTeams[visibleTournamentIndex] = teamID;
            SuperSoccerNoggins.GameVars.getInstance().selectedTeamsID = selectedTeams;
            var tournamentData = SuperSoccerNoggins.GameVars.getInstance().tournamentsData[visibleTournamentIndex];
            var i = tournamentData.teams.indexOf(teamID);
            if (i >= 0) {
                tournamentData.teams[i] = tournamentData.reserve_team;
                tournamentData.reserve_team = teamID;
            }
            SuperSoccerNoggins.MatchSelectionState.currentInstance.teamSelected();
        };
        GameManager.prototype.changePlayerAbility = function (abilityType, value) {
            switch (abilityType) {
                case SuperSoccerNoggins.GameConstants.ABILITY_JUMP:
                    SuperSoccerNoggins.GameVars.getInstance().playerJumpIndex = value;
                    break;
                case SuperSoccerNoggins.GameConstants.ABILITY_RUSH:
                    SuperSoccerNoggins.GameVars.getInstance().playerRushIndex = value;
                    break;
                case SuperSoccerNoggins.GameConstants.ABILITY_BACKTRACK:
                    SuperSoccerNoggins.GameVars.getInstance().playerBacktrackIndex = value;
                    break;
                case SuperSoccerNoggins.GameConstants.ABILITY_KICK:
                    SuperSoccerNoggins.GameVars.getInstance().playerKickIndex = value;
                    break;
                default:
                    break;
            }
            if (SuperSoccerNoggins.StageContainer.currentInstance) {
                var player = SuperSoccerNoggins.StageContainer.currentInstance.player;
                var adversary = SuperSoccerNoggins.StageContainer.currentInstance.adversary;
                player.setAbilities();
                adversary.setAbilities();
            }
        };
        GameManager.prototype.switchAIManual = function () {
            SuperSoccerNoggins.GameVars.ai = false;
        };
        GameManager.prototype.onTerrainSelected = function (terrain) {
            SuperSoccerNoggins.GameVars.getInstance().terrain = terrain;
            this.game.state.start("MatchState", true, false, [true]);
        };
        GameManager.prototype.setWater = function (water) {
            SuperSoccerNoggins.GameVars.getInstance().water = water;
            this.game.state.start("MatchState", true, false, [true]);
        };
        GameManager.prototype.onBuyAbility = function (abilityType, upgradePrice) {
            if (SuperSoccerNoggins.GameVars.getInstance().credits >= upgradePrice) {
                SuperSoccerNoggins.GameVars.getInstance().credits -= upgradePrice;
                switch (abilityType) {
                    case SuperSoccerNoggins.GameConstants.ABILITY_JUMP:
                        SuperSoccerNoggins.GameVars.getInstance().playerJumpIndex++;
                        break;
                    case SuperSoccerNoggins.GameConstants.ABILITY_RUSH:
                        SuperSoccerNoggins.GameVars.getInstance().playerRushIndex++;
                        break;
                    case SuperSoccerNoggins.GameConstants.ABILITY_BACKTRACK:
                        SuperSoccerNoggins.GameVars.getInstance().playerBacktrackIndex++;
                        break;
                    case SuperSoccerNoggins.GameConstants.ABILITY_KICK:
                        SuperSoccerNoggins.GameVars.getInstance().playerKickIndex++;
                        break;
                    default:
                        break;
                }
                SuperSoccerNoggins.MatchSelectionState.currentInstance.abilityPurchased(abilityType);
            }
        };
        GameManager.prototype.onCelebrationFinished = function () {
            SuperSoccerNoggins.GameVars.getInstance().tournamentUnlocked = false;
        };
        GameManager.prototype.onCursorNogginJumped = function () {
            SuperSoccerNoggins.GameVars.getInstance().matchUnlocked = false;
        };
        GameManager.prototype.localMultiplayerSelected = function (configurationData) {
            SuperSoccerNoggins.GameVars.ai = false;
            SuperSoccerNoggins.GameVars.pvpConfigurationData = configurationData;
            SuperSoccerNoggins.GameVars.getInstance().matchID = 2;
            SuperSoccerNoggins.GameVars.adversaryTeamIDPVP = SuperSoccerNoggins.GameVars.pvpConfigurationData.adversaryTeamID;
            SuperSoccerNoggins.GameVars.playerTeamIDPVP = SuperSoccerNoggins.GameVars.pvpConfigurationData.playerTeamID;
            SuperSoccerNoggins.GameVars.getInstance().terrain = SuperSoccerNoggins.GameVars.pvpConfigurationData.terrain;
            SuperSoccerNoggins.GameVars.getInstance().water = SuperSoccerNoggins.GameVars.pvpConfigurationData.water;
            SuperSoccerNoggins.GameVars.getInstance().obstacles = SuperSoccerNoggins.GameVars.pvpConfigurationData.obstacles;
            var numPowerUpsConfigurations = SuperSoccerNoggins.GameVars.pvpConfigurationData.powerUps.length;
            SuperSoccerNoggins.GameVars.getInstance().powerUps = SuperSoccerNoggins.GameVars.pvpConfigurationData.powerUps[Math.floor(numPowerUpsConfigurations * Math.random())];
            SuperSoccerNoggins.GameVars.adversaryJumpIndexPVP = SuperSoccerNoggins.GameVars.pvpConfigurationData.jumpIndex;
            SuperSoccerNoggins.GameVars.adversaryRushIndexPVP = SuperSoccerNoggins.GameVars.pvpConfigurationData.rushIndex;
            SuperSoccerNoggins.GameVars.adversaryBacktrackIndexPVP = SuperSoccerNoggins.GameVars.pvpConfigurationData.backtrackIndex;
            SuperSoccerNoggins.GameVars.adversaryKickIndexPVP = SuperSoccerNoggins.GameVars.pvpConfigurationData.kickIndex;
            SuperSoccerNoggins.GameVars.adversaryPrecisionPVP = 1;
            SuperSoccerNoggins.GameVars.playerJumpIndexPVP = SuperSoccerNoggins.GameVars.pvpConfigurationData.jumpIndex;
            SuperSoccerNoggins.GameVars.playerRushIndexPVP = SuperSoccerNoggins.GameVars.pvpConfigurationData.rushIndex;
            SuperSoccerNoggins.GameVars.playerBacktrackIndexPVP = SuperSoccerNoggins.GameVars.pvpConfigurationData.backtrackIndex;
            SuperSoccerNoggins.GameVars.playerKickIndexPVP = SuperSoccerNoggins.GameVars.pvpConfigurationData.kickIndex;
            SuperSoccerNoggins.GameVars.pvpMatchType = SuperSoccerNoggins.GameVars.pvpConfigurationData.matchType;
            SuperSoccerNoggins.LocalMultiPlayerState.currentInstance.startPVPMatch();
        };
        return GameManager;
    }());
    GameManager._instance = null;
    SuperSoccerNoggins.GameManager = GameManager;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var GameVars = (function () {
        function GameVars() {
            if (GameVars._instance) {
                throw new Error("Error: Instantiation failed: Use GameVars.getInstance() instead of new");
            }
            else {
                GameVars._instance = this;
            }
        }
        GameVars.getInstance = function () {
            if (GameVars._instance === null) {
                GameVars._instance = new GameVars();
            }
            return GameVars._instance;
        };
        GameVars.prototype.init = function (game) {
            this.game = game;
        };
        GameVars.prototype.formatNumber = function (value) {
            return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        };
        GameVars.prototype.getLocalStorageData = function (keyName) {
            if (this.game.device.ieVersion === 9) {
                return "";
            }
            var value = localStorage.getItem(keyName);
            if (value !== null) {
                return value;
            }
            else {
                return "";
            }
        };
        GameVars.prototype.setLocalStorageData = function (keyName, value) {
            if (this.game.device.ieVersion === 9) {
                return;
            }
            localStorage.setItem(keyName, value);
        };
        Object.defineProperty(GameVars.prototype, "selectedTeamsID", {
            get: function () {
                return this._selectedTeamsID;
            },
            set: function (value) {
                this._selectedTeamsID = value;
                this.setLocalStorageData(SuperSoccerNoggins.GameConstants.SELECTED_TEAMS_ID_KEY_NAME, JSON.stringify(this._selectedTeamsID));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "playerTeamID", {
            get: function () {
                return this._playerTeamID;
            },
            set: function (value) {
                this._playerTeamID = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "adversaryTeamID", {
            get: function () {
                return this._adversaryTeamID;
            },
            set: function (value) {
                this._adversaryTeamID = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "credits", {
            get: function () {
                return this._credits;
            },
            set: function (value) {
                this._credits = value;
                this.setLocalStorageData(SuperSoccerNoggins.GameConstants.CREDITS_KEY_NAME, this._credits.toString());
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "achievedMatchID", {
            get: function () {
                return this._achievedMatchID;
            },
            set: function (value) {
                this._achievedMatchID = value;
                this.setLocalStorageData(SuperSoccerNoggins.GameConstants.ACHIEVED_MATCH_ID_KEY_NAME, this._achievedMatchID.toString());
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "matchID", {
            get: function () {
                return this._matchID;
            },
            set: function (value) {
                this._matchID = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "goalScored", {
            get: function () {
                return this._goalScored;
            },
            set: function (value) {
                this._goalScored = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "playerGoals", {
            get: function () {
                return this._playerGoals;
            },
            set: function (value) {
                this._playerGoals = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "adversaryGoals", {
            get: function () {
                return this._adversaryGoals;
            },
            set: function (value) {
                this._adversaryGoals = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "playerJumpIndex", {
            get: function () {
                return this._playerJumpIndex;
            },
            set: function (value) {
                this._playerJumpIndex = value;
                this.setLocalStorageData(SuperSoccerNoggins.GameConstants.PLAYER_ABILITY_JUMP_KEY_NAME, this._playerJumpIndex.toString());
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "playerRushIndex", {
            get: function () {
                return this._playerRushIndex;
            },
            set: function (value) {
                this._playerRushIndex = value;
                this.setLocalStorageData(SuperSoccerNoggins.GameConstants.PLAYER_ABILITY_RUSH_KEY_NAME, this._playerRushIndex.toString());
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "playerBacktrackIndex", {
            get: function () {
                return this._playerBacktrackIndex;
            },
            set: function (value) {
                this._playerBacktrackIndex = value;
                this.setLocalStorageData(SuperSoccerNoggins.GameConstants.PLAYER_ABILITY_BACKTRACK_KEY_NAME, this._playerBacktrackIndex.toString());
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "playerKickIndex", {
            get: function () {
                return this._playerKickIndex;
            },
            set: function (value) {
                this._playerKickIndex = value;
                this.setLocalStorageData(SuperSoccerNoggins.GameConstants.PLAYER_ABILITY_KICK_KEY_NAME, this._playerKickIndex.toString());
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "adversaryJumpIndex", {
            get: function () {
                return this._adversaryJumpIndex;
            },
            set: function (value) {
                this._adversaryJumpIndex = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "adversaryRushIndex", {
            get: function () {
                return this._adversaryRushIndex;
            },
            set: function (value) {
                this._adversaryRushIndex = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "adversaryBacktrackIndex", {
            get: function () {
                return this._adversaryBacktrackIndex;
            },
            set: function (value) {
                this._adversaryBacktrackIndex = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "adversaryKickIndex", {
            get: function () {
                return this._adversaryKickIndex;
            },
            set: function (value) {
                this._adversaryKickIndex = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "adversaryPrecision", {
            get: function () {
                return this._adversaryPrecision;
            },
            set: function (value) {
                this._adversaryPrecision = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "aiData", {
            get: function () {
                return this._aiData;
            },
            set: function (value) {
                this._aiData = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "obstacles", {
            get: function () {
                return this._obstacles;
            },
            set: function (value) {
                this._obstacles = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "terrain", {
            get: function () {
                return this._terrain;
            },
            set: function (value) {
                this._terrain = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "powerUps", {
            get: function () {
                return this._powerUps;
            },
            set: function (value) {
                this._powerUps = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "water", {
            get: function () {
                return this._water;
            },
            set: function (value) {
                this._water = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "ducks", {
            get: function () {
                return this._ducks;
            },
            set: function (value) {
                this._ducks = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "victory", {
            get: function () {
                return this._victory;
            },
            set: function (value) {
                this._victory = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "teamsData", {
            get: function () {
                return this._teamsData;
            },
            set: function (value) {
                this._teamsData = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "tournamentsData", {
            get: function () {
                return this._tournamentsData;
            },
            set: function (value) {
                this._tournamentsData = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "time", {
            get: function () {
                return this._time;
            },
            set: function (value) {
                this._time = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "matchUnlocked", {
            get: function () {
                return this._matchUnlocked;
            },
            set: function (value) {
                this._matchUnlocked = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "tournamentUnlocked", {
            get: function () {
                return this._tournamentUnlocked;
            },
            set: function (value) {
                this._tournamentUnlocked = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "gameCompleted", {
            get: function () {
                return this._gameCompleted;
            },
            set: function (value) {
                this._gameCompleted = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "goldenGoal", {
            get: function () {
                return this._goldenGoal;
            },
            set: function (value) {
                this._goldenGoal = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GameVars.prototype, "christmasVersion", {
            get: function () {
                return this._christmasVersion;
            },
            set: function (value) {
                this._christmasVersion = value;
            },
            enumerable: true,
            configurable: true
        });
        return GameVars;
    }());
    GameVars._instance = null;
    SuperSoccerNoggins.GameVars = GameVars;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var MatchManager = (function () {
        function MatchManager(game) {
            MatchManager.currentInstance = this;
            this.game = game;
            SuperSoccerNoggins.GameVars.paused = false;
            SuperSoccerNoggins.GameVars.getInstance().time = SuperSoccerNoggins.GameConstants.SECONDS_MATCH;
            SuperSoccerNoggins.GameVars.getInstance().playerGoals = 0;
            SuperSoccerNoggins.GameVars.getInstance().adversaryGoals = 0;
            SuperSoccerNoggins.GameVars.getInstance().goalScored = false;
            SuperSoccerNoggins.GameVars.getInstance().goldenGoal = false;
        }
        MatchManager.prototype.destroy = function () {
            MatchManager.currentInstance = null;
        };
        MatchManager.prototype.onKickOff = function (right) {
            SuperSoccerNoggins.MatchState.currentInstance.startGame(right);
            SuperSoccerNoggins.AdversaryAI.currentInstance.reset();
        };
        MatchManager.prototype.onGoal = function (playerGoal) {
            if (SuperSoccerNoggins.GameVars.getInstance().goalScored) {
                return;
            }
            SuperSoccerNoggins.GameVars.getInstance().goalScored = true;
            if (playerGoal) {
                SuperSoccerNoggins.GameVars.getInstance().playerGoals++;
                if (SuperSoccerNoggins.GameVars.ai) {
                    SuperSoccerNoggins.AchievementsManager.getInstance().onPlayerGoalScored();
                }
            }
            else {
                SuperSoccerNoggins.GameVars.getInstance().adversaryGoals++;
            }
            SuperSoccerNoggins.StageContainer.currentInstance.removeBall();
            SuperSoccerNoggins.PlayerController.currentInstance.deactivated = true;
            SuperSoccerNoggins.AdversaryAI.currentInstance.deactivated = true;
            SuperSoccerNoggins.AdversaryAI.currentInstance.onGoal();
            if (!SuperSoccerNoggins.GameVars.ai && SuperSoccerNoggins.GameVars.pvpMatchType === SuperSoccerNoggins.GameConstants.GOLDEN_GOAL_MATCH) {
                SuperSoccerNoggins.MatchState.currentInstance.onGoal(playerGoal, true);
                this.endMatch();
            }
            else if (!SuperSoccerNoggins.GameVars.ai && SuperSoccerNoggins.GameVars.pvpMatchType === SuperSoccerNoggins.GameConstants.FIRST_TO_SEVEN_MATCH && (SuperSoccerNoggins.GameVars.getInstance().playerGoals === 7 || SuperSoccerNoggins.GameVars.getInstance().adversaryGoals === 7)) {
                SuperSoccerNoggins.MatchState.currentInstance.onGoal(playerGoal, true);
                this.endMatch();
            }
            else if (SuperSoccerNoggins.GameVars.getInstance().goldenGoal) {
                SuperSoccerNoggins.MatchState.currentInstance.onGoal(playerGoal, true);
                this.endMatch();
            }
            else {
                SuperSoccerNoggins.MatchState.currentInstance.playGoalAudio(playerGoal);
                this.game.time.events.add(500, function () {
                    SuperSoccerNoggins.MatchState.currentInstance.onGoal(playerGoal);
                }, this);
                this.game.time.events.add(1500, function () {
                    SuperSoccerNoggins.GameVars.getInstance().goalScored = false;
                    SuperSoccerNoggins.PlayerController.currentInstance.deactivated = false;
                    SuperSoccerNoggins.AdversaryAI.currentInstance.deactivated = false;
                    var right;
                    if (SuperSoccerNoggins.GameVars.getInstance().matchID === 0) {
                        right = true;
                    }
                    else {
                        right = Math.random() > .5;
                    }
                    SuperSoccerNoggins.BallsManager.currentInstance.setBall(right);
                    SuperSoccerNoggins.AdversaryAI.currentInstance.reset();
                }, this);
            }
        };
        MatchManager.prototype.onPowerUpHit = function (puType) {
            var ball = SuperSoccerNoggins.BallsManager.currentInstance.ball;
            var sender = ball.sender;
            if (!sender) {
                sender = ball.x > SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2 ? SuperSoccerNoggins.GameConstants.PLAYER : SuperSoccerNoggins.GameConstants.ADVERSARY;
            }
            switch (puType) {
                case SuperSoccerNoggins.GameConstants.PU_JETPACK_GREEN:
                    SuperSoccerNoggins.StageContainer.currentInstance.jetpack(sender, true, true);
                    break;
                case SuperSoccerNoggins.GameConstants.PU_JETPACK_RED:
                    SuperSoccerNoggins.StageContainer.currentInstance.jetpack(sender, false, true);
                    break;
                case SuperSoccerNoggins.GameConstants.PU_BIG_GOAL_GREEN:
                    SuperSoccerNoggins.GoalsManager.currentInstance.bigGoal(sender, true);
                    SuperSoccerNoggins.AdversaryAI.currentInstance.onGoalSizeChanged(sender, true, true);
                    break;
                case SuperSoccerNoggins.GameConstants.PU_BIG_GOAL_RED:
                    SuperSoccerNoggins.GoalsManager.currentInstance.bigGoal(sender, false);
                    SuperSoccerNoggins.AdversaryAI.currentInstance.onGoalSizeChanged(sender, false, true);
                    break;
                case SuperSoccerNoggins.GameConstants.PU_SMALL_GOAL_GREEN:
                    SuperSoccerNoggins.GoalsManager.currentInstance.smallGoal(sender, true);
                    SuperSoccerNoggins.AdversaryAI.currentInstance.onGoalSizeChanged(sender, true, false);
                    break;
                case SuperSoccerNoggins.GameConstants.PU_SMALL_GOAL_RED:
                    SuperSoccerNoggins.GoalsManager.currentInstance.smallGoal(sender, false);
                    SuperSoccerNoggins.AdversaryAI.currentInstance.onGoalSizeChanged(sender, false, false);
                    break;
                case SuperSoccerNoggins.GameConstants.PU_BODYGUARD_GREEN:
                    this.game.time.events.add(150, function (args) {
                        SuperSoccerNoggins.StageContainer.currentInstance.spawnBodyGuard(args[0], args[1]);
                    }, this, [sender, true]);
                    break;
                case SuperSoccerNoggins.GameConstants.PU_BODYGUARD_RED:
                    this.game.time.events.add(150, function (args) {
                        SuperSoccerNoggins.StageContainer.currentInstance.spawnBodyGuard(args[0], args[1]);
                    }, this, [sender, false]);
                    break;
                case SuperSoccerNoggins.GameConstants.PU_BIG_HEAD_GREEN:
                    SuperSoccerNoggins.StageContainer.currentInstance.bigHead(sender, true, true);
                    break;
                case SuperSoccerNoggins.GameConstants.PU_BIG_HEAD_RED:
                    SuperSoccerNoggins.StageContainer.currentInstance.bigHead(sender, false, true);
                    break;
                case SuperSoccerNoggins.GameConstants.PU_BOUNCY_BALL:
                    SuperSoccerNoggins.BallsManager.currentInstance.ball.bounce();
                    break;
                case SuperSoccerNoggins.GameConstants.PU_SMALL_BALL:
                    SuperSoccerNoggins.BallsManager.currentInstance.ball.shrink();
                    break;
                case SuperSoccerNoggins.GameConstants.PU_BIG_BALL:
                    SuperSoccerNoggins.BallsManager.currentInstance.ball.blowUp();
                    break;
                case SuperSoccerNoggins.GameConstants.PU_CAN_T_KICK_GREEN:
                    SuperSoccerNoggins.StageContainer.currentInstance.disableKick(sender, true, false);
                    break;
                case SuperSoccerNoggins.GameConstants.PU_CAN_T_KICK_RED:
                    SuperSoccerNoggins.StageContainer.currentInstance.disableKick(sender, false, false);
                    break;
                case SuperSoccerNoggins.GameConstants.PU_VICKING_GREEN:
                    SuperSoccerNoggins.StageContainer.currentInstance.vicking(sender, true, true);
                    break;
                case SuperSoccerNoggins.GameConstants.PU_VICKING_RED:
                    SuperSoccerNoggins.StageContainer.currentInstance.vicking(sender, false, true);
                    break;
                default:
                    break;
            }
        };
        MatchManager.prototype.pauseGame = function () {
            SuperSoccerNoggins.GameVars.paused = true;
            this.game.time.events.pause();
            SuperSoccerNoggins.MatchState.currentInstance.pauseGame();
        };
        MatchManager.prototype.reset = function () {
            SuperSoccerNoggins.GameVars.paused = false;
            SuperSoccerNoggins.GameManager.getInstance().onMatchReset();
            this.game.time.events.resume();
            SuperSoccerNoggins.MatchState.currentInstance.reset();
        };
        MatchManager.prototype.quit = function () {
            SuperSoccerNoggins.GameVars.paused = false;
            this.game.time.events.resume();
            SuperSoccerNoggins.MatchState.currentInstance.quit();
        };
        MatchManager.prototype.exitPauseMenu = function () {
            SuperSoccerNoggins.GameVars.paused = false;
            this.game.time.events.resume();
            SuperSoccerNoggins.MatchState.currentInstance.exitPauseMenu();
        };
        MatchManager.prototype.onClickCheatMenu = function () {
            this.game.physics.box2d.paused = true;
            SuperSoccerNoggins.GameVars.paused = true;
            SuperSoccerNoggins.MatchState.currentInstance.showCheatMenu();
        };
        MatchManager.prototype.closeCheatMenu = function () {
            this.game.physics.box2d.paused = false;
            SuperSoccerNoggins.GameVars.paused = false;
            SuperSoccerNoggins.MatchState.currentInstance.hideCheatMenu();
        };
        MatchManager.prototype.onTimeOver = function () {
            if (SuperSoccerNoggins.GameVars.getInstance().playerGoals === SuperSoccerNoggins.GameVars.getInstance().adversaryGoals) {
                this.game.time.events.add(100, function () {
                    if (SuperSoccerNoggins.GameVars.getInstance().playerGoals === SuperSoccerNoggins.GameVars.getInstance().adversaryGoals) {
                        SuperSoccerNoggins.GameVars.getInstance().goldenGoal = true;
                        SuperSoccerNoggins.MatchState.currentInstance.activateGoldenGoal();
                    }
                    else {
                        this.endMatch();
                    }
                }, this);
            }
            else {
                this.endMatch();
            }
        };
        MatchManager.prototype.endMatch = function () {
            SuperSoccerNoggins.GameVars.paused = true;
            if (SuperSoccerNoggins.GameVars.ai) {
                SuperSoccerNoggins.GameManager.getInstance().onMatchEnded();
            }
            SuperSoccerNoggins.MatchState.currentInstance.matchEnded();
        };
        return MatchManager;
    }());
    SuperSoccerNoggins.MatchManager = MatchManager;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var Water = (function (_super) {
        __extends(Water, _super);
        function Water(game) {
            var _this = _super.call(this, game, null, SuperSoccerNoggins.GameConstants.WATER) || this;
            _this.waterSprite = new Phaser.Sprite(_this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, SuperSoccerNoggins.GameConstants.WATER_PY + 30, _this.game.cache.getBitmapData("blue-square"));
            _this.waterSprite.scale.setTo(SuperSoccerNoggins.GameConstants.GAME_WIDTH / 16, 50 / 16);
            _this.waterSprite.visible = false;
            _this.waterSprite.name = SuperSoccerNoggins.GameConstants.WATER;
            _this.add(_this.waterSprite);
            _this.game.physics.box2d.enable(_this.waterSprite);
            _this.waterSprite.body.static = true;
            _this.waterSprite.body.sensor = true;
            var fixture = _this.waterSprite.body.data.GetFixtureList();
            var filter = fixture.GetFilterData();
            filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_FIELD;
            fixture.SetFilterData(filter);
            _this.buoyancyController = new box2d.b2BuoyancyController();
            _this.buoyancyController.normal.SetXY(0, 1);
            _this.buoyancyController.offset = -SuperSoccerNoggins.GameConstants.WATER_PY / _this.game.physics.box2d.ptmRatio;
            _this.buoyancyController.useDensity = true;
            _this.buoyancyController.density = 6;
            _this.buoyancyController.linearDrag = 5;
            _this.buoyancyController.angularDrag = 2;
            var world = _this.game.physics.box2d.world;
            world.AddController(_this.buoyancyController);
            var waterBehind = new Phaser.Image(_this.game, 0, SuperSoccerNoggins.GameConstants.WATER_PY - 4, "texture_atlas_1", "water-behind.png");
            SuperSoccerNoggins.MatchState.currentInstance.backgroundManager.add(waterBehind);
            var animatedWaterTile;
            for (var i = 0; i < 8; i++) {
                animatedWaterTile = _this.create(90 * i, SuperSoccerNoggins.GameConstants.WATER_PY, "texture_atlas_1", "water_0001.png");
                animatedWaterTile.animations.add("flow", Phaser.Animation.generateFrameNames("water_", 1, 18, ".png", 4), 12, true);
                animatedWaterTile.play("flow", 12, true);
            }
            return _this;
        }
        Water.prototype.addBallToBuoyancyController = function (ball) {
            var ballBody = ball.body.data;
            this.buoyancyController.AddBody(ballBody);
            this.waterSprite.body.setBodyContactCallback(ball.body, this.waterBallContact, this);
        };
        Water.prototype.addDuckToBuoyancyController = function (duckBox2dBody) {
            this.buoyancyController.AddBody(duckBox2dBody);
        };
        Water.prototype.waterBallContact = function (body1, body2, fixture1, fixture2, begin, contact) {
            var ball = body2.sprite;
            if (!ball) {
                return;
            }
            if (begin) {
                body2.velocity.x *= .4;
                body2.velocity.y *= .25;
                body2.angularVelocity *= .25;
                SuperSoccerNoggins.StageContainer.currentInstance.ballHitStageWalls(ball, contact, SuperSoccerNoggins.GameConstants.SURFACE_WATER);
                SuperSoccerNoggins.AudioManager.getInstance().playEffect("splash_small");
            }
        };
        return Water;
    }(Phaser.Group));
    SuperSoccerNoggins.Water = Water;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var Ball = (function (_super) {
        __extends(Ball, _super);
        function Ball(game, x, y) {
            var _this = _super.call(this, game, x, y, "texture_atlas_season", "ball.png") || this;
            _this.name = SuperSoccerNoggins.GameConstants.BALL;
            _this.isBouncy = false;
            _this.isBig = false;
            _this.physicsInitialized = false;
            _this.sender = null;
            _this.weldNextFrame = false;
            _this.releaseNextFrame = false;
            return _this;
        }
        Ball.prototype.update = function () {
            if (this.body) {
                var s = this.body.velocity.x * this.body.velocity.x + this.body.velocity.y * this.body.velocity.y;
                if (s > 600000) {
                    this.body.velocity.x *= .985;
                    this.body.velocity.y *= .985;
                }
            }
            if (this.weldNextFrame) {
                SuperSoccerNoggins.AudioManager.getInstance().playEffect("pincho_cuerno");
                this.weldNextFrame = false;
                this.weldBallToHelm();
            }
            if (this.releaseNextFrame) {
                this.releaseNextFrame = false;
                this.release();
            }
            _super.prototype.update.call(this);
        };
        Ball.prototype.initPhysics = function () {
            this.game.physics.box2d.enable(this);
            var fixture = this.body.setCircle(Ball.BALL_RADIUS);
            this.body.friction = .3;
            this.body.restitution = .55;
            this.body.mass = .65;
            this.body.bullet = true;
            var box2dBody = this.body.data;
            if (SuperSoccerNoggins.GameVars.getInstance().matchID < 2) {
                box2dBody.SetGravityScale(.425);
            }
            else {
                box2dBody.SetGravityScale(.475);
            }
            var filter = fixture.GetFilterData();
            filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_BALL;
            filter.maskBits = SuperSoccerNoggins.GameConstants.MASK_BALL;
            fixture.SetFilterData(filter);
            this.physicsInitialized = true;
        };
        Ball.prototype.reset = function (x, y, health) {
            _super.prototype.reset.call(this, x, y, health);
            this.visible = true;
            this.releaseNextFrame = true;
            this.isWeldedToHelm = false;
            this.noggingToWeld = null;
            this.alpha = 1;
            this.frameName = "ball.png";
            this.isBouncy = false;
            this.isBig = false;
            this.scale.set(1);
            var shadowsContainer = SuperSoccerNoggins.ShadowsContainer.currentInstance;
            if (shadowsContainer) {
                shadowsContainer.resetShadow();
            }
            this.game.time.events.add(150, function () {
                var body = this.body.data;
                var fixture = body.GetFixtureList();
                fixture.SetRestitution(.75);
                var filter = fixture.GetFilterData();
                filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_BALL;
                filter.maskBits = SuperSoccerNoggins.GameConstants.MASK_BALL;
                fixture.SetFilterData(filter);
                var circleShape = fixture.GetShape();
                circleShape.m_radius = Ball.BALL_RADIUS / this.game.physics.box2d.ptmRatio;
                this.body.mass = .65;
            }, this);
            return this;
        };
        Ball.prototype.weldToHelm = function (noggin, attachToLeftHorn) {
            this.attachToLeftHorn = attachToLeftHorn;
            this.weldNextFrame = true;
            this.noggingToWeld = noggin;
        };
        Ball.prototype.weldBallToHelm = function () {
            this.isWeldedToHelm = true;
            this.body.mass = .05;
            this.body.angularVelocity = 0;
            this.body.angle = 0;
            var fixture = this.body.data.GetFixtureList();
            var filter = fixture.GetFilterData();
            filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_BALL;
            filter.maskBits = SuperSoccerNoggins.GameConstants.MASK_BALL_WELDED_TO_HELM;
            fixture.SetFilterData(filter);
            var px;
            if (this.noggingToWeld.isPlayer) {
                px = this.attachToLeftHorn ? 10 : -20;
            }
            else {
                px = this.attachToLeftHorn ? 20 : -10;
            }
            this.game.physics.box2d.weldJoint(this.body, this.noggingToWeld.head.body, px, 27, 0, 0);
        };
        Ball.prototype.releaseFromHelm = function () {
            this.releaseNextFrame = true;
        };
        Ball.prototype.disappear = function () {
            this.game.time.events.add(150, function () {
                this.destroyWeldJoints();
            }, this);
            var fixture = this.body.data.GetFixtureList();
            var filter = fixture.GetFilterData();
            filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_BALL;
            filter.maskBits = 0;
            fixture.SetFilterData(filter);
            this.game.add.tween(this)
                .to({ alpha: 0 }, 150, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                var body = this.body;
                body.angularVelocity = 0;
                body.velocity.x = 0;
                body.velocity.y = 0;
                this.visible = false;
                this.game.time.events.add(100, this.kill, this);
            }, this);
        };
        Ball.prototype.bounce = function () {
            this.frameName = "ball-bouncy.png";
            this.scale.set(1);
            this.isBouncy = true;
            this.isBig = false;
            this.body.restitution = 1.15;
            var body = this.body.data;
            var fixture = body.GetFixtureList();
            var circleShape = fixture.GetShape();
            circleShape.m_radius = Ball.BALL_RADIUS / this.game.physics.box2d.ptmRatio;
            var shadowsContainer = SuperSoccerNoggins.ShadowsContainer.currentInstance;
            if (shadowsContainer) {
                shadowsContainer.resetShadow();
            }
        };
        Ball.prototype.shrink = function () {
            this.frameName = "ball.png";
            this.scale.set(Ball.SMALL_BALL_SCALE_FACTOR);
            this.isBouncy = false;
            this.isBig = false;
            this.body.restitution = .55;
            this.body.mass = .35;
            var body = this.body.data;
            var fixture = body.GetFixtureList();
            var circleShape = fixture.GetShape();
            circleShape.m_radius = Ball.BALL_RADIUS / this.game.physics.box2d.ptmRatio * Ball.SMALL_BALL_SCALE_FACTOR;
            var shadowsContainer = SuperSoccerNoggins.ShadowsContainer.currentInstance;
            if (shadowsContainer) {
                shadowsContainer.ballShrunken();
            }
        };
        Ball.prototype.blowUp = function () {
            this.frameName = "ballx2.png";
            this.scale.set(1);
            this.isBouncy = false;
            this.isBig = true;
            this.body.restitution = .55;
            this.body.mass = .65;
            var body = this.body.data;
            var fixture = body.GetFixtureList();
            var circleShape = fixture.GetShape();
            circleShape.m_radius = Ball.BALL_RADIUS / this.game.physics.box2d.ptmRatio * Ball.BIG_BALL_SCALE_FACTOR;
            var shadowsContainer = SuperSoccerNoggins.ShadowsContainer.currentInstance;
            if (shadowsContainer) {
                shadowsContainer.ballBlownUp();
            }
        };
        Ball.prototype.goldenBall = function () {
            if (this.isBouncy) {
                this.frameName = "ball-bouncy-golden.png";
            }
            else if (this.isBig) {
                this.frameName = "ballx2-golden.png";
            }
            else {
                this.frameName = "ball-golden.png";
            }
        };
        Ball.prototype.release = function () {
            this.weldNextFrame = false;
            this.noggingToWeld = null;
            this.isWeldedToHelm = false;
            this.destroyWeldJoints();
            var fixture = this.body.data.GetFixtureList();
            var filter = fixture.GetFilterData();
            filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_BALL;
            filter.maskBits = SuperSoccerNoggins.GameConstants.MASK_BALL;
            fixture.SetFilterData(filter);
            this.body.mass = .65;
        };
        Ball.prototype.destroyWeldJoints = function () {
            var body = this.body.data;
            var joints = [];
            for (var joint = body.GetJointList(); joint; joint = joint.next) {
                joints.push(joint);
            }
            var world = this.game.physics.box2d.world;
            for (var i = 0; i < joints.length; i++) {
                world.DestroyJoint(joints[i].joint);
            }
        };
        return Ball;
    }(Phaser.Sprite));
    Ball.BALL_RADIUS = 10;
    Ball.SMALL_BALL_SCALE_FACTOR = .65;
    Ball.BIG_BALL_SCALE_FACTOR = 1.95;
    SuperSoccerNoggins.Ball = Ball;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var BallsManager = (function (_super) {
        __extends(BallsManager, _super);
        function BallsManager(game) {
            var _this = _super.call(this, game, null, "balls-manager") || this;
            BallsManager.currentInstance = _this;
            _this.ball = new SuperSoccerNoggins.Ball(_this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 185);
            _this.add(_this.ball);
            if (!SuperSoccerNoggins.GameVars.ai && SuperSoccerNoggins.GameVars.pvpMatchType === SuperSoccerNoggins.GameConstants.GOLDEN_GOAL_MATCH) {
                _this.ball.goldenBall();
            }
            _this.throwToTheRight = false;
            _this.throwBallNextFrame = false;
            return _this;
        }
        BallsManager.prototype.update = function () {
            _super.prototype.update.call(this);
            if (this.throwBallNextFrame) {
                this.throwBallNextFrame = false;
                this.throwBall();
            }
        };
        BallsManager.prototype.startGame = function (right) {
            this.setBall(right);
        };
        BallsManager.prototype.setBall = function (right) {
            if (!this.ball.physicsInitialized) {
                this.ball.initPhysics();
                SuperSoccerNoggins.PowerUpsManager.currentInstance.setBall(this.ball);
                SuperSoccerNoggins.GoalsManager.currentInstance.setCallBacks(this.ball);
                SuperSoccerNoggins.StageBoundaries.currentInstance.setCallBacks(this.ball);
                if (SuperSoccerNoggins.GameVars.getInstance().water) {
                    SuperSoccerNoggins.StageContainer.currentInstance.water.addBallToBuoyancyController(this.ball);
                }
                SuperSoccerNoggins.Player.currentInstance.setCallBacksWithBall(this.ball);
                SuperSoccerNoggins.Adversary.currentInstance.setCallBacksWithBall(this.ball);
                SuperSoccerNoggins.AdversaryAI.currentInstance.setCallBacksWithBall(this.ball);
            }
            else {
                this.ball.reset(SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 185);
            }
            this.ball.sender = null;
            this.throwToTheRight = right;
            if (SuperSoccerNoggins.ShadowsContainer.currentInstance) {
                SuperSoccerNoggins.ShadowsContainer.currentInstance.showBallShadow();
            }
            this.throwBallNextFrame = true;
        };
        BallsManager.prototype.removeBall = function (matchEnded) {
            if (this.ball) {
                this.ball.disappear();
            }
            if (SuperSoccerNoggins.ShadowsContainer.currentInstance) {
                SuperSoccerNoggins.ShadowsContainer.currentInstance.removeBallShadow();
            }
        };
        BallsManager.prototype.throwBall = function () {
            var ballSpeedX;
            if (SuperSoccerNoggins.GameVars.getInstance().terrain === SuperSoccerNoggins.GameConstants.TERRAIN_ISLAND) {
                ballSpeedX = 35 + Math.random() * 12;
            }
            else {
                ballSpeedX = 82.5 + Math.random() * 20;
            }
            this.ball.body.angularVelocity = this.throwToTheRight ? 1.5 : -1.5;
            this.ball.body.velocity.x = this.throwToTheRight ? ballSpeedX : -ballSpeedX;
            this.ball.body.velocity.y = -75;
            this.add(this.ball);
        };
        return BallsManager;
    }(Phaser.Group));
    SuperSoccerNoggins.BallsManager = BallsManager;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var Goal = (function (_super) {
        __extends(Goal, _super);
        function Goal(game, playerGoal) {
            var _this = _super.call(this, game, null, "goal") || this;
            _this.playerGoal = playerGoal;
            _this.currentState = Goal.NORMAL_GOAL_STATE;
            var goalImageX;
            var goalImageY = 396;
            var goalTopBarX;
            var goalSensorX;
            var goalScaleX;
            var angleGoalBar;
            var fx_px;
            var fx_py;
            var fx_scale;
            if (_this.playerGoal) {
                goalImageX = SuperSoccerNoggins.GameConstants.GAME_WIDTH;
                goalTopBarX = SuperSoccerNoggins.GameConstants.GAME_WIDTH - 30;
                goalSensorX = 642;
                goalScaleX = -1;
                angleGoalBar = -6.5;
                fx_px = SuperSoccerNoggins.GameConstants.GAME_WIDTH;
                fx_scale = -1;
            }
            else {
                goalImageX = 0;
                goalTopBarX = 30;
                goalSensorX = -2;
                goalScaleX = 1;
                angleGoalBar = 6.5;
                fx_px = 0;
                fx_scale = 1;
            }
            var goalFrontTextureName;
            var goalBackTextureName;
            if (SuperSoccerNoggins.GameVars.getInstance().terrain === SuperSoccerNoggins.GameConstants.TERRAIN_ISLAND) {
                goalFrontTextureName = "goal-front-island.png";
                goalBackTextureName = "goal-back-island.png";
                goalImageY = 436;
                fx_py = SuperSoccerNoggins.GameConstants.GAME_HEIGHT;
            }
            else {
                goalFrontTextureName = "goal-front.png";
                goalBackTextureName = "goal-back.png";
                fx_py = 392;
            }
            _this.goalImageBack = new Phaser.Sprite(_this.game, goalImageX, goalImageY - 12, "texture_atlas_season", goalBackTextureName);
            _this.goalImageBack.anchor.set(0, 1);
            _this.goalImageBack.scale.x = goalScaleX;
            SuperSoccerNoggins.MatchState.currentInstance.backgroundManager.add(_this.goalImageBack);
            _this.goalFXImage = new Phaser.Image(_this.game, fx_px, fx_py, "texture_atlas_1", "fx_porteria_gol.png");
            _this.goalFXImage.anchor.set(0, 1);
            _this.goalFXImage.scale.x = fx_scale;
            _this.add(_this.goalFXImage);
            _this.goalFXImage.visible = false;
            _this.goalImageFront = new Phaser.Sprite(_this.game, goalImageX, goalImageY, "texture_atlas_season", goalFrontTextureName);
            _this.goalImageFront.anchor.set(0, 1);
            _this.goalImageFront.scale.x = goalScaleX;
            _this.add(_this.goalImageFront);
            _this.goalBar = new Phaser.Sprite(_this.game, goalTopBarX, Goal.GOAL_BAR_NORMAL_PY, _this.game.cache.getBitmapData("dark-square"));
            _this.goalBar.scale.set(62 / 16, 5 / 16);
            _this.goalBar.visible = false;
            _this.goalBar.name = SuperSoccerNoggins.GameConstants.GOAL_BAR;
            _this.goalBar.angle = angleGoalBar;
            _this.game.physics.box2d.enable(_this.goalBar);
            _this.goalBar.body.static = true;
            _this.goalBar.body.restitution = SuperSoccerNoggins.GameConstants.STAGE_WALLS_RESTITUTION;
            var fixture = _this.goalBar.body.data.GetFixtureList();
            var filter = fixture.GetFilterData();
            filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_GOAL_BAR;
            fixture.SetFilterData(filter);
            _this.add(_this.goalBar);
            _this.goalSensor = new Phaser.Sprite(_this.game, goalSensorX, Goal.GOAL_SENSOR_NORMAL_PY, _this.game.cache.getBitmapData("dark-square"));
            _this.goalSensor.scale.set(100 / 16, 162 / 16);
            _this.goalSensor.visible = false;
            _this.game.physics.box2d.enable(_this.goalSensor);
            _this.goalSensor.body.sensor = true;
            _this.goalSensor.body.static = true;
            fixture = _this.goalSensor.body.data.GetFixtureList();
            filter = fixture.GetFilterData();
            filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_FIELD;
            fixture.SetFilterData(filter);
            _this.add(_this.goalSensor);
            return _this;
        }
        Goal.prototype.goal = function () {
            this.goalFXImage.visible = true;
            this.game.add.tween(this.goalFXImage)
                .to({ alpha: 0 }, 175, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.goalFXImage.visible = false;
                this.goalFXImage.alpha = 1;
            }, this);
        };
        Goal.prototype.makeBig = function () {
            this.currentState = Goal.BIG_GOAL_STATE;
            var scaleBigGoal;
            if (SuperSoccerNoggins.GameVars.getInstance().terrain === SuperSoccerNoggins.GameConstants.TERRAIN_ISLAND) {
                scaleBigGoal = 1.28;
                this.goalFXImage.scale.y = 1.28;
            }
            else {
                scaleBigGoal = 1.45;
                this.goalFXImage.scale.y = 1.45;
            }
            this.game.add.tween(this.goalImageFront.scale)
                .to({ y: scaleBigGoal }, 650, Phaser.Easing.Elastic.In, true);
            this.game.add.tween(this.goalImageBack.scale)
                .to({ y: scaleBigGoal }, 650, Phaser.Easing.Elastic.In, true);
            this.game.add.tween(this.goalBar.body)
                .to({ y: Goal.GOAL_BAR_BIG_PY }, 650, Phaser.Easing.Elastic.In, true);
            this.game.add.tween(this.goalSensor.body)
                .to({ y: Goal.GOAL_SENSOR_BIG_PY }, 650, Phaser.Easing.Elastic.In, true);
        };
        Goal.prototype.makeSmall = function () {
            this.currentState = Goal.SMALL_GOAL_STATE;
            var scaleSmallGoal;
            if (SuperSoccerNoggins.GameVars.getInstance().terrain === SuperSoccerNoggins.GameConstants.TERRAIN_ISLAND) {
                scaleSmallGoal = .725;
                this.goalFXImage.scale.y = .725;
            }
            else {
                scaleSmallGoal = .64;
                this.goalFXImage.scale.y = .64;
            }
            this.game.add.tween(this.goalImageFront.scale)
                .to({ y: scaleSmallGoal }, 650, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.goalImageBack.scale)
                .to({ y: scaleSmallGoal * .98 }, 650, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.goalBar.body)
                .to({ y: Goal.GOAL_BAR_SMALL_PY }, 650, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.goalSensor.body)
                .to({ y: Goal.GOAL_SENSOR_SMALL_PY }, 650, Phaser.Easing.Cubic.Out, true);
        };
        Goal.prototype.resetSize = function () {
            this.currentState = Goal.NORMAL_GOAL_STATE;
            this.goalFXImage.scale.y = 1;
            var easing = this.goalImageFront.scale.y > 1 ? Phaser.Easing.Cubic.Out : Phaser.Easing.Elastic.In;
            this.game.add.tween(this.goalImageFront.scale)
                .to({ y: 1 }, 650, easing, true);
            this.game.add.tween(this.goalImageBack.scale)
                .to({ y: 1 }, 650, easing, true);
            this.game.add.tween(this.goalBar.body)
                .to({ y: Goal.GOAL_BAR_NORMAL_PY }, 650, easing, true);
            this.game.add.tween(this.goalSensor.body)
                .to({ y: Goal.GOAL_SENSOR_NORMAL_PY }, 650, easing, true);
        };
        return Goal;
    }(Phaser.Group));
    Goal.BIG_GOAL_STATE = "big-goal";
    Goal.NORMAL_GOAL_STATE = "normal-goal";
    Goal.SMALL_GOAL_STATE = "small-goal";
    Goal.GOAL_BAR_NORMAL_PY = 287;
    Goal.GOAL_BAR_BIG_PY = 236;
    Goal.GOAL_BAR_SMALL_PY = 326;
    Goal.GOAL_SENSOR_NORMAL_PY = 375;
    Goal.GOAL_SENSOR_BIG_PY = 328;
    Goal.GOAL_SENSOR_SMALL_PY = 415;
    SuperSoccerNoggins.Goal = Goal;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var GoalsManager = (function (_super) {
        __extends(GoalsManager, _super);
        function GoalsManager(game) {
            var _this = _super.call(this, game) || this;
            GoalsManager.currentInstance = _this;
            _this.adversaryGoal = new SuperSoccerNoggins.Goal(_this.game, false);
            _this.add(_this.adversaryGoal);
            _this.playerGoal = new SuperSoccerNoggins.Goal(_this.game, true);
            _this.add(_this.playerGoal);
            return _this;
        }
        GoalsManager.prototype.setCallBacks = function (ball) {
            this.adversaryGoal.goalSensor.body.setBodyContactCallback(ball.body, this.adversaryGoalSensorContact, this);
            this.playerGoal.goalSensor.body.setBodyContactCallback(ball.body, this.playerGoalSensorContact, this);
            this.adversaryGoal.goalBar.body.setBodyContactCallback(ball.body, this.goalTopBarContact, this);
            this.playerGoal.goalBar.body.setBodyContactCallback(ball.body, this.goalTopBarContact, this);
        };
        GoalsManager.prototype.bigGoal = function (ballSender, isGood) {
            var goal;
            if (ballSender === SuperSoccerNoggins.GameConstants.PLAYER) {
                goal = isGood ? this.adversaryGoal : this.playerGoal;
            }
            else {
                goal = isGood ? this.playerGoal : this.adversaryGoal;
            }
            goal.makeBig();
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("goal_enlarge");
        };
        GoalsManager.prototype.smallGoal = function (ballSender, isGood) {
            var goal;
            if (ballSender === SuperSoccerNoggins.GameConstants.PLAYER) {
                goal = isGood ? this.playerGoal : this.adversaryGoal;
            }
            else {
                goal = isGood ? this.adversaryGoal : this.playerGoal;
            }
            goal.makeSmall();
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("goal_shrink");
        };
        GoalsManager.prototype.resetGoals = function () {
            if (this.adversaryGoal.currentState !== SuperSoccerNoggins.Goal.NORMAL_GOAL_STATE) {
                this.adversaryGoal.resetSize();
            }
            if (this.playerGoal.currentState !== SuperSoccerNoggins.Goal.NORMAL_GOAL_STATE) {
                this.playerGoal.resetSize();
            }
        };
        GoalsManager.prototype.adversaryGoalSensorContact = function (body1, body2, fixture1, fixture2, begin, contact) {
            if (body2.sprite === null || (SuperSoccerNoggins.GameVars.getInstance().time <= .5 && (SuperSoccerNoggins.GameVars.getInstance().playerGoals !== SuperSoccerNoggins.GameVars.getInstance().adversaryGoals))) {
                return;
            }
            if (begin) {
                SuperSoccerNoggins.MatchManager.currentInstance.onGoal(true);
                this.adversaryGoal.goal();
            }
        };
        GoalsManager.prototype.playerGoalSensorContact = function (body1, body2, fixture1, fixture2, begin, contact) {
            if (body2.sprite === null || (SuperSoccerNoggins.GameVars.getInstance().time <= .5 && (SuperSoccerNoggins.GameVars.getInstance().playerGoals !== SuperSoccerNoggins.GameVars.getInstance().adversaryGoals))) {
                return;
            }
            if (begin) {
                SuperSoccerNoggins.MatchManager.currentInstance.onGoal(false);
                this.playerGoal.goal();
            }
        };
        GoalsManager.prototype.goalTopBarContact = function (body1, body2, fixture1, fixture2, begin, contact) {
            var ball = body2.sprite;
            var rnd = Math.floor(Math.random() * 4) + 1;
            if (begin && ball.y < body1.y) {
                SuperSoccerNoggins.StageContainer.currentInstance.ballHitStageWalls(ball, contact, SuperSoccerNoggins.GameConstants.SURFACE_GOAL_BAR);
                SuperSoccerNoggins.AudioManager.getInstance().playEffect("impacto_" + rnd);
            }
            else {
                SuperSoccerNoggins.AudioManager.getInstance().playEffect("impacto_" + rnd);
            }
            if (!begin) {
                SuperSoccerNoggins.AdversaryAI.currentInstance.ballJustChangedDirection(ball, "poste");
            }
        };
        return GoalsManager;
    }(Phaser.Group));
    SuperSoccerNoggins.GoalsManager = GoalsManager;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var Noggin = (function (_super) {
        __extends(Noggin, _super);
        function Noggin(game, isPlayer, isBodyguard) {
            var _this = _super.call(this, game) || this;
            _this.isPlayer = isPlayer;
            _this.initialX = _this.isPlayer ? SuperSoccerNoggins.GameConstants.PLAYER_INITIAL_PX : SuperSoccerNoggins.GameConstants.ADVERSARY_INITIAL_PX;
            switch (SuperSoccerNoggins.GameVars.getInstance().terrain) {
                case SuperSoccerNoggins.GameConstants.TERRAIN_SMALL_ISLANDS:
                    _this.initialY = SuperSoccerNoggins.GameConstants.FLAT_FIELD_Y - SuperSoccerNoggins.GameConstants.NOGGIN_RADIUS;
                    break;
                case SuperSoccerNoggins.GameConstants.TERRAIN_BIG_LAKE:
                    _this.initialY = SuperSoccerNoggins.GameConstants.FLAT_FIELD_Y - SuperSoccerNoggins.GameConstants.NOGGIN_RADIUS;
                    break;
                case SuperSoccerNoggins.GameConstants.TERRAIN_FLAT:
                    _this.initialY = _this.initialY = SuperSoccerNoggins.GameConstants.FLAT_FIELD_Y - SuperSoccerNoggins.GameConstants.NOGGIN_RADIUS;
                    break;
                case SuperSoccerNoggins.GameConstants.TERRAIN_MOVING_SLICES_1:
                case SuperSoccerNoggins.GameConstants.TERRAIN_MOVING_SLICES_2:
                case SuperSoccerNoggins.GameConstants.TERRAIN_MOVING_SLICES_3:
                    _this.initialY = SuperSoccerNoggins.GameConstants.FLAT_FIELD_Y - SuperSoccerNoggins.GameConstants.NOGGIN_RADIUS;
                    break;
                case SuperSoccerNoggins.GameConstants.TERRAIN_ISLAND:
                    _this.initialY = SuperSoccerNoggins.GameConstants.FIELD_WITH_WATER_Y - SuperSoccerNoggins.GameConstants.NOGGIN_RADIUS;
                    break;
                default:
                    break;
            }
            _this.isBodyGuard = isBodyguard;
            _this.groundContact = true;
            _this.rightSideContact = false;
            _this.leftSideContact = false;
            _this.motorSpeed = 0;
            _this.kicking = false;
            _this.footTurningBack = false;
            _this.xSpeed = 0;
            _this.kickMotorSpeed = _this.isPlayer ? 200 : -200;
            _this.insideWater = false;
            _this.resetting = false;
            _this.hasJetpack = false;
            _this.hasHelm = false;
            _this.rival = null;
            _this.kickEnabled = true;
            _this.isHeadBig = false;
            _this.precision = .5 + (SuperSoccerNoggins.GameVars.getInstance().matchID / 100);
            _this.headImage_dx = 0;
            _this.headImage_dy = 0;
            _this.upperLimitAngle = _this.isPlayer ? 60 : -60;
            _this.lowerLimitAngle = _this.isPlayer ? -25 : 15;
            _this.movingHorizontally = false;
            _this.movingFramesCounter = 0;
            _this.contactWithGoalBar = false;
            _this.powerUpTimerEvent = null;
            _this.deltaX = 0;
            _this.smoke = null;
            _this.setImageNames();
            _this.addBodyImage();
            _this.addBody();
            _this.addHeadImage();
            _this.addHead();
            _this.addFoot();
            _this.setAbilities();
            return _this;
        }
        Noggin.prototype.update = function () {
            _super.prototype.update.call(this);
            if (this.isPlayer) {
                this.nogginBodyImage.x = this.torso.x + 8;
            }
            else {
                this.nogginBodyImage.x = this.torso.x - 8;
            }
            this.nogginBodyImage.y = this.torso.y + 8;
            this.nogginHeadImage.x = this.head.body.x + this.headImage_dx;
            this.nogginHeadImage.y = this.head.body.y + this.headImage_dy;
            this.headImage_dx *= .925;
            this.headImage_dy *= .9;
            if (this.hasJetpack) {
                if (SuperSoccerNoggins.GameVars.getInstance().christmasVersion) {
                    this.jetpack.x = this.torso.x;
                    this.jetpack.y = this.torso.y - 20;
                }
                else {
                    this.jetpack.x = this.torso.x;
                    this.jetpack.y = this.torso.y;
                }
            }
            this.head.headSensor.body.x = this.torso.body.x;
            this.head.headSensor.body.y = this.torso.body.y;
            if (SuperSoccerNoggins.GameVars.getInstance().water) {
                if (SuperSoccerNoggins.GameConstants.WATER_PY - this.torso.y < Noggin.WATER_LIMIT) {
                    if (!this.insideWater) {
                        SuperSoccerNoggins.AudioManager.getInstance().playEffect("splash_big");
                    }
                    this.insideWater = true;
                }
                else {
                    this.insideWater = false;
                }
            }
            if (this.movingHorizontally && this.groundContact) {
                this.movingFramesCounter++;
                if (this.movingFramesCounter % this.framesAngleOscillation === 0) {
                    this.nogginBodyImage.angle = -this.nogginBodyImage.angle;
                }
            }
            this.torso.body.velocity.x = this.xSpeed;
            this.xSpeed = this.xSpeed * .85;
            this.movingHorizontally = false;
            this.footRevoluteJoint.SetMotorSpeed(this.motorSpeed);
            if (this.kicking) {
                if (this.isPlayer) {
                    if (this.foot.body.angle >= this.upperLimitAngle) {
                        this.kicking = false;
                        this.turnFootBack();
                    }
                }
                else {
                    if (this.foot.body.angle <= this.upperLimitAngle) {
                        this.kicking = false;
                        this.turnFootBack();
                    }
                }
            }
            if (this.footTurningBack) {
                if (this.isPlayer) {
                    if (this.foot.body.angle <= this.lowerLimitAngle) {
                        this.footTurningBack = false;
                        this.motorSpeed = 0;
                        this.hideFoot();
                    }
                }
                else {
                    if (this.foot.body.angle >= this.lowerLimitAngle) {
                        this.footTurningBack = false;
                        this.motorSpeed = 0;
                        this.hideFoot();
                    }
                }
            }
        };
        Noggin.prototype.reset = function () {
            this.resetting = true;
            this.torso.body.velocity.x = 0;
            this.torso.body.velocity.y = 0;
            this.torso.body.x = this.initialX;
            this.torso.body.y = this.initialY;
            this.head.body.x = this.initialX;
            this.head.body.y = this.initialY;
            this.motorSpeed = 0;
            this.footRevoluteJoint.SetMotorSpeed(0);
            this.footRevoluteJoint.m_enableLimit = false;
            this.foot.body.data.SetAngularVelocity(0);
            this.kicking = false;
            this.game.time.events.add(500, function () {
                this.footRevoluteJoint.m_enableLimit = true;
                this.foot.body.angle = this.upperLimitAngle;
                this.turnFootBack();
                this.resetting = false;
            }, this);
            if (!this.kickEnabled) {
                this.enableKick();
            }
            this.game.add.tween(this)
                .to({ alpha: 0 }, 125, Phaser.Easing.Cubic.Out, true, 0, 0, true);
        };
        Noggin.prototype.jump = function () {
            if (this.resetting || !this.game) {
                return;
            }
            if (!this.groundContact && !this.hasJetpack) {
                this.doubleCheckGroundContact();
            }
            if (this.groundContact || this.hasJetpack) {
                this.movingFramesCounter = 0;
                if (this.hasJetpack) {
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect("jetpack_on");
                }
                else {
                    var rnd = Math.floor(Math.random() * 3) + 1;
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect("jump_0" + rnd);
                }
                if (this.insideWater) {
                    this.torso.body.velocity.y = this.jumpSpeed * .4;
                    this.headImage_dy = this.hasJetpack ? 0 : -3;
                }
                else {
                    this.torso.body.velocity.y = this.jumpSpeed;
                    this.headImage_dy = this.hasJetpack ? 0 : -8;
                }
                if (this.kickEnabled) {
                    this.nogginBodyImage.frameName = this.nogginBodyImageFrameName2;
                }
                else {
                    this.nogginBodyImage.frameName = this.nogginFlamencaBodyImageFrameName2;
                }
                if (this.hasJetpack) {
                    this.jetpack.on();
                }
                else {
                    this.nogginHeadImage.angle = this.isPlayer ? 8 : -8;
                }
                return true;
            }
            return false;
        };
        Noggin.prototype.jumpReleased = function () {
            if (this.hasJetpack) {
                this.jetpack.off();
            }
        };
        Noggin.prototype.rush = function () {
            if (this.resetting || !this.game) {
                return;
            }
            if (this.game.time.now - this.timeLostVerticalContact < 150) {
                return;
            }
            if (this.isPlayer) {
                if (this.leftSideContact) {
                    return;
                }
                if (this.torso.x > SuperSoccerNoggins.GameConstants.DELTA_X_GOAL) {
                    if (this.insideWater) {
                        this.xSpeed = this.rushSpeedWater;
                    }
                    else {
                        this.xSpeed = this.rushSpeed;
                    }
                }
            }
            else {
                if (this.rightSideContact) {
                    return;
                }
                if (this.torso.x < SuperSoccerNoggins.GameConstants.GAME_WIDTH - SuperSoccerNoggins.GameConstants.DELTA_X_GOAL) {
                    if (this.insideWater) {
                        this.xSpeed = this.rushSpeedWater;
                    }
                    else {
                        this.xSpeed = this.rushSpeed;
                    }
                }
            }
            this.movingHorizontally = true;
        };
        Noggin.prototype.backtrack = function () {
            if (this.resetting) {
                return;
            }
            if (this.game.time.now - this.timeLostVerticalContact < 150) {
                return;
            }
            if (this.isPlayer) {
                if (this.rightSideContact) {
                    return;
                }
                if (this.torso.x < SuperSoccerNoggins.GameConstants.GAME_WIDTH - SuperSoccerNoggins.GameConstants.DELTA_X_GOAL) {
                    if (this.insideWater) {
                        this.xSpeed = this.backtrackSpeedWater;
                    }
                    else {
                        this.xSpeed = this.backtrackSpeed;
                    }
                }
            }
            else {
                if (this.leftSideContact) {
                    return;
                }
                if (this.torso.x > SuperSoccerNoggins.GameConstants.DELTA_X_GOAL) {
                    if (this.insideWater) {
                        this.xSpeed = this.backtrackSpeedWater;
                    }
                    else {
                        this.xSpeed = this.backtrackSpeed;
                    }
                }
            }
            this.movingHorizontally = true;
        };
        Noggin.prototype.kick = function () {
            if (this.resetting || !this.game) {
                return;
            }
            if (this.kickEnabled) {
                this.nogginBodyImage.frameName = this.nogginBodyImageFrameName3;
                this.foot.kick();
                if (this.insideWater) {
                    this.motorSpeed = this.kickMotorSpeed * .6;
                }
                else {
                    this.motorSpeed = this.kickMotorSpeed;
                }
                this.kicking = true;
                SuperSoccerNoggins.AudioManager.getInstance().playEffect("kick");
            }
            else {
                this.nogginBodyImage.frameName = this.nogginFlamencaBodyImageFrameName3;
                this.game.time.events.add(150, function () {
                    if (this.groundContact) {
                        this.nogginBodyImage.frameName = this.nogginFlamencaBodyImageFrameName1;
                    }
                    else {
                        this.nogginBodyImage.frameName = this.nogginFlamencaBodyImageFrameName2;
                    }
                }, this);
            }
        };
        Noggin.prototype.turnFootBack = function () {
            this.foot.turnBack();
            this.motorSpeed = this.isPlayer ? -8 : 8;
            this.footTurningBack = true;
        };
        Noggin.prototype.makeHeadBig = function () {
            if (this.isHeadBig) {
                return;
            }
            this.isHeadBig = true;
            this.head.makeBig();
            this.torso.body.velocity.y = -50;
            var headScale_x;
            if (this.isPlayer) {
                headScale_x = 1;
            }
            else {
                headScale_x = -1;
            }
            this.game.add.tween(this.nogginHeadImage.scale)
                .to({ x: headScale_x, y: 1 }, 600, Phaser.Easing.Elastic.Out, true);
            this.headWeldJoint.m_localAnchorA.y = -15 / this.game.physics.box2d.ptmRatio;
            this.nogginHeadImage.anchor.set(.4, .38);
            this.powerUpTimerEvent = this.game.time.events.add(SuperSoccerNoggins.GameConstants.TIME_POWER_UP_ACTIVE, this.shrinkHead, this);
        };
        Noggin.prototype.addJetpack = function () {
            this.hasJetpack = true;
            if (!this.jetpack) {
                this.jetpack = new SuperSoccerNoggins.Jetpack(this.game, this.isPlayer);
                this.addAt(this.jetpack, 0);
            }
            else {
                this.jetpack.reset(0, 0);
            }
            this.nogginHeadImage.frameName = this.headJetPackFrameName;
            this.rushSpeed *= 1.25;
            this.backtrackSpeed *= 1.25;
            this.jumpSpeed = -450;
            this.torso.body.data.SetGravityScale(.95);
            this.torso.body.mass = 1.75;
            this.head.body.data.SetGravityScale(.95);
            this.head.body.mass = 1.25;
            this.powerUpTimerEvent = this.game.time.events.add(SuperSoccerNoggins.GameConstants.TIME_POWER_UP_ACTIVE, this.removeJetpack, this);
        };
        Noggin.prototype.removeJetpack = function () {
            this.hasJetpack = false;
            this.jetpack.kill();
            this.nogginHeadImage.frameName = this.headFrameName;
            var rushIndex;
            var backtrackIndex;
            var sign;
            if (this.isPlayer) {
                sign = 1;
                if (SuperSoccerNoggins.GameVars.ai) {
                    rushIndex = SuperSoccerNoggins.GameVars.getInstance().playerRushIndex;
                    backtrackIndex = SuperSoccerNoggins.GameVars.getInstance().playerBacktrackIndex;
                }
                else {
                    rushIndex = SuperSoccerNoggins.GameVars.playerRushIndexPVP;
                    backtrackIndex = SuperSoccerNoggins.GameVars.playerBacktrackIndexPVP;
                }
            }
            else {
                sign = -1;
                if (SuperSoccerNoggins.GameVars.ai) {
                    rushIndex = SuperSoccerNoggins.GameVars.getInstance().adversaryRushIndex;
                    backtrackIndex = SuperSoccerNoggins.GameVars.getInstance().adversaryBacktrackIndex;
                }
                else {
                    rushIndex = SuperSoccerNoggins.GameVars.adversaryRushIndexPVP;
                    backtrackIndex = SuperSoccerNoggins.GameVars.adversaryBacktrackIndexPVP;
                }
            }
            this.rushSpeed = -sign * SuperSoccerNoggins.GameConstants.RUSH_VELOCITY[rushIndex - 1];
            this.rushSpeedWater = -sign * SuperSoccerNoggins.GameConstants.RUSH_VELOCITY_WATER[rushIndex - 1];
            this.backtrackSpeed = sign * SuperSoccerNoggins.GameConstants.BACKTRACK_VELOCITY[backtrackIndex - 1];
            this.backtrackSpeedWater = sign * SuperSoccerNoggins.GameConstants.BACKTRACK_VELOCITY_WATER[backtrackIndex - 1];
            var jumpIndex;
            if (SuperSoccerNoggins.GameVars.ai) {
                jumpIndex = this.isPlayer ? SuperSoccerNoggins.GameVars.getInstance().playerJumpIndex : SuperSoccerNoggins.GameVars.getInstance().adversaryJumpIndex;
            }
            else {
                jumpIndex = this.isPlayer ? SuperSoccerNoggins.GameVars.playerJumpIndexPVP : SuperSoccerNoggins.GameVars.adversaryJumpIndexPVP;
            }
            this.jumpSpeed = SuperSoccerNoggins.GameConstants.JUMP_VELOCITY[jumpIndex - 1];
            this.torso.body.data.SetGravityScale(SuperSoccerNoggins.GameConstants.JUMP_GRAVITY_SCALE[jumpIndex - 1]);
            this.torso.body.mass = SuperSoccerNoggins.GameConstants.TORSO_MASS[jumpIndex - 1];
            this.head.body.data.SetGravityScale(SuperSoccerNoggins.GameConstants.JUMP_GRAVITY_SCALE[jumpIndex - 1]);
            this.head.body.mass = SuperSoccerNoggins.GameConstants.HEAD_MASS[jumpIndex - 1];
            this.addSmoke();
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("smoke");
        };
        Noggin.prototype.addVickingHelm = function () {
            if (this.hasHelm) {
                return;
            }
            this.hasHelm = true;
            this.nogginHeadImage.frameName = this.headWithHelmFrameName;
            this.nogginHeadImage.anchor.set(.3, .385);
            this.setAbilities(true);
            this.powerUpTimerEvent = this.game.time.events.add(SuperSoccerNoggins.GameConstants.TIME_POWER_UP_ACTIVE, this.removeVickingHelm, this);
        };
        Noggin.prototype.removeVickingHelm = function () {
            this.hasHelm = false;
            this.nogginHeadImage.frameName = this.headFrameName;
            this.nogginHeadImage.anchor.set(.3, .425);
            this.setAbilities(false);
            SuperSoccerNoggins.BallsManager.currentInstance.ball.releaseFromHelm();
            this.addSmoke();
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("smoke");
        };
        Noggin.prototype.disableKick = function () {
            if (!this.kickEnabled) {
                return;
            }
            this.kickEnabled = false;
            this.nogginHeadImage.frameName = this.headFlamencaFrameName;
            this.nogginHeadImage.anchor.set(.3, .51);
            if (this.groundContact) {
                this.nogginBodyImage.frameName = this.nogginFlamencaBodyImageFrameName1;
            }
            else {
                this.nogginBodyImage.frameName = this.nogginFlamencaBodyImageFrameName2;
            }
            this.nogginBodyImage.anchor.x = .4;
            this.jumpSpeed *= .6;
        };
        Noggin.prototype.enableKick = function () {
            this.kickEnabled = true;
            this.nogginHeadImage.frameName = this.headFrameName;
            this.nogginHeadImage.anchor.set(.3, .425);
            if (this.groundContact) {
                this.nogginBodyImage.frameName = this.nogginBodyImageFrameName1;
            }
            else {
                this.nogginBodyImage.frameName = this.nogginBodyImageFrameName2;
            }
            this.nogginBodyImage.anchor.x = .5;
            var jumpIndex;
            if (this.isPlayer) {
                if (SuperSoccerNoggins.GameVars.ai) {
                    jumpIndex = SuperSoccerNoggins.GameVars.getInstance().playerJumpIndex;
                }
                else {
                    jumpIndex = SuperSoccerNoggins.GameVars.playerJumpIndexPVP;
                }
            }
            else {
                if (SuperSoccerNoggins.GameVars.ai) {
                    jumpIndex = SuperSoccerNoggins.GameVars.getInstance().adversaryJumpIndex;
                }
                else {
                    jumpIndex = SuperSoccerNoggins.GameVars.adversaryJumpIndexPVP;
                }
            }
            this.jumpSpeed = SuperSoccerNoggins.GameConstants.JUMP_VELOCITY[jumpIndex - 1];
            this.addSmoke();
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("smoke");
        };
        Noggin.prototype.setCallBacksWithMovingField = function (movingField) {
            for (var i = 0; i < 5; i++) {
                this.torso.body.setBodyContactCallback(movingField.fieldSlicesHorizontal[i], this.contactWithJumpSurfaces, this);
                this.torso.body.setBodyContactCallback(movingField.fieldSlicesVertical[i], this.contactWithFieldVertical, this);
            }
        };
        Noggin.prototype.setCallbackWithJumpSurfaces = function (body) {
            this.torso.body.setBodyContactCallback(body, this.contactWithJumpSurfaces, this);
        };
        Noggin.prototype.setCallBackWithTheOtherNoggin = function (body) {
            this.torso.body.setBodyContactCallback(body, this.contactWithJumpSurfaces, this);
        };
        Noggin.prototype.contactWithJumpSurfaces = function (body1, body2, fixture1, fixture2, begin, contact) {
            if (begin) {
                this.idFixtureHorizontalContact = contact.GetFixtureA().id;
                this.groundContact = true;
                if (this.kickEnabled) {
                    this.nogginBodyImage.frameName = this.nogginBodyImageFrameName1;
                }
                else {
                    this.nogginBodyImage.frameName = this.nogginFlamencaBodyImageFrameName1;
                }
                this.nogginHeadImage.angle = 0;
                this.headImage_dy = 2;
                if (body2.sprite.name === SuperSoccerNoggins.GameConstants.GOAL_BAR) {
                    this.contactWithGoalBar = true;
                }
            }
            if (!begin && this.idFixtureHorizontalContact === contact.GetFixtureA().id) {
                this.groundContact = false;
                if (body2.sprite.name === SuperSoccerNoggins.GameConstants.GOAL_BAR) {
                    this.contactWithGoalBar = false;
                }
            }
        };
        Noggin.prototype.contactWithFieldVertical = function (body1, body2, fixture1, fixture2, begin, contact) {
            if (!this.game) {
                return;
            }
            var worldManifold = new box2d.b2WorldManifold();
            contact.GetWorldManifold(worldManifold);
            var collisionPoint = worldManifold.points[0].SelfMul(-this.game.physics.box2d.ptmRatio);
            if (begin) {
                this.torso.body.velocity.x = 0;
                this.xSpeed = 0;
                if (collisionPoint.x < this.torso.x) {
                    this.leftSideContact = true;
                }
                else {
                    this.rightSideContact = true;
                }
            }
            if (!begin) {
                this.timeLostVerticalContact = this.game.time.now;
                this.leftSideContact = false;
                this.rightSideContact = false;
            }
        };
        Noggin.prototype.setCallBacksWithBall = function (ball) {
            this.torso.setCallBack(ball);
            this.head.setCallBacks(ball);
            this.foot.setCallBack(ball);
        };
        Noggin.prototype.matchEnded = function () {
            if (this.powerUpTimerEvent) {
                this.powerUpTimerEvent.pendingDelete = true;
            }
            if (SuperSoccerNoggins.GameVars.ai) {
                if (SuperSoccerNoggins.GameVars.getInstance().victory) {
                    if (this.isPlayer) {
                        this.visible = false;
                    }
                    else {
                        this.addSmoke(true);
                    }
                }
            }
            else {
                this.visible = false;
            }
        };
        Noggin.prototype.setHarakiri = function () {
            this.game.time.events.add(SuperSoccerNoggins.GameConstants.TIME_POWER_UP_ACTIVE, function () {
                if (this.isPlayer) {
                    SuperSoccerNoggins.PlayerController.currentInstance.playerTwin = null;
                    if (SuperSoccerNoggins.ShadowsContainer.currentInstance) {
                        SuperSoccerNoggins.ShadowsContainer.currentInstance.removeBodyGuardShadow(true);
                    }
                }
                else {
                    if (SuperSoccerNoggins.GameVars.ai) {
                        SuperSoccerNoggins.AdversaryAI.currentInstance.bodyguard = null;
                        SuperSoccerNoggins.RivalBodyguardAI.currentInstance.bodyguard = null;
                    }
                    else {
                        SuperSoccerNoggins.AdversaryManualController.currentInstance.bodyguard = null;
                    }
                    if (SuperSoccerNoggins.ShadowsContainer.currentInstance) {
                        SuperSoccerNoggins.ShadowsContainer.currentInstance.removeBodyGuardShadow(false);
                    }
                }
                var brother = this.brother;
                brother.brother = null;
                this.addSmoke(true);
            }, this);
        };
        Noggin.prototype.ballHitHeadStart = function (ball) {
            if (!this.groundContact) {
                var isRushing = this.isNogginRushing();
                if (this.isPlayer && ball.x < this.head.x) {
                    this.headImage_dx = isRushing ? -10 : -5;
                }
                if (!this.isPlayer && ball.x > this.head.x) {
                    this.headImage_dx = isRushing ? 10 : 5;
                }
            }
            else if (Math.abs(ball.body.velocity.x) > 50) {
                if (this.isPlayer) {
                    if (ball.x < this.head.x) {
                        this.headImage_dx = 4;
                    }
                    else {
                        this.headImage_dx = -4;
                    }
                }
                else {
                    if (ball.x < this.head.x) {
                        this.headImage_dx = -4;
                    }
                    else {
                        this.headImage_dx = 4;
                    }
                }
            }
        };
        Noggin.prototype.ballHitHeadEnd = function (ball) {
            if (!this.groundContact) {
                var ballBody = ball.body.data;
                var isRushing = this.isNogginRushing();
                var fx = void 0;
                var fy = 0;
                if (this.isPlayer && ball.x < this.head.x && isRushing) {
                    if (SuperSoccerNoggins.GameVars.ai) {
                        fx = SuperSoccerNoggins.GameConstants.HEAD_X_FORCE[SuperSoccerNoggins.GameVars.getInstance().playerJumpIndex - 1];
                    }
                    else {
                        fx = SuperSoccerNoggins.GameConstants.HEAD_X_FORCE[SuperSoccerNoggins.GameVars.playerJumpIndexPVP - 1];
                    }
                    if (!this.kickEnabled) {
                        fx *= .6;
                    }
                    if (Math.random() > (1 - this.precision) * (1 - this.precision)) {
                        fy = fx * .75 * (1 - this.precision);
                    }
                    ball.body.velocity.x *= .2;
                    ballBody.ApplyForce(new box2d.b2Vec2(fx, fy), ballBody.GetWorldCenter());
                }
                if (!this.isPlayer && ball.x > this.head.x && isRushing) {
                    if (SuperSoccerNoggins.GameVars.ai) {
                        fx = -SuperSoccerNoggins.GameConstants.HEAD_X_FORCE[SuperSoccerNoggins.GameVars.getInstance().adversaryJumpIndex - 1];
                    }
                    else {
                        fx = -SuperSoccerNoggins.GameConstants.HEAD_X_FORCE[SuperSoccerNoggins.GameVars.adversaryJumpIndexPVP - 1];
                    }
                    if (!this.kickEnabled) {
                        fx *= .6;
                    }
                    if (Math.random() > (1 - this.precision) * (1 - this.precision)) {
                        fy = -fx * .5 * (1 - this.precision);
                    }
                    ball.body.velocity.x *= .2;
                    ballBody.ApplyForce(new box2d.b2Vec2(fx, fy), ballBody.GetWorldCenter());
                }
            }
            if (this.isPlayer) {
                SuperSoccerNoggins.AdversaryAI.currentInstance.ballJustChangedDirection(ball);
            }
        };
        Noggin.prototype.setAbilities = function (hasVickingHelm) {
            var jumpIndex;
            var rushIndex;
            var backtrackIndex;
            var kickIndex;
            var sign = this.isPlayer ? 1 : -1;
            if (hasVickingHelm) {
                jumpIndex = 5;
                rushIndex = 5;
                if (this.isPlayer) {
                    if (SuperSoccerNoggins.GameVars.ai) {
                        backtrackIndex = SuperSoccerNoggins.GameVars.getInstance().playerBacktrackIndex < 3 ? 3 : SuperSoccerNoggins.GameVars.getInstance().playerBacktrackIndex;
                    }
                    else {
                        backtrackIndex = SuperSoccerNoggins.GameVars.playerBacktrackIndexPVP < 3 ? 3 : SuperSoccerNoggins.GameVars.playerBacktrackIndexPVP;
                    }
                }
                else {
                    if (SuperSoccerNoggins.GameVars.ai) {
                        backtrackIndex = SuperSoccerNoggins.GameVars.getInstance().adversaryBacktrackIndex < 3 ? 3 : SuperSoccerNoggins.GameVars.getInstance().adversaryBacktrackIndex;
                    }
                    else {
                        backtrackIndex = SuperSoccerNoggins.GameVars.adversaryBacktrackIndexPVP < 3 ? 3 : SuperSoccerNoggins.GameVars.adversaryBacktrackIndexPVP;
                    }
                }
                if (SuperSoccerNoggins.GameVars.ai) {
                    kickIndex = this.isPlayer ? SuperSoccerNoggins.GameVars.getInstance().playerKickIndex : SuperSoccerNoggins.GameVars.getInstance().adversaryKickIndex;
                }
                else {
                    kickIndex = this.isPlayer ? SuperSoccerNoggins.GameVars.playerKickIndexPVP : SuperSoccerNoggins.GameVars.adversaryKickIndexPVP;
                }
            }
            else if (this.isPlayer) {
                if (SuperSoccerNoggins.GameVars.ai) {
                    jumpIndex = SuperSoccerNoggins.GameVars.getInstance().playerJumpIndex;
                    rushIndex = SuperSoccerNoggins.GameVars.getInstance().playerRushIndex;
                    backtrackIndex = SuperSoccerNoggins.GameVars.getInstance().playerBacktrackIndex;
                    kickIndex = SuperSoccerNoggins.GameVars.getInstance().playerKickIndex;
                }
                else {
                    jumpIndex = SuperSoccerNoggins.GameVars.playerJumpIndexPVP;
                    rushIndex = SuperSoccerNoggins.GameVars.playerRushIndexPVP;
                    backtrackIndex = SuperSoccerNoggins.GameVars.playerBacktrackIndexPVP;
                    kickIndex = SuperSoccerNoggins.GameVars.playerKickIndexPVP;
                }
            }
            else {
                if (SuperSoccerNoggins.GameVars.ai) {
                    jumpIndex = SuperSoccerNoggins.GameVars.getInstance().adversaryJumpIndex;
                    rushIndex = SuperSoccerNoggins.GameVars.getInstance().adversaryRushIndex;
                    backtrackIndex = SuperSoccerNoggins.GameVars.getInstance().adversaryBacktrackIndex;
                    kickIndex = SuperSoccerNoggins.GameVars.getInstance().adversaryKickIndex;
                    this.precision = SuperSoccerNoggins.GameVars.getInstance().adversaryPrecision;
                }
                else {
                    jumpIndex = SuperSoccerNoggins.GameVars.adversaryJumpIndexPVP;
                    rushIndex = SuperSoccerNoggins.GameVars.adversaryRushIndexPVP;
                    backtrackIndex = SuperSoccerNoggins.GameVars.adversaryBacktrackIndexPVP;
                    kickIndex = SuperSoccerNoggins.GameVars.adversaryKickIndexPVP;
                    this.precision = SuperSoccerNoggins.GameVars.adversaryPrecisionPVP;
                }
            }
            this.jumpSpeed = SuperSoccerNoggins.GameConstants.JUMP_VELOCITY[jumpIndex - 1];
            this.torso.body.data.SetGravityScale(SuperSoccerNoggins.GameConstants.JUMP_GRAVITY_SCALE[jumpIndex - 1]);
            this.torso.body.mass = SuperSoccerNoggins.GameConstants.TORSO_MASS[jumpIndex - 1];
            this.head.body.data.SetGravityScale(SuperSoccerNoggins.GameConstants.JUMP_GRAVITY_SCALE[jumpIndex - 1]);
            this.head.body.mass = SuperSoccerNoggins.GameConstants.HEAD_MASS[jumpIndex - 1];
            this.rushSpeed = -sign * SuperSoccerNoggins.GameConstants.RUSH_VELOCITY[rushIndex - 1];
            this.rushSpeedWater = -sign * SuperSoccerNoggins.GameConstants.RUSH_VELOCITY_WATER[rushIndex - 1];
            this.backtrackSpeed = sign * SuperSoccerNoggins.GameConstants.BACKTRACK_VELOCITY[backtrackIndex - 1];
            this.backtrackSpeedWater = sign * SuperSoccerNoggins.GameConstants.BACKTRACK_VELOCITY_WATER[backtrackIndex - 1];
            this.kickForce = SuperSoccerNoggins.GameConstants.KICK_X_FORCE[kickIndex - 1];
            if (SuperSoccerNoggins.GameVars.getInstance().matchID === 0 && !this.isPlayer) {
                this.rushSpeed *= .8;
                this.backtrackSpeed *= .8;
                this.kickForce *= .8;
            }
            if (rushIndex === 5 && backtrackIndex === 5) {
                this.framesAngleOscillation = 3;
            }
            else if (rushIndex > 2 && backtrackIndex > 2) {
                this.framesAngleOscillation = 4;
            }
            else {
                this.framesAngleOscillation = 5;
            }
        };
        Noggin.prototype.shrinkHead = function () {
            this.isHeadBig = false;
            this.head.shrink();
            var headScale_x;
            if (this.isPlayer) {
                headScale_x = 1 / SuperSoccerNoggins.Head.BIG_HEAD_SCALE_FACTOR;
            }
            else {
                headScale_x = -1 / SuperSoccerNoggins.Head.BIG_HEAD_SCALE_FACTOR;
            }
            this.game.add.tween(this.nogginHeadImage.scale)
                .to({ x: headScale_x, y: 1 / SuperSoccerNoggins.Head.BIG_HEAD_SCALE_FACTOR }, 600, Phaser.Easing.Elastic.Out, true);
            this.headWeldJoint.m_localAnchorA.y = 0;
            this.nogginHeadImage.anchor.set(.3, .425);
        };
        Noggin.prototype.hideFoot = function () {
            this.nogginBodyImage.frameName = this.nogginBodyImageFrameName1;
            this.foot.hide();
        };
        Noggin.prototype.setImageNames = function () {
            var teamID;
            if (SuperSoccerNoggins.GameVars.ai) {
                teamID = this.isPlayer ? SuperSoccerNoggins.GameVars.getInstance().playerTeamID : SuperSoccerNoggins.GameVars.getInstance().adversaryTeamID;
            }
            else {
                teamID = this.isPlayer ? SuperSoccerNoggins.GameVars.playerTeamIDPVP : SuperSoccerNoggins.GameVars.adversaryTeamIDPVP;
            }
            if (this.isBodyGuard) {
                if (SuperSoccerNoggins.GameVars.getInstance().christmasVersion) {
                    if (this.isPlayer) {
                        this.headFrameName = "xmas_elf_head.png";
                    }
                    else {
                        this.headFrameName = "xmas_grinch_head.png";
                    }
                }
                else {
                    if (this.isPlayer) {
                        this.headFrameName = "bodyguard_head_1.png";
                    }
                    else {
                        this.headFrameName = "bodyguard_head_2.png";
                    }
                }
            }
            else {
                this.headFrameName = teamID + 1 < 10 ? "head_000" + (teamID + 1) + ".png" : "head_00" + (teamID + 1) + ".png";
                if (SuperSoccerNoggins.GameVars.getInstance().christmasVersion) {
                    this.headFlamencaFrameName = teamID + 1 < 10 ? "xmas_head_flamenca_000" + (teamID + 1) + ".png" : "xmas_head_flamenca_00" + (teamID + 1) + ".png";
                    this.headWithHelmFrameName = teamID + 1 < 10 ? "xmas_head_viking_000" + (teamID + 1) + ".png" : "xmas_head_viking_00" + (teamID + 1) + ".png";
                }
                else {
                    this.headFlamencaFrameName = teamID + 1 < 10 ? "head_flamenca_000" + (teamID + 1) + ".png" : "head_flamenca_00" + (teamID + 1) + ".png";
                    this.headWithHelmFrameName = teamID + 1 < 10 ? "head_viking_000" + (teamID + 1) + ".png" : "head_viking_00" + (teamID + 1) + ".png";
                }
            }
            this.headJetPackFrameName = teamID + 1 < 10 ? "head_jetpk_000" + (teamID + 1) + ".png" : "head_jetpk_00" + (teamID + 1) + ".png";
            if (this.isBodyGuard) {
                if (SuperSoccerNoggins.GameVars.getInstance().christmasVersion) {
                    if (this.isPlayer) {
                        this.nogginBodyImageFrameName1 = "xmas_elf_body_01.png";
                        this.nogginBodyImageFrameName2 = "xmas_elf_body_02.png";
                        this.nogginBodyImageFrameName3 = "xmas_elf_body_03.png";
                    }
                    else {
                        this.nogginBodyImageFrameName1 = "xmas_grinch_body_01.png";
                        this.nogginBodyImageFrameName2 = "xmas_grinch_body_02.png";
                        this.nogginBodyImageFrameName3 = "xmas_grinch_body_03.png";
                    }
                }
                else {
                    this.nogginBodyImageFrameName1 = "bodyguard_body_01.png";
                    this.nogginBodyImageFrameName2 = "bodyguard_body_02.png";
                    this.nogginBodyImageFrameName3 = "bodyguard_body_03.png";
                }
            }
            else {
                this.nogginBodyImageFrameName1 = teamID + 1 < 10 ? "body_01_000" + (teamID + 1) + ".png" : "body_01_00" + (teamID + 1) + ".png";
                this.nogginBodyImageFrameName2 = teamID + 1 < 10 ? "body_02_000" + (teamID + 1) + ".png" : "body_02_00" + (teamID + 1) + ".png";
                this.nogginBodyImageFrameName3 = teamID + 1 < 10 ? "body_03_000" + (teamID + 1) + ".png" : "body_03_00" + (teamID + 1) + ".png";
                var race = SuperSoccerNoggins.GameVars.getInstance().teamsData[teamID].race;
                var bodyFlamencaStr = SuperSoccerNoggins.GameVars.getInstance().christmasVersion ? "xmas_body_flamenca_" : "body_flamenca_";
                this.nogginFlamencaBodyImageFrameName1 = bodyFlamencaStr + race + "_0001.png";
                this.nogginFlamencaBodyImageFrameName2 = bodyFlamencaStr + race + "_0002.png";
                this.nogginFlamencaBodyImageFrameName3 = bodyFlamencaStr + race + "_0003.png";
            }
        };
        Noggin.prototype.addBodyImage = function () {
            this.nogginBodyImage = new Phaser.Image(this.game, 0, 0, "texture_atlas_1", this.nogginBodyImageFrameName1);
            this.nogginBodyImage.anchor.x = .5;
            this.nogginBodyImage.scale.x = this.isPlayer ? 1 : -1;
            this.nogginBodyImage.angle = -3;
            this.add(this.nogginBodyImage);
        };
        Noggin.prototype.addBody = function () {
            this.torso = new SuperSoccerNoggins.Torso(this.game, this);
            this.add(this.torso);
        };
        Noggin.prototype.addHeadImage = function () {
            this.nogginHeadImage = new Phaser.Image(this.game, this.initialX, this.initialY, "texture_atlas_1", this.headFrameName);
            if (this.isPlayer) {
                this.nogginHeadImage.scale.set(1 / SuperSoccerNoggins.Head.BIG_HEAD_SCALE_FACTOR);
            }
            else {
                this.nogginHeadImage.scale.set(-1 / SuperSoccerNoggins.Head.BIG_HEAD_SCALE_FACTOR, 1 / SuperSoccerNoggins.Head.BIG_HEAD_SCALE_FACTOR);
            }
            this.nogginHeadImage.anchor.set(.3, .425);
            this.add(this.nogginHeadImage);
        };
        Noggin.prototype.addHead = function () {
            this.head = new SuperSoccerNoggins.Head(this.game, this);
            this.add(this.head);
            this.headWeldJoint = this.game.physics.box2d.weldJoint(this.head.body, this.torso.body, 0, 0, 0, 0);
        };
        Noggin.prototype.addFoot = function () {
            this.foot = new SuperSoccerNoggins.Foot(this.game, this);
            this.foot.body.angle = this.lowerLimitAngle;
            this.addAt(this.foot, 1);
            var motorTorque = 25;
            if (this.isPlayer) {
                this.footRevoluteJoint = this.game.physics.box2d.revoluteJoint(this.torso.body, this.foot.body, 0, 0, 0, -SuperSoccerNoggins.GameConstants.FOOT_RADIUS, 0, motorTorque, true, this.lowerLimitAngle, this.upperLimitAngle, true);
            }
            else {
                this.footRevoluteJoint = this.game.physics.box2d.revoluteJoint(this.torso.body, this.foot.body, 0, 0, 0, -SuperSoccerNoggins.GameConstants.FOOT_RADIUS, 0, motorTorque, true, this.upperLimitAngle, this.lowerLimitAngle, true);
            }
        };
        Noggin.prototype.doubleCheckGroundContact = function () {
            for (var i = 0; i < SuperSoccerNoggins.GameConstants.HARDCODED_TERRAINS_PY.length; i++) {
                if (Phaser.Math.fuzzyEqual(this.torso.y, SuperSoccerNoggins.GameConstants.HARDCODED_TERRAINS_PY[i], .2)
                    && Phaser.Math.fuzzyEqual(this.torso.body.velocity.y, 0, 1)) {
                    this.groundContact = true;
                    break;
                }
            }
        };
        Noggin.prototype.isNogginRushing = function () {
            var r = this.torso.body.velocity.x / this.rushSpeed;
            return r > .5;
        };
        Noggin.prototype.addSmoke = function (destroy) {
            if (this.smoke === null) {
                this.smoke = this.create(this.torso.x, this.torso.y, "texture_atlas_1", "smoke_0001.png");
                this.smoke.anchor.set(.5);
                this.smoke.animations.add("explode", Phaser.Animation.generateFrameNames("smoke_", 1, 5, ".png", 4), 8, true);
            }
            else {
                this.smoke.reset(this.torso.x, this.torso.y);
            }
            this.smoke.animations.play("explode", 20, false)
                .onComplete.add(function () {
                this.smoke.kill();
                if (destroy) {
                    this.game.time.events.add(150, this.destroy, this);
                }
            }, this);
        };
        return Noggin;
    }(Phaser.Group));
    Noggin.WATER_LIMIT = 28;
    SuperSoccerNoggins.Noggin = Noggin;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var Adversary = (function (_super) {
        __extends(Adversary, _super);
        function Adversary(game, isTwin) {
            var _this = _super.call(this, game, false, isTwin) || this;
            if (!isTwin) {
                Adversary.currentInstance = _this;
            }
            _this.addAISensors();
            return _this;
        }
        Adversary.prototype.update = function () {
            _super.prototype.update.call(this);
            this.frontSensor.body.x = this.torso.body.x;
            this.frontSensor.body.y = this.torso.body.y;
            this.rearSensor.body.x = this.torso.body.x;
            this.rearSensor.body.y = this.torso.body.y;
            this.jumpSensorBallLowSpeed.body.x = this.torso.body.x;
            this.jumpSensorBallLowSpeed.body.y = this.torso.body.y;
            this.jumpSensorBallHighSpeed.body.x = this.torso.body.x;
            this.jumpSensorBallHighSpeed.body.y = this.torso.body.y;
        };
        Adversary.prototype.addJetpack = function () {
            _super.prototype.addJetpack.call(this);
            var fixture = this.jumpSensorBallLowSpeed.body.data.GetFixtureList();
            var polygonShape = fixture.GetShape();
            var newLowSpeedArray = [new box2d.b2Vec2(0, -10),
                new box2d.b2Vec2(-15 - 40, -110 - 125),
                new box2d.b2Vec2(25 + 20, -90 - 100),
                new box2d.b2Vec2(30 + 20, -60 - 75),
                new box2d.b2Vec2(5 + 30, -35 - 15),
                new box2d.b2Vec2(0, 0),
                new box2d.b2Vec2(0, 0),
                new box2d.b2Vec2(0, 0)
            ];
            for (var i = 0; i < newLowSpeedArray.length; i++) {
                newLowSpeedArray[i].x = -newLowSpeedArray[i].x / this.game.physics.box2d.ptmRatio;
                newLowSpeedArray[i].y = -newLowSpeedArray[i].y / this.game.physics.box2d.ptmRatio;
            }
            polygonShape.m_vertices = newLowSpeedArray;
            fixture = this.jumpSensorBallHighSpeed.body.data.GetFixtureList();
            polygonShape = fixture.GetShape();
            newLowSpeedArray = [new box2d.b2Vec2(0, -10),
                new box2d.b2Vec2(-15 - 50, -115 - 150),
                new box2d.b2Vec2(45 + 30, -90 - 125),
                new box2d.b2Vec2(55 + 30, -60 - 75),
                new box2d.b2Vec2(45 + 30, -40 - 20),
                new box2d.b2Vec2(0, 0),
                new box2d.b2Vec2(0, 0),
                new box2d.b2Vec2(0, 0)
            ];
            for (var i = 0; i < newLowSpeedArray.length; i++) {
                newLowSpeedArray[i].x = -newLowSpeedArray[i].x / this.game.physics.box2d.ptmRatio;
                newLowSpeedArray[i].y = -newLowSpeedArray[i].y / this.game.physics.box2d.ptmRatio;
            }
            polygonShape.m_vertices = newLowSpeedArray;
        };
        Adversary.prototype.removeJetpack = function () {
            _super.prototype.removeJetpack.call(this);
            var fixture = this.jumpSensorBallLowSpeed.body.data.GetFixtureList();
            var polygonShape = fixture.GetShape();
            var sensorPointsArrays = this.getJumpSensorPointsArrays();
            var pointsLowSpeedSensor = sensorPointsArrays[0];
            var pointsHighSpeedSensor = sensorPointsArrays[1];
            var pointsArray = [new box2d.b2Vec2(pointsLowSpeedSensor[0], pointsLowSpeedSensor[1]),
                new box2d.b2Vec2(pointsLowSpeedSensor[2], pointsLowSpeedSensor[3]),
                new box2d.b2Vec2(pointsLowSpeedSensor[4], pointsLowSpeedSensor[5]),
                new box2d.b2Vec2(pointsLowSpeedSensor[6], pointsLowSpeedSensor[7]),
                new box2d.b2Vec2(0, 0),
                new box2d.b2Vec2(0, 0),
                new box2d.b2Vec2(0, 0),
                new box2d.b2Vec2(0, 0)
            ];
            for (var i = 0; i < pointsArray.length; i++) {
                pointsArray[i].x = -pointsArray[i].x / this.game.physics.box2d.ptmRatio;
                pointsArray[i].y = -pointsArray[i].y / this.game.physics.box2d.ptmRatio;
            }
            polygonShape.m_vertices = pointsArray;
            fixture = this.jumpSensorBallHighSpeed.body.data.GetFixtureList();
            polygonShape = fixture.GetShape();
            pointsArray = [new box2d.b2Vec2(pointsHighSpeedSensor[0], pointsHighSpeedSensor[1]),
                new box2d.b2Vec2(pointsHighSpeedSensor[2], pointsHighSpeedSensor[3]),
                new box2d.b2Vec2(pointsHighSpeedSensor[4], pointsHighSpeedSensor[5]),
                new box2d.b2Vec2(pointsHighSpeedSensor[6], pointsHighSpeedSensor[7]),
                new box2d.b2Vec2(0, 0),
                new box2d.b2Vec2(0, 0),
                new box2d.b2Vec2(0, 0),
                new box2d.b2Vec2(0, 0)
            ];
            for (var i_1 = 0; i_1 < pointsArray.length; i_1++) {
                pointsArray[i_1].x = -pointsArray[i_1].x / this.game.physics.box2d.ptmRatio;
                pointsArray[i_1].y = -pointsArray[i_1].y / this.game.physics.box2d.ptmRatio;
            }
            polygonShape.m_vertices = pointsArray;
        };
        Adversary.prototype.addAISensors = function () {
            this.frontSensor = new Phaser.Sprite(this.game, 0, Adversary.KICK_SENSOR_PY, null);
            this.frontSensor.visible = false;
            this.game.physics.box2d.enable(this.frontSensor);
            var body = this.frontSensor.body;
            var fixture = body.setCircle(16, 24, 18);
            body.sensor = true;
            body.kinematic = true;
            var filter = fixture.GetFilterData();
            filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_ADVERSARY_TORSO;
            fixture.SetFilterData(filter);
            this.addChild(this.frontSensor);
            this.rearSensor = new Phaser.Sprite(this.game, 0, 0, null);
            this.rearSensor.visible = false;
            this.game.physics.box2d.enable(this.rearSensor);
            body = this.rearSensor.body;
            if (this.isBodyGuard) {
                fixture = body.setCircle(32, -28, 18);
            }
            else {
                fixture = body.setCircle(16, -28, 18);
            }
            body.sensor = true;
            body.kinematic = true;
            filter = fixture.GetFilterData();
            filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_ADVERSARY_TORSO;
            fixture.SetFilterData(filter);
            this.addChild(this.rearSensor);
            this.jumpSensorBallLowSpeed = new Phaser.Sprite(this.game, 0, 0, null);
            this.jumpSensorBallLowSpeed.visible = false;
            this.game.physics.box2d.enable(this.jumpSensorBallLowSpeed);
            var sensorPointsArrays = this.getJumpSensorPointsArrays();
            var pointsLowSpeedSensor = sensorPointsArrays[0];
            var pointsHighSpeedSensor = sensorPointsArrays[1];
            fixture = this.jumpSensorBallLowSpeed.body.setPolygon(pointsLowSpeedSensor);
            this.jumpSensorBallLowSpeed.body.sensor = true;
            this.jumpSensorBallLowSpeed.body.kinematic = true;
            filter = fixture.GetFilterData();
            filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_ADVERSARY_HEAD;
            fixture.SetFilterData(filter);
            this.addChild(this.jumpSensorBallLowSpeed);
            this.jumpSensorBallHighSpeed = new Phaser.Sprite(this.game, 0, 0, null);
            this.jumpSensorBallHighSpeed.visible = false;
            this.game.physics.box2d.enable(this.jumpSensorBallHighSpeed);
            fixture = this.jumpSensorBallHighSpeed.body.setPolygon(pointsHighSpeedSensor);
            this.jumpSensorBallHighSpeed.body.sensor = true;
            this.jumpSensorBallHighSpeed.body.kinematic = true;
            filter = fixture.GetFilterData();
            filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_ADVERSARY_HEAD;
            fixture.SetFilterData(filter);
            this.addChild(this.jumpSensorBallHighSpeed);
        };
        Adversary.prototype.getJumpSensorPointsArrays = function () {
            var aiData = SuperSoccerNoggins.GameVars.getInstance().aiData;
            var pointsLowSpeedSensor;
            var pointsHighSpeedSensor;
            var adversaryJumpIndex;
            if (SuperSoccerNoggins.GameVars.ai) {
                adversaryJumpIndex = SuperSoccerNoggins.GameVars.getInstance().adversaryJumpIndex;
            }
            else {
                adversaryJumpIndex = SuperSoccerNoggins.GameVars.adversaryJumpIndexPVP;
            }
            switch (adversaryJumpIndex) {
                case 1:
                    pointsLowSpeedSensor = aiData.jumpSensorLowSpeedCoordinates1;
                    pointsHighSpeedSensor = aiData.jumpSensorHighSpeedCoordinates1;
                    break;
                case 2:
                    pointsLowSpeedSensor = aiData.jumpSensorLowSpeedCoordinates2;
                    pointsHighSpeedSensor = aiData.jumpSensorHighSpeedCoordinates2;
                    break;
                case 3:
                    pointsLowSpeedSensor = aiData.jumpSensorLowSpeedCoordinates3;
                    pointsHighSpeedSensor = aiData.jumpSensorHighSpeedCoordinates3;
                    break;
                case 4:
                    pointsLowSpeedSensor = aiData.jumpSensorLowSpeedCoordinates4;
                    pointsHighSpeedSensor = aiData.jumpSensorHighSpeedCoordinates4;
                    break;
                case 5:
                    pointsLowSpeedSensor = aiData.jumpSensorLowSpeedCoordinates5;
                    pointsHighSpeedSensor = aiData.jumpSensorHighSpeedCoordinates5;
                    break;
                default:
                    break;
            }
            return [pointsLowSpeedSensor, pointsHighSpeedSensor];
        };
        return Adversary;
    }(SuperSoccerNoggins.Noggin));
    Adversary.KICK_SENSOR_PY = 15;
    SuperSoccerNoggins.Adversary = Adversary;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var AdversaryAI = (function () {
        function AdversaryAI(game) {
            AdversaryAI.currentInstance = this;
            this.game = game;
            this.timers = [];
            this.justKicked = false;
            this.jumpSensorActivated = false;
            this.timeNogginJumped = 0;
            this.contactWithKickSensor = false;
            this.forceBacktrack = false;
            this.cancelBacktrackDistance = 0;
            this.contactWithRivalFront = false;
            this.deactivated = false;
            this.rushDisabled = false;
            this.jumpDisabled = false;
            this.stayStill = false;
            this.settingStayStill = false;
            this.framesPlayerMovingToTheRightOrStill = 0;
            this.framesPlayerMovingToTheLeft = 0;
            if (SuperSoccerNoggins.GameVars.getInstance().water
                || SuperSoccerNoggins.GameVars.getInstance().terrain === SuperSoccerNoggins.GameConstants.TERRAIN_MOVING_SLICES_2
                || SuperSoccerNoggins.GameVars.getInstance().terrain === SuperSoccerNoggins.GameConstants.TERRAIN_MOVING_SLICES_3) {
                this.levelToBePlayedDefensively = true;
                this.playDefensively = true;
            }
            else {
                this.levelToBePlayedDefensively = false;
                this.playDefensively = false;
            }
            if (SuperSoccerNoggins.GameVars.getInstance().matchID < 2) {
                this.game.time.events.loop(1300, function () {
                    this.rushDisabled = !this.rushDisabled;
                }, this);
            }
            if (SuperSoccerNoggins.GameVars.getInstance().matchID < 2) {
                this.game.time.events.loop(3000, function () {
                    this.jumpDisabled = !this.jumpDisabled;
                }, this);
            }
        }
        AdversaryAI.prototype.update = function () {
            if (SuperSoccerNoggins.GameVars.paused || this.deactivated || !SuperSoccerNoggins.BallsManager.currentInstance.ball) {
                return;
            }
            if (this.player.torso.body.velocity.x > -1) {
                this.framesPlayerMovingToTheRightOrStill++;
                this.framesPlayerMovingToTheLeft = 0;
            }
            else {
                this.framesPlayerMovingToTheRightOrStill = 0;
                this.framesPlayerMovingToTheLeft++;
            }
            if (this.contactWithKickSensor) {
                if (this.adversary.kickEnabled) {
                    this.kick();
                }
                else {
                    this.rush();
                }
            }
            if (this.jumpSensorActivated && !this.justKicked) {
                this.jump(false);
            }
            var ball = SuperSoccerNoggins.BallsManager.currentInstance.ball;
            if (ball.isWeldedToHelm && this.adversary.hasHelm && !this.adversary.contactWithGoalBar) {
                this.rush();
                return;
            }
            if (this.forceBacktrack) {
                this.backtrack();
                if ((ball.x < this.adversary.torso.x + 65 && ball.y > this.adversary.torso.y)
                    || this.adversary.torso.x < this.cancelBacktrackDistance
                    || Math.abs(ball.body.velocity.x) < 50) {
                    this.forceBacktrack = false;
                }
                return;
            }
            if (this.playDefensively) {
                this.updateDefensive();
            }
            else {
                this.updateStandard();
            }
        };
        AdversaryAI.prototype.updateStandard = function () {
            var ball = SuperSoccerNoggins.BallsManager.currentInstance.ball;
            if (ball.x < this.adversary.torso.x + 20 && this.adversary.torso.x > 75 && ball.x < this.oppRightCap && !this.contactWithRivalRear
                || this.adversary.contactWithGoalBar) {
                this.backtrack();
                if (this.adversary.hasJetpack && SuperSoccerNoggins.GameVars.getInstance().terrain !== SuperSoccerNoggins.GameConstants.TERRAIN_FLAT && this.adversary.torso.y - ball.y > 75) {
                    this.jump(true);
                    this.game.time.events.add(150, function () {
                        this.jump(true);
                    }, this);
                }
            }
            if (ball.x > this.adversary.torso.x + 5 && ball.x < this.oppRightCap && !this.contactWithRivalFront) {
                this.rush();
            }
        };
        AdversaryAI.prototype.updateDefensive = function () {
            var ball = SuperSoccerNoggins.BallsManager.currentInstance.ball;
            if (ball.x < this.adversary.torso.x + 20 && this.adversary.torso.x > 75 && ball.x < this.oppRightCap && !this.contactWithRivalRear
                || this.adversary.contactWithGoalBar) {
                this.backtrack();
            }
            if (this.player.torso.x > SuperSoccerNoggins.GameConstants.GAME_WIDTH * .65
                && ball.x > SuperSoccerNoggins.GameConstants.GAME_WIDTH * .55
                && this.framesPlayerMovingToTheRightOrStill > 25
                && (ball.x - this.adversary.torso.x) > 85) {
                this.setStayStill(true);
                if (this.adversary.torso.x > SuperSoccerNoggins.GameConstants.GAME_WIDTH * .4 && (ball.x - this.adversary.torso.x) > 225) {
                    this.forceBacktrack = true;
                    this.cancelBacktrackDistance = 30 - 10 * Math.random();
                }
            }
            else if (this.framesPlayerMovingToTheLeft > 25 || ball.x < SuperSoccerNoggins.GameConstants.GAME_WIDTH * .45 || (ball.x - this.adversary.torso.x) < 85) {
                this.setStayStill(false);
            }
            if (ball.x > this.adversary.torso.x + 5 && ball.x < this.oppRightCap && !this.contactWithRivalFront && !this.stayStill) {
                this.rush();
            }
            if (this.adversary.hasJetpack && this.adversary.torso.y - ball.y > 75 && !this.stayStill) {
                this.jump(true);
                this.game.time.events.add(150, function () {
                    this.jump(true);
                }, this);
            }
        };
        AdversaryAI.prototype.reset = function () {
            this.setCapTimers();
        };
        AdversaryAI.prototype.setCallBacksWithBall = function (ball) {
            this.adversary.frontSensor.body.setBodyContactCallback(ball.body, this.onContactFrontSensor, this);
            this.adversary.rearSensor.body.setBodyContactCallback(ball.body, this.onContactRearSensor, this);
            this.adversary.jumpSensorBallLowSpeed.body.setBodyContactCallback(ball.body, this.onContactJumpSensorLowSpeed, this);
            this.adversary.jumpSensorBallHighSpeed.body.setBodyContactCallback(ball.body, this.onContactJumpSensorHighSpeed, this);
        };
        AdversaryAI.prototype.setCallBacksWithPlayer = function (player) {
            this.player = player;
            this.adversary.torso.body.setBodyContactCallback(this.player.torso.body, this.onContactWithNogginTorso, this);
        };
        AdversaryAI.prototype.ballJustChangedDirection = function (ball) {
            if (ball.body.velocity.x < -100 && SuperSoccerNoggins.GameVars.getInstance().matchID > 4) {
                this.forceBacktrack = true;
                if (ball.body.velocity.x < -350) {
                    this.cancelBacktrackDistance = 125 + 10 - 20 * Math.random();
                }
                else {
                    this.cancelBacktrackDistance = 175 + 10 - 20 * Math.random();
                }
            }
        };
        AdversaryAI.prototype.onGoal = function () {
            if (SuperSoccerNoggins.GameVars.getInstance().adversaryGoals - SuperSoccerNoggins.GameVars.getInstance().playerGoals > 1) {
                if (this.levelToBePlayedDefensively) {
                    this.playDefensively = false;
                }
            }
            else {
                if (this.levelToBePlayedDefensively) {
                    this.playDefensively = true;
                }
            }
        };
        AdversaryAI.prototype.onGoalSizeChanged = function (ballSender, isGood, isBigger) {
            var isPlayerGoal;
            if (ballSender === SuperSoccerNoggins.GameConstants.PLAYER) {
                if (isGood) {
                    isPlayerGoal = isBigger ? false : true;
                }
                else {
                    isPlayerGoal = isBigger ? true : false;
                }
            }
            else {
                if (isGood) {
                    isPlayerGoal = isBigger ? true : false;
                }
                else {
                    isPlayerGoal = isBigger ? false : true;
                }
            }
            if (isPlayerGoal) {
                if (isBigger) {
                    if (this.levelToBePlayedDefensively) {
                        this.playDefensively = false;
                    }
                }
                else {
                    if (this.levelToBePlayedDefensively) {
                        this.playDefensively = true;
                    }
                }
            }
            else {
                if (isBigger) {
                    if (this.levelToBePlayedDefensively) {
                        this.playDefensively = true;
                    }
                }
                else {
                    if (this.levelToBePlayedDefensively) {
                        this.playDefensively = false;
                    }
                }
            }
        };
        AdversaryAI.prototype.rush = function () {
            if (this.rushDisabled) {
                return;
            }
            this.adversary.rush();
            if (this.bodyguard) {
                this.bodyguard.backtrack();
            }
            if (this.adversary.rightSideContact) {
                this.jump(false);
            }
        };
        AdversaryAI.prototype.backtrack = function () {
            this.adversary.backtrack();
            if (this.bodyguard) {
                this.bodyguard.rush();
            }
            if (this.adversary.leftSideContact) {
                this.jump(false);
            }
        };
        AdversaryAI.prototype.kick = function () {
            if (!SuperSoccerNoggins.GameVars.ai || this.justKicked) {
                return;
            }
            this.justKicked = true;
            var t;
            if (SuperSoccerNoggins.GameVars.getInstance().matchID < 2) {
                if (Math.random() > .6) {
                    this.adversary.kick();
                    t = 300 + 250 * Math.random();
                }
                else {
                    this.jump(true);
                    t = 450 + 300 * Math.random();
                }
            }
            else {
                this.adversary.kick();
                if (this.bodyguard) {
                    this.bodyguard.kick();
                }
                t = 350;
            }
            this.game.time.events.add(t, function () {
                this.justKicked = false;
            }, this);
        };
        AdversaryAI.prototype.jump = function (forced) {
            var ball = SuperSoccerNoggins.BallsManager.currentInstance.ball;
            if (!SuperSoccerNoggins.GameVars.ai
                || this.game.time.now - this.timeNogginJumped < 250
                || this.adversary.torso.x > SuperSoccerNoggins.GameConstants.GAME_WIDTH - SuperSoccerNoggins.GameConstants.DELTA_X_GOAL
                || this.adversary.torso.x < SuperSoccerNoggins.GameConstants.DELTA_X_GOAL
                || ((ball.body.velocity.x > 0 && ball.y > this.adversary.torso.y - 45) && !(this.contactWithRivalFront || this.contactWithRivalRear))
                || ((this.adversary.torso.x > SuperSoccerNoggins.GameConstants.GAME_WIDTH - 100) && (ball.isWeldedToHelm && this.adversary.hasHelm)
                    || (!forced && this.jumpDisabled))) {
                return;
            }
            var jumped = this.adversary.jump();
            if (jumped) {
                this.timeNogginJumped = this.game.time.now;
                if (this.bodyguard) {
                    this.bodyguard.jump();
                }
            }
        };
        AdversaryAI.prototype.onContactFrontSensor = function (body1, body2, fixture1, fixture2, begin, contact) {
            if (!body2.sprite) {
                return;
            }
            if (begin) {
                this.contactWithKickSensor = true;
            }
            else {
                this.contactWithKickSensor = false;
            }
        };
        AdversaryAI.prototype.onContactRearSensor = function (body1, body2, fixture1, fixture2, begin, contact) {
            var ball = body2.sprite;
            if (!ball) {
                return;
            }
            if (begin) {
                this.jumpSensorActivated = true;
            }
            else {
                this.jumpSensorActivated = false;
            }
        };
        AdversaryAI.prototype.onContactWithNogginTorso = function (body1, body2, fixture1, fixture2, begin, contact) {
            if (begin) {
                this.contactWithRivalFront = body2.x > body1.x ? true : false;
                this.contactWithRivalRear = body2.x > body1.x ? false : true;
                this.jumpSensorActivated = true;
            }
            else {
                this.game.time.events.add(50, function () {
                    this.contactWithRivalFront = false;
                    this.contactWithRivalRear = false;
                    this.jumpSensorActivated = false;
                }, this);
            }
        };
        AdversaryAI.prototype.onContactJumpSensorLowSpeed = function (body1, body2, fixture1, fixture2, begin) {
            if (begin) {
                this.jumpSensorActivated = true;
            }
            else {
                this.jumpSensorActivated = false;
            }
        };
        AdversaryAI.prototype.onContactJumpSensorHighSpeed = function (body1, body2, fixture1, fixture2, begin) {
            if (begin) {
                var ball = body2.sprite;
                var v = Phaser.Math.distance(0, 0, ball.body.velocity.x, ball.body.velocity.y);
                if (v > AdversaryAI.BALL_HIGH_SPEED) {
                    this.jumpSensorActivated = true;
                }
            }
            else {
                this.jumpSensorActivated = false;
            }
        };
        AdversaryAI.prototype.setCapTimers = function () {
            for (var i = 0; i < this.timers.length; i++) {
                if (this.timers[i]) {
                    this.timers[i].pendingDelete = true;
                }
            }
            var isBallMovingRight = SuperSoccerNoggins.BallsManager.currentInstance.ball.body.velocity.x > 0 ? true : false;
            var times;
            if (isBallMovingRight) {
                times = AdversaryAI.CAP_TIMES_BALL_MOVING_RIGHT;
            }
            else {
                times = AdversaryAI.CAP_TIMES_BALL_MOVING_LEFT;
            }
            this.oppRightCap = 0;
            this.timers[0] = this.game.time.events.add(times[0], function () {
                this.oppRightCap = 320;
            }, this);
            this.timers[1] = this.game.time.events.add(times[1], function () {
                this.oppRightCap = 400;
            }, this);
            this.timers[2] = this.game.time.events.add(times[2], function () {
                this.oppRightCap = 480;
            }, this);
            this.timers[3] = this.game.time.events.add(times[3], function () {
                this.oppRightCap = 640;
            }, this);
        };
        AdversaryAI.prototype.setStayStill = function (value) {
            if (this.settingStayStill || (this.stayStill === value)) {
                return;
            }
            this.settingStayStill = true;
            this.game.time.events.add(Math.random() * 100 + 50, function (args) {
                this.settingStayStill = false;
                this.stayStill = args[0];
            }, this, [value]);
        };
        return AdversaryAI;
    }());
    AdversaryAI.BALL_HIGH_SPEED = 400;
    AdversaryAI.CAP_TIMES_BALL_MOVING_LEFT = [2000, 2750, 3500, 4500];
    AdversaryAI.CAP_TIMES_BALL_MOVING_RIGHT = [250, 500, 750, 1000];
    SuperSoccerNoggins.AdversaryAI = AdversaryAI;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var AdversaryManualController = (function () {
        function AdversaryManualController(game) {
            AdversaryManualController.currentInstance = this;
            this.game = game;
            var key;
            if (SuperSoccerNoggins.TeamSelectionContainer.keysConfiguration === SuperSoccerNoggins.GameConstants.WASD) {
                key = this.game.input.keyboard.addKey(Phaser.Keyboard.W);
                key.onDown.add(this.jump, this);
            }
            else {
                key = this.game.input.keyboard.addKey(Phaser.Keyboard.Z);
                key.onDown.add(this.jump, this);
            }
            key = this.game.input.keyboard.addKey(Phaser.Keyboard.S);
            key.onDown.add(this.kick, this);
        }
        AdversaryManualController.prototype.update = function () {
            if (SuperSoccerNoggins.GameVars.paused) {
                return;
            }
            if (SuperSoccerNoggins.TeamSelectionContainer.keysConfiguration === SuperSoccerNoggins.GameConstants.WASD) {
                if (this.game.input.keyboard.isDown(Phaser.Keyboard.A)) {
                    this.adversary.backtrack();
                    if (this.bodyguard) {
                        this.bodyguard.rush();
                    }
                    return;
                }
                else if (this.game.input.keyboard.isDown(Phaser.Keyboard.D)) {
                    this.adversary.rush();
                    if (this.bodyguard) {
                        this.bodyguard.backtrack();
                    }
                    return;
                }
            }
            else {
                if (this.game.input.keyboard.isDown(Phaser.Keyboard.Q)) {
                    this.adversary.backtrack();
                    if (this.bodyguard) {
                        this.bodyguard.rush();
                    }
                    return;
                }
                else if (this.game.input.keyboard.isDown(Phaser.Keyboard.D)) {
                    this.adversary.rush();
                    if (this.bodyguard) {
                        this.bodyguard.backtrack();
                    }
                    return;
                }
            }
        };
        AdversaryManualController.prototype.setAdversary = function (adversary) {
            this.adversary = adversary;
        };
        AdversaryManualController.prototype.kick = function () {
            if (!SuperSoccerNoggins.GameVars.ai) {
                this.adversary.kick();
                if (this.bodyguard) {
                    this.bodyguard.kick();
                }
            }
        };
        AdversaryManualController.prototype.jump = function () {
            if (!SuperSoccerNoggins.GameVars.ai) {
                this.adversary.jump();
                if (this.bodyguard) {
                    this.bodyguard.jump();
                }
            }
        };
        return AdversaryManualController;
    }());
    SuperSoccerNoggins.AdversaryManualController = AdversaryManualController;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var Foot = (function (_super) {
        __extends(Foot, _super);
        function Foot(game, noggin) {
            var _this = this;
            var footX = noggin.torso.body.x - SuperSoccerNoggins.GameConstants.FOOT_RADIUS * Math.sin(noggin.lowerLimitAngle * Math.PI / 180);
            var footY = noggin.torso.body.y + SuperSoccerNoggins.GameConstants.FOOT_RADIUS * Math.cos(noggin.lowerLimitAngle * Math.PI / 180);
            var footTextureName;
            if (noggin.isBodyGuard) {
                if (SuperSoccerNoggins.GameVars.getInstance().christmasVersion) {
                    if (noggin.isPlayer) {
                        footTextureName = "xmas_elf_foot.png";
                    }
                    else {
                        footTextureName = "xmas_grinch_foot.png";
                    }
                }
                else {
                    footTextureName = "bodyguard_foot.png";
                }
            }
            else {
                if (noggin.isPlayer) {
                    if (SuperSoccerNoggins.GameVars.ai) {
                        footTextureName = SuperSoccerNoggins.GameVars.getInstance().playerTeamID + 1 < 10 ? "foot_000" + (SuperSoccerNoggins.GameVars.getInstance().playerTeamID + 1) + ".png" :
                            "foot_00" + (SuperSoccerNoggins.GameVars.getInstance().playerTeamID + 1) + ".png";
                    }
                    else {
                        footTextureName = SuperSoccerNoggins.GameVars.playerTeamIDPVP + 1 < 10 ? "foot_000" + (SuperSoccerNoggins.GameVars.playerTeamIDPVP + 1) + ".png" :
                            "foot_00" + (SuperSoccerNoggins.GameVars.playerTeamIDPVP + 1) + ".png";
                    }
                }
                else {
                    if (SuperSoccerNoggins.GameVars.ai) {
                        footTextureName = SuperSoccerNoggins.GameVars.getInstance().adversaryTeamID + 1 < 10 ? "foot_000" + (SuperSoccerNoggins.GameVars.getInstance().adversaryTeamID + 1) + ".png" :
                            "foot_00" + (SuperSoccerNoggins.GameVars.getInstance().adversaryTeamID + 1) + ".png";
                    }
                    else {
                        footTextureName = SuperSoccerNoggins.GameVars.adversaryTeamIDPVP + 1 < 10 ? "foot_000" + (SuperSoccerNoggins.GameVars.adversaryTeamIDPVP + 1) + ".png" :
                            "foot_00" + (SuperSoccerNoggins.GameVars.adversaryTeamIDPVP + 1) + ".png";
                    }
                }
            }
            _this = _super.call(this, game, footX, footY, "texture_atlas_1", footTextureName) || this;
            _this.instep = false;
            _this.noggin = noggin;
            _this.game.physics.box2d.enable(_this);
            _this.visible = false;
            _this.anchor.x = .65;
            _this.scaleX = noggin.isPlayer ? 1 : -1;
            _this.scale.setTo(.5 * _this.scaleX, .5);
            var fixture;
            var body = _this.body;
            if (_this.noggin.isPlayer) {
                fixture = body.setPolygon([8, -2,
                    8, 14,
                    -20, 14,
                    -14, -2]);
                _this.name = SuperSoccerNoggins.GameConstants.PLAYER_FOOT;
            }
            else {
                fixture = body.setPolygon([-8, -2,
                    -8, 14,
                    20, 14,
                    14, -2]);
                _this.name = SuperSoccerNoggins.GameConstants.ADVERSARY_FOOT;
            }
            body.friction = 0;
            body.restitution = 0.45;
            body.mass = 0.4;
            _this.body.bullet = true;
            var filter = fixture.GetFilterData();
            filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_FOOT;
            filter.maskBits = SuperSoccerNoggins.GameConstants.MASK_ONLY_BALL;
            fixture.SetFilterData(filter);
            return _this;
        }
        Foot.prototype.kick = function () {
            this.scale.setTo(.8 * this.scaleX, .8);
            this.visible = true;
            this.anchor.y = .15;
        };
        Foot.prototype.turnBack = function () {
            this.scale.setTo(.6 * this.scaleX, .6);
            this.anchor.y = -.125;
        };
        Foot.prototype.hide = function () {
            this.visible = false;
        };
        Foot.prototype.setCallBack = function (ball) {
            this.body.setBodyContactCallback(ball.body, this.contactWithBall, this);
            this.body.setBodyPresolveCallback(ball.body, this.presolveContactWithBall, this);
        };
        Foot.prototype.presolveContactWithBall = function (body1, body2, fixture1, fixture2, contact, manifold) {
            var ball = body2.sprite;
            if (!ball) {
                return;
            }
            if (!this.instep) {
                contact.SetEnabled(false);
            }
        };
        Foot.prototype.isContactInstep = function (contact) {
            var ret = true;
            var worldManifold = new box2d.b2WorldManifold();
            contact.GetWorldManifold(worldManifold);
            var globalCollisionPoint = worldManifold.points[0];
            var localCollisionPoint = new box2d.b2Vec2(0, 0);
            this.body.data.GetLocalPoint(globalCollisionPoint, localCollisionPoint);
            localCollisionPoint.SelfMul(-this.game.physics.box2d.ptmRatio);
            if (localCollisionPoint.y >= 14 && !this.noggin.kicking) {
                ret = false;
            }
            if (this.noggin.isPlayer) {
                if (localCollisionPoint.x >= 8) {
                    ret = false;
                }
            }
            else {
                if (localCollisionPoint.x <= -8) {
                    ret = false;
                }
            }
            return ret;
        };
        Foot.prototype.contactWithBall = function (body1, body2, fixture1, fixture2, begin, contact) {
            var ball = body2.sprite;
            if (!ball) {
                return;
            }
            if (begin) {
                this.instep = this.isContactInstep(contact);
                if (!this.instep) {
                    contact.SetEnabled(false);
                }
                if (ball.isWeldedToHelm) {
                    ball.releaseFromHelm();
                }
            }
            else {
                if (this.noggin.isPlayer) {
                    SuperSoccerNoggins.AdversaryAI.currentInstance.ballJustChangedDirection(ball);
                }
                if (this.instep && this.noggin.kicking) {
                    var f = this.getKickForce(ball);
                    var ballBody = ball.body.data;
                    ballBody.ApplyForce(f, ballBody.GetWorldCenter());
                }
                if (this.noggin.isPlayer) {
                    if (this.noggin.hasJetpack && !this.noggin.groundContact) {
                        ball.sender = SuperSoccerNoggins.GameConstants.PLAYER_WITH_JETPACK_FLYING;
                    }
                    else {
                        ball.sender = this.noggin.isBodyGuard ? SuperSoccerNoggins.GameConstants.PLAYER_BODYGUARD : SuperSoccerNoggins.GameConstants.PLAYER;
                    }
                }
                else {
                    ball.sender = this.noggin.isBodyGuard ? SuperSoccerNoggins.GameConstants.ADVERSARY_BODYGUARD : SuperSoccerNoggins.GameConstants.ADVERSARY;
                }
            }
        };
        Foot.prototype.getKickForce = function (ball) {
            var force = this.noggin.kickForce;
            if (this.noggin.insideWater) {
                force *= .6;
            }
            var speed = Math.sqrt(ball.body.velocity.x * ball.body.velocity.x + ball.body.velocity.y * ball.body.velocity.y);
            var nvx = ball.body.velocity.x / speed;
            var nvy = ball.body.velocity.y / speed;
            ball.body.velocity.x *= .2;
            ball.body.velocity.y *= .2;
            var fx = -force * nvx;
            var fy = -force * nvy * .25 * (1.5 - this.noggin.precision);
            var kickIndex;
            if (SuperSoccerNoggins.GameVars.ai) {
                kickIndex = this.noggin.isPlayer ? SuperSoccerNoggins.GameVars.getInstance().playerKickIndex : SuperSoccerNoggins.GameVars.getInstance().adversaryKickIndex;
            }
            else {
                kickIndex = this.noggin.isPlayer ? SuperSoccerNoggins.GameVars.playerKickIndexPVP : SuperSoccerNoggins.GameVars.adversaryKickIndexPVP;
            }
            var minFY;
            switch (kickIndex) {
                case 1:
                    minFY = 55;
                    break;
                case 2:
                    minFY = 65;
                    break;
                case 3:
                    minFY = 75;
                    break;
                case 4:
                    minFY = 85;
                    break;
                case 5:
                    minFY = 120;
                    break;
                default:
                    break;
            }
            if (fy < minFY) {
                fy = minFY * (1 + Math.random() * .15);
            }
            if (this.noggin.hasJetpack && !this.noggin.groundContact) {
                if (this.noggin.torso.y < 120) {
                    fy = -100;
                }
                else if (this.noggin.torso.y < 240) {
                    fy = -75;
                }
                else {
                    fy = -45;
                }
            }
            if (this.noggin.isPlayer) {
                fx = fx < 0 ? 0 : fx;
            }
            else {
                fx = fx < 0 ? fx : 0;
            }
            var f = new box2d.b2Vec2(fx, fy);
            return f;
        };
        return Foot;
    }(Phaser.Sprite));
    SuperSoccerNoggins.Foot = Foot;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var Head = (function (_super) {
        __extends(Head, _super);
        function Head(game, noggin) {
            var _this = _super.call(this, game, noggin.initialX, noggin.initialY, "texture_atlas_1", null) || this;
            _this.visible = false;
            _this.noggin = noggin;
            _this.game.physics.box2d.enable(_this);
            var body = _this.body;
            var fixture;
            if (_this.noggin.isPlayer) {
                fixture = body.setCircle(15.5, 5, 0);
            }
            else {
                fixture = body.setCircle(15.5, -5, 0);
            }
            _this.circleShape = fixture.GetShape();
            body.friction = 0;
            body.mass = 1.35;
            body.restitution = .5;
            _this.setFilter();
            _this.addHeadSensor();
            return _this;
        }
        Head.prototype.setFilter = function () {
            var box2dBody = this.body.data;
            var fixture = box2dBody.GetFixtureList();
            var filter = fixture.GetFilterData();
            if (this.noggin.isPlayer) {
                filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_PLAYER_HEAD;
                filter.maskBits = SuperSoccerNoggins.GameConstants.MASK_PLAYER_HEAD;
            }
            else {
                filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_ADVERSARY_HEAD;
                filter.maskBits = SuperSoccerNoggins.GameConstants.MASK_ADVERSARY_HEAD;
            }
            fixture.SetFilterData(filter);
        };
        Head.prototype.setCallBacks = function (ball) {
            this.body.setBodyContactCallback(ball.body, this.contactWithBall, this);
            this.headSensor.body.setBodyContactCallback(ball.body, this.contactWithHeadSensor, this);
        };
        Head.prototype.makeBig = function () {
            this.circleShape.m_radius *= Head.BIG_HEAD_SCALE_FACTOR;
        };
        Head.prototype.shrink = function () {
            this.circleShape.m_radius *= 1 / Head.BIG_HEAD_SCALE_FACTOR;
        };
        Head.prototype.contactWithBall = function (body1, body2, fixture1, fixture2, begin, contact) {
            var ball = body2.sprite;
            if (!ball) {
                return;
            }
            var rnd = Math.floor(Math.random() * 4) + 1;
            if (begin) {
                this.noggin.ballHitHeadStart(ball);
                SuperSoccerNoggins.StageContainer.currentInstance.ballHitStageWalls(ball, contact, SuperSoccerNoggins.GameConstants.SURFACE_NOGGIN);
                if (ball.isBouncy) {
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect("elastic_ball");
                }
                else {
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect("impacto_" + rnd);
                }
            }
            else if (!begin) {
                this.noggin.ballHitHeadEnd(ball);
                if (this.noggin.isPlayer) {
                    SuperSoccerNoggins.AdversaryAI.currentInstance.ballJustChangedDirection(ball);
                }
                if (this.noggin.isPlayer) {
                    if (this.noggin.hasJetpack && !this.noggin.groundContact) {
                        ball.sender = SuperSoccerNoggins.GameConstants.PLAYER_WITH_JETPACK_FLYING;
                    }
                    else {
                        ball.sender = this.noggin.isBodyGuard ? SuperSoccerNoggins.GameConstants.PLAYER_BODYGUARD : SuperSoccerNoggins.GameConstants.PLAYER;
                    }
                }
                else {
                    ball.sender = this.noggin.isBodyGuard ? SuperSoccerNoggins.GameConstants.ADVERSARY_BODYGUARD : SuperSoccerNoggins.GameConstants.ADVERSARY;
                }
            }
        };
        Head.prototype.contactWithHeadSensor = function (body1, body2, fixture1, fixture2, begin, contact) {
            var ball = body2.sprite;
            if (this.noggin.hasHelm && ball.y < this.headSensor.y - 9 && begin && ball) {
                ball.weldToHelm(this.noggin, ball.x < this.headSensor.x);
            }
        };
        Head.prototype.addHeadSensor = function () {
            this.headSensor = new Phaser.Sprite(this.game, this.x, this.y, null);
            this.headSensor.visible = false;
            this.game.physics.box2d.enable(this.headSensor);
            var body = this.headSensor.body;
            var fixture;
            if (this.noggin.isPlayer) {
                fixture = body.setCircle(18, 5, -8);
            }
            else {
                fixture = body.setCircle(18, -5, -8);
            }
            body.sensor = true;
            body.kinematic = true;
            var filter = fixture.GetFilterData();
            if (this.noggin.isPlayer) {
                filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_PLAYER_HEAD;
            }
            else {
                filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_ADVERSARY_HEAD;
            }
            fixture.SetFilterData(filter);
            this.noggin.addChild(this.headSensor);
        };
        return Head;
    }(Phaser.Sprite));
    Head.BIG_HEAD_SCALE_FACTOR = 1.58;
    SuperSoccerNoggins.Head = Head;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var Jetpack = (function (_super) {
        __extends(Jetpack, _super);
        function Jetpack(game, isPlayer) {
            var _this = _super.call(this, game, 0, 0, "texture_atlas_season", "jetpack_0000.png") || this;
            _this.isPlayer = isPlayer;
            _this.animations.add("fire", Phaser.Animation.generateFrameNames("jetpack_", 1, 6, ".png", 4), 8, true);
            _this.scale.x = _this.isPlayer ? 1 : -1;
            return _this;
        }
        Jetpack.prototype.update = function () {
            if (this.frameName !== "jetpack_0000.png" && Math.random() > .925 && this.alive) {
                SuperSoccerNoggins.StageContainer.currentInstance.effectsContainer.addEffect(this.isPlayer ? this.world.x + 28 : this.world.x - 28, this.world.y + 45, SuperSoccerNoggins.GameConstants.SURFACE_SMOKE_JETPACK, 0);
            }
        };
        Jetpack.prototype.on = function () {
            this.animations.play("fire", 10, false)
                .onComplete.add(function () {
                this.frameName = "jetpack_0000.png";
            }, this);
        };
        Jetpack.prototype.off = function () {
            this.animations.stop("fire");
            this.frameName = "jetpack_0000.png";
        };
        return Jetpack;
    }(Phaser.Sprite));
    SuperSoccerNoggins.Jetpack = Jetpack;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var Player = (function (_super) {
        __extends(Player, _super);
        function Player(game, isTwin) {
            var _this = _super.call(this, game, true, isTwin) || this;
            if (!isTwin) {
                Player.currentInstance = _this;
            }
            return _this;
        }
        return Player;
    }(SuperSoccerNoggins.Noggin));
    SuperSoccerNoggins.Player = Player;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var PlayerController = (function () {
        function PlayerController(game) {
            PlayerController.currentInstance = this;
            this.game = game;
            this.deactivated = false;
            this.arrowDownKey = this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN);
            this.arrowDownKey.onDown.add(this.kick, this);
            this.spacebarKey = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
            this.spacebarKey.onDown.add(this.kick, this);
            this.xKey = this.game.input.keyboard.addKey(Phaser.Keyboard.X);
            this.xKey.onDown.add(this.kick, this);
            this.upKey = this.game.input.keyboard.addKey(Phaser.Keyboard.UP);
            this.upKey.onDown.add(this.jump, this);
            this.upKey.onUp.add(this.jumpReleased, this);
        }
        PlayerController.prototype.destroy = function () {
            this.arrowDownKey.onDown.remove(this.kick, this);
            this.spacebarKey.onDown.remove(this.kick, this);
            this.xKey.onDown.remove(this.kick, this);
            this.upKey.onUp.remove(this.jumpReleased, this);
        };
        PlayerController.prototype.update = function () {
            if (SuperSoccerNoggins.GameVars.paused || this.deactivated) {
                return;
            }
            if (this.game.input.keyboard.isDown(Phaser.Keyboard.LEFT)) {
                this.player.rush();
                if (this.playerTwin) {
                    this.playerTwin.backtrack();
                }
                return;
            }
            else if (this.game.input.keyboard.isDown(Phaser.Keyboard.RIGHT)) {
                this.player.backtrack();
                if (this.playerTwin) {
                    this.playerTwin.rush();
                }
                return;
            }
        };
        PlayerController.prototype.kick = function () {
            if (SuperSoccerNoggins.GameVars.paused) {
                return;
            }
            this.player.kick();
            if (this.playerTwin) {
                this.playerTwin.kick();
            }
        };
        PlayerController.prototype.jump = function () {
            if (SuperSoccerNoggins.GameVars.paused) {
                return;
            }
            this.player.jump();
            if (this.playerTwin) {
                this.playerTwin.jump();
            }
        };
        PlayerController.prototype.jumpReleased = function () {
            this.player.jumpReleased();
        };
        return PlayerController;
    }());
    SuperSoccerNoggins.PlayerController = PlayerController;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var RivalBodyguardAI = (function () {
        function RivalBodyguardAI(game) {
            RivalBodyguardAI.currentInstance = this;
            this.game = game;
            this.bodyguard = null;
            this.justKicked = false;
            this.jumpSensorActivated = false;
            this.timeNogginJumped = 0;
            this.contactWithKickSensor = false;
        }
        RivalBodyguardAI.prototype.update = function () {
            if (!this.bodyguard || SuperSoccerNoggins.GameVars.paused || !SuperSoccerNoggins.BallsManager.currentInstance.ball) {
                return;
            }
            if (this.contactWithKickSensor) {
                this.kick();
            }
            if (this.jumpSensorActivated && !this.justKicked) {
                this.jump();
            }
        };
        RivalBodyguardAI.prototype.setCallBacks = function () {
            var ball = SuperSoccerNoggins.BallsManager.currentInstance.ball;
            this.bodyguard.frontSensor.body.setBodyContactCallback(ball.body, this.onContactKickSensor, this);
            this.bodyguard.rearSensor.body.setBodyContactCallback(ball.body, this.onContactRearSensor, this);
            this.bodyguard.jumpSensorBallLowSpeed.body.setBodyContactCallback(ball.body, this.onContactJumpSensorLowSpeed, this);
            this.bodyguard.jumpSensorBallHighSpeed.body.setBodyContactCallback(ball.body, this.onContactJumpSensorHighSpeed, this);
        };
        RivalBodyguardAI.prototype.kick = function () {
            if (!SuperSoccerNoggins.GameVars.ai || this.justKicked) {
                return;
            }
            this.justKicked = true;
            this.bodyguard.kick();
            this.adversary.kick();
            this.game.time.events.add(350, function () {
                this.justKicked = false;
            }, this);
        };
        RivalBodyguardAI.prototype.jump = function () {
            var ball = SuperSoccerNoggins.BallsManager.currentInstance.ball;
            if (!SuperSoccerNoggins.GameVars.ai
                || this.game.time.now - this.timeNogginJumped < 250
                || this.bodyguard.torso.x > SuperSoccerNoggins.GameConstants.GAME_WIDTH - SuperSoccerNoggins.GameConstants.DELTA_X_GOAL
                || this.bodyguard.torso.x < SuperSoccerNoggins.GameConstants.DELTA_X_GOAL
                || (ball.body.velocity.x > 0 && ball.y > this.bodyguard.torso.y - 45)) {
                return;
            }
            var jumped = this.bodyguard.jump();
            if (jumped) {
                this.timeNogginJumped = this.game.time.now;
                this.adversary.jump();
            }
        };
        RivalBodyguardAI.prototype.onContactKickSensor = function (body1, body2, fixture1, fixture2, begin) {
            var ball = body2.sprite;
            if (!ball) {
                return;
            }
            if (begin) {
                this.contactWithKickSensor = true;
            }
            else {
                this.contactWithKickSensor = false;
            }
        };
        RivalBodyguardAI.prototype.onContactRearSensor = function (body1, body2, fixture1, fixture2, begin, contact) {
            var ball = body2.sprite;
            if (!ball) {
                return;
            }
            if (begin) {
                this.jumpSensorActivated = true;
            }
            else {
                this.jumpSensorActivated = false;
            }
        };
        RivalBodyguardAI.prototype.onContactJumpSensorLowSpeed = function (body1, body2, fixture1, fixture2, begin) {
            if (begin) {
                this.jumpSensorActivated = true;
            }
            else {
                this.jumpSensorActivated = false;
            }
        };
        RivalBodyguardAI.prototype.onContactJumpSensorHighSpeed = function (body1, body2, fixture1, fixture2, begin) {
            if (begin) {
                var ball = body2.sprite;
                var v = Phaser.Math.distance(0, 0, ball.body.velocity.x, ball.body.velocity.y);
                if (v > SuperSoccerNoggins.AdversaryAI.BALL_HIGH_SPEED) {
                    this.jumpSensorActivated = true;
                }
            }
            else {
                this.jumpSensorActivated = false;
            }
        };
        return RivalBodyguardAI;
    }());
    RivalBodyguardAI.BALL_HIGH_SPEED = 400;
    SuperSoccerNoggins.RivalBodyguardAI = RivalBodyguardAI;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var Torso = (function (_super) {
        __extends(Torso, _super);
        function Torso(game, noggin) {
            var _this = _super.call(this, game, noggin.initialX, noggin.initialY, "texture_atlas_1", null) || this;
            _this.visible = false;
            _this.noggin = noggin;
            _this.name = _this.isPlayer ? SuperSoccerNoggins.GameConstants.PLAYER_TORSO : SuperSoccerNoggins.GameConstants.ADVERSARY_TORSO;
            _this.game.physics.box2d.enable(_this);
            var body = _this.body;
            var fixture;
            if (_this.noggin.isPlayer) {
                fixture = body.setCircle(17, 8, 18);
            }
            else {
                fixture = body.setCircle(17, -8, 18);
            }
            body.friction = 0;
            body.restitution = 0;
            body.mass = 1.75;
            body.data.SetFixedRotation(true);
            _this.setFilter();
            return _this;
        }
        Torso.prototype.setFilter = function () {
            var box2dBody = this.body.data;
            var fixture = box2dBody.GetFixtureList();
            var filter = fixture.GetFilterData();
            if (this.noggin.isPlayer) {
                filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_PLAYER_TORSO;
                filter.maskBits = SuperSoccerNoggins.GameConstants.MASK_PLAYER_TORSO;
            }
            else {
                filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_ADVERSARY_TORSO;
                filter.maskBits = SuperSoccerNoggins.GameConstants.MASK_ADVERSARY_TORSO;
            }
            fixture.SetFilterData(filter);
        };
        Torso.prototype.setCallBack = function (ball) {
            this.body.setBodyContactCallback(ball.body, this.contactWithBall, this);
        };
        Torso.prototype.contactWithBall = function (body1, body2, fixture1, fixture2, begin, contact) {
            var ball = body2.sprite;
            if (begin && ball) {
                SuperSoccerNoggins.StageContainer.currentInstance.ballHitStageWalls(ball, contact, SuperSoccerNoggins.GameConstants.SURFACE_NOGGIN);
            }
            else if (!begin) {
                if (this.isPlayer) {
                    SuperSoccerNoggins.AdversaryAI.currentInstance.ballJustChangedDirection(ball);
                }
                if (this.noggin.isPlayer) {
                    if (this.noggin.hasJetpack && !this.noggin.groundContact) {
                        ball.sender = SuperSoccerNoggins.GameConstants.PLAYER_WITH_JETPACK_FLYING;
                    }
                    else {
                        ball.sender = this.noggin.isBodyGuard ? SuperSoccerNoggins.GameConstants.PLAYER_BODYGUARD : SuperSoccerNoggins.GameConstants.PLAYER;
                    }
                }
                else {
                    ball.sender = this.noggin.isBodyGuard ? SuperSoccerNoggins.GameConstants.ADVERSARY_BODYGUARD : SuperSoccerNoggins.GameConstants.ADVERSARY;
                }
            }
        };
        return Torso;
    }(Phaser.Sprite));
    SuperSoccerNoggins.Torso = Torso;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var PowerUp = (function (_super) {
        __extends(PowerUp, _super);
        function PowerUp(game, x, y, puType, i) {
            var _this = _super.call(this, game) || this;
            _this.hit = false;
            _this.puType = puType;
            _this.ball_vx = null;
            _this.ball_vy = null;
            _this.timerAnimation = _this.create(x, y, "texture_atlas_1", "timer0001.png");
            _this.timerAnimation.anchor.set(.5);
            _this.timerAnimation.animations.add("run", Phaser.Animation.generateFrameNames("timer", 1, 47, ".png", 4), 6, true);
            _this.timerAnimation.play("run", 6, false)
                .onComplete.add(_this.disappear, _this);
            _this.powerUpSprite = _this.create(x, y, "texture_atlas_season", puType + ".png");
            _this.game.physics.box2d.enable(_this.powerUpSprite);
            var fixture = _this.powerUpSprite.body.setCircle(25);
            _this.powerUpSprite.body.sensor = true;
            _this.powerUpSprite.body.static = true;
            var filter = fixture.GetFilterData();
            filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_POWER_UP;
            fixture.SetFilterData(filter);
            if (typeof i !== "undefined" && SuperSoccerNoggins.GameConstants.DEVELOPMENT) {
                var indexLabel = new Phaser.Text(_this.game, x + 5, y + 5, (i + 1).toString(), { font: "12px Arial", fill: "#000000" });
                _this.add(indexLabel);
            }
            _this.powerUpSprite.scale.set(0);
            _this.game.add.tween(_this.powerUpSprite.scale)
                .to({ x: 1, y: 1 }, 500, Phaser.Easing.Elastic.Out, true);
            return _this;
        }
        PowerUp.prototype.pause = function () {
            if (this.timerAnimation) {
                this.timerAnimation.animations.paused = true;
            }
        };
        PowerUp.prototype.resume = function () {
            this.timerAnimation.animations.paused = false;
        };
        PowerUp.prototype.disappear = function () {
            if (this.hit) {
                this.game.add.tween(this)
                    .to({ alpha: 0 }, 300, Phaser.Easing.Cubic.Out, true, 150)
                    .onComplete.add(this.removeFromStage, this);
            }
            else {
                this.timerAnimation.destroy();
                this.game.add.tween(this.powerUpSprite.scale)
                    .to({ x: 0, y: 0 }, 300, Phaser.Easing.Elastic.In, true)
                    .onComplete.add(this.removeFromStage, this);
            }
        };
        PowerUp.prototype.setCallBack = function (ball) {
            this.powerUpSprite.body.setBodyContactCallback(ball.body, this.ballContact, this);
        };
        PowerUp.prototype.ballContact = function (body1, body2, fixture1, fixture2, begin, contact) {
            if (this.hit) {
                return;
            }
            if (begin) {
                this.hit = true;
                this.ball_vx = body2.velocity.x;
                this.ball_vy = body2.velocity.y;
                SuperSoccerNoggins.PowerUpsManager.currentInstance.onPowerUpHit(this);
                if (this.puType === SuperSoccerNoggins.GameConstants.PU_CAN_T_KICK_GREEN || this.puType === SuperSoccerNoggins.GameConstants.PU_CAN_T_KICK_RED) {
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect("flamenca");
                    return;
                }
                if (this.puType === "power-up-small-goal-green" || this.puType === "power-up-small-goal-red" ||
                    this.puType === "power-up-big-goal-green" || this.puType === "power-up-big-goal-red") {
                    return;
                }
                SuperSoccerNoggins.AudioManager.getInstance().playEffect("powerups");
            }
        };
        PowerUp.prototype.removeFromStage = function () {
            if (this.game) {
                this.game.time.events.add(200, this.destroy, this);
            }
        };
        return PowerUp;
    }(Phaser.Group));
    SuperSoccerNoggins.PowerUp = PowerUp;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var PowerUpsManager = (function (_super) {
        __extends(PowerUpsManager, _super);
        function PowerUpsManager(game) {
            var _this = _super.call(this, game, null, "power-ups-manager") || this;
            PowerUpsManager.currentInstance = _this;
            if (SuperSoccerNoggins.GameVars.getInstance().terrain === SuperSoccerNoggins.GameConstants.TERRAIN_ISLAND) {
                _this.puCoordinates = Phaser.ArrayUtils.shuffle(PowerUpsManager.PU_COORDINATES_ISLAND);
            }
            else if (SuperSoccerNoggins.GameVars.getInstance().matchID < 12) {
                _this.puCoordinates = Phaser.ArrayUtils.shuffle(PowerUpsManager.PU_COORDINATES_FIRST_LEVELS);
            }
            else {
                _this.puCoordinates = Phaser.ArrayUtils.shuffle(PowerUpsManager.PU_COORDINATES);
            }
            _this.powerUps = SuperSoccerNoggins.GameVars.getInstance().powerUps;
            _this.i = Math.floor(Math.random() * _this.powerUps.length);
            return _this;
        }
        PowerUpsManager.prototype.startGame = function () {
            if (SuperSoccerNoggins.GameConstants.POWERUPS && this.powerUps.length > 0) {
                this.game.time.events.loop(SuperSoccerNoggins.GameConstants.POWER_UP_SPAWNING_TIME, this.spawnPowerUp, this);
                if (Math.random() > .5) {
                    this.spawnPowerUp();
                }
            }
        };
        PowerUpsManager.prototype.pause = function () {
            this.forEach(function (powerUp) {
                powerUp.pause();
            }, this);
        };
        PowerUpsManager.prototype.resume = function () {
            this.forEach(function (powerUp) {
                powerUp.resume();
            }, this);
        };
        PowerUpsManager.prototype.spawnPowerUp = function () {
            if (SuperSoccerNoggins.GameVars.getInstance().time < 12 || SuperSoccerNoggins.GameVars.paused) {
                return;
            }
            var px = this.puCoordinates[this.i][0];
            var py = this.puCoordinates[this.i][1];
            var powerUp = new SuperSoccerNoggins.PowerUp(this.game, px, py, this.powerUps[this.i]);
            this.add(powerUp);
            powerUp.setCallBack(this.ball);
            this.i = this.i < this.powerUps.length - 1 ? this.i + 1 : 0;
            if (Math.random() > .5) {
                this.game.time.events.add(750, function () {
                    powerUp = new SuperSoccerNoggins.PowerUp(this.game, this.puCoordinates[this.i][0], this.puCoordinates[this.i][1], this.powerUps[this.i]);
                    this.add(powerUp);
                    powerUp.setCallBack(this.ball);
                    this.i = this.i < this.powerUps.length - 1 ? this.i + 1 : 0;
                }, this);
            }
        };
        PowerUpsManager.prototype.setBall = function (ball) {
            this.ball = ball;
        };
        PowerUpsManager.prototype.onPowerUpHit = function (powerUp) {
            SuperSoccerNoggins.MatchManager.currentInstance.onPowerUpHit(powerUp.puType);
            powerUp.disappear();
        };
        return PowerUpsManager;
    }(Phaser.Group));
    PowerUpsManager.PU_COORDINATES_FIRST_LEVELS = [
        [60, 240],
        [235, 320],
        [135, 230],
        [275, 265],
        [320, 230],
        [320, 310],
        [580, 240],
        [405, 320],
        [505, 230],
        [365, 265]
    ];
    PowerUpsManager.PU_COORDINATES = [
        [135, 70],
        [65, 155],
        [60, 240],
        [235, 320],
        [185, 130],
        [135, 230],
        [275, 265],
        [320, 230],
        [320, 310],
        [505, 70],
        [575, 155],
        [580, 240],
        [405, 320],
        [455, 130],
        [505, 230],
        [365, 265]
    ];
    PowerUpsManager.PU_COORDINATES_ISLAND = [
        [125, 85],
        [65, 155],
        [60, 240],
        [185, 130],
        [135, 230],
        [205, 240],
        [125, 290],
        [320, 310],
        [515, 85],
        [575, 155],
        [580, 240],
        [455, 130],
        [505, 230],
        [435, 240],
        [515, 290]
    ];
    PowerUpsManager.PU_COORDINATES_SMALL_ISLANDS = [
        [65, 155],
        [60, 240],
        [135, 230],
        [275, 265],
        [320, 230],
        [320, 310],
        [575, 155],
        [580, 240],
        [505, 230],
        [365, 265],
    ];
    SuperSoccerNoggins.PowerUpsManager = PowerUpsManager;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var BigLake = (function (_super) {
        __extends(BigLake, _super);
        function BigLake(game) {
            var _this = _super.call(this, game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 370, "texture_atlas_season", "terrain-lake-boundaries.png") || this;
            _this.game.physics.box2d.enable(_this);
            var body = _this.body;
            body.static = true;
            body.restitution = SuperSoccerNoggins.GameConstants.STAGE_WALLS_RESTITUTION;
            body.setPolygon([-SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 5,
                200 - SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 5,
                235 - SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 45,
                -SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 45]);
            body.addPolygon([SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 5,
                SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2 - 200, 5,
                SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2 - 235, 45,
                SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 45]);
            body.addRectangle(SuperSoccerNoggins.GameConstants.GAME_WIDTH, 50, 0, 25 + 45);
            var box2dBody = body.data;
            var filter;
            for (var fixture = box2dBody.GetFixtureList(); fixture; fixture = fixture.GetNext()) {
                filter = fixture.GetFilterData();
                filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_FIELD;
                fixture.SetFilterData(filter);
            }
            _this.anchor.y = 0;
            return _this;
        }
        BigLake.prototype.setCallBackWithBall = function (ball) {
            this.body.setBodyContactCallback(ball.body, this.ballHitField, this);
        };
        BigLake.prototype.ballHitField = function (body1, body2, fixture1, fixture2, begin, contact) {
            var ball = body2.sprite;
            if (begin && ball) {
                SuperSoccerNoggins.StageContainer.currentInstance.ballHitStageWalls(ball, contact, SuperSoccerNoggins.GameConstants.SURFACE_FIELD);
                var rndNumber = Math.floor(Math.random() * 4) + 1;
                if (ball.isBouncy) {
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect("elastic_ball");
                }
                else {
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect("impacto_" + rndNumber);
                }
            }
            if (!begin && ball) {
                SuperSoccerNoggins.AdversaryAI.currentInstance.ballJustChangedDirection(ball, "big lake");
            }
        };
        return BigLake;
    }(Phaser.Sprite));
    SuperSoccerNoggins.BigLake = BigLake;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var FlatField = (function (_super) {
        __extends(FlatField, _super);
        function FlatField(game) {
            var _this = _super.call(this, game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, SuperSoccerNoggins.GameConstants.FLAT_FIELD_Y, "texture_atlas_season", "terrain-flat.png") || this;
            _this.y += _this.height / 2;
            _this.game.physics.box2d.enable(_this);
            _this.body.static = true;
            _this.body.restitution = SuperSoccerNoggins.GameConstants.STAGE_WALLS_RESTITUTION;
            var fixture = _this.body.data.GetFixtureList();
            var filter = fixture.GetFilterData();
            filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_FIELD;
            fixture.SetFilterData(filter);
            _this.anchor.y = .6;
            if (SuperSoccerNoggins.GameVars.getInstance().terrain !== SuperSoccerNoggins.GameConstants.TERRAIN_FLAT) {
                _this.visible = false;
            }
            return _this;
        }
        FlatField.prototype.setCallBackWithBall = function (ball) {
            this.body.setBodyContactCallback(ball.body, this.ballHitField, this);
        };
        FlatField.prototype.ballHitField = function (body1, body2, fixture1, fixture2, begin, contact) {
            var ball = body2.sprite;
            var rnd = Math.floor(Math.random() * 4) + 1;
            if (begin && ball) {
                SuperSoccerNoggins.StageContainer.currentInstance.ballHitStageWalls(ball, contact, SuperSoccerNoggins.GameConstants.SURFACE_FIELD);
                if (ball.isBouncy) {
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect("elastic_ball");
                }
                else {
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect("impacto_" + rnd);
                }
            }
        };
        return FlatField;
    }(Phaser.Sprite));
    SuperSoccerNoggins.FlatField = FlatField;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var Island = (function (_super) {
        __extends(Island, _super);
        function Island(game) {
            var _this = _super.call(this, game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 370, "texture_atlas_season", "terrain-island.png") || this;
            _this.game.physics.box2d.enable(_this);
            _this.anchor.y = 0;
            var body = _this.body;
            body.static = true;
            var fixture = body.setPolygon([-140, 45,
                -85, 6,
                85, 6,
                140, 45]);
            body.restitution = SuperSoccerNoggins.GameConstants.STAGE_WALLS_RESTITUTION;
            body.addRectangle(SuperSoccerNoggins.GameConstants.GAME_WIDTH, 50, 0, 25 + 45);
            var box2dBody = body.data;
            var filter;
            for (var fixture = box2dBody.GetFixtureList(); fixture; fixture = fixture.GetNext()) {
                filter = fixture.GetFilterData();
                filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_FIELD;
                fixture.SetFilterData(filter);
            }
            return _this;
        }
        Island.prototype.setCallBackWithBall = function (ball) {
            this.body.setBodyContactCallback(ball.body, this.ballHitField, this);
        };
        Island.prototype.ballHitField = function (body1, body2, fixture1, fixture2, begin, contact) {
            var ball = body2.sprite;
            var rndNumber = Math.floor(Math.random() * 4) + 1;
            if (begin && ball) {
                SuperSoccerNoggins.StageContainer.currentInstance.ballHitStageWalls(ball, contact, SuperSoccerNoggins.GameConstants.SURFACE_FIELD);
                if (ball.isBouncy) {
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect("elastic_ball");
                }
                else {
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect("impacto_" + rndNumber);
                }
            }
            if (!begin && ball) {
                SuperSoccerNoggins.AdversaryAI.currentInstance.ballJustChangedDirection(ball, "island");
            }
        };
        return Island;
    }(Phaser.Sprite));
    SuperSoccerNoggins.Island = Island;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var SmallIslands = (function (_super) {
        __extends(SmallIslands, _super);
        function SmallIslands(game) {
            var _this = _super.call(this, game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 370, "texture_atlas_season", "terrain-small-islands.png") || this;
            _this.game.physics.box2d.enable(_this);
            var body = _this.body;
            body.static = true;
            body.restitution = SuperSoccerNoggins.GameConstants.STAGE_WALLS_RESTITUTION;
            body.setPolygon([-SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 5,
                100 - SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 5,
                135 - SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 45,
                -SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 45]);
            ;
            body.addPolygon([-90, 15,
                -60, 15,
                -30, 45,
                -120, 45]);
            body.addPolygon([90, 15,
                60, 15,
                30, 45,
                120, 45]);
            body.addPolygon([SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 5,
                SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2 - 100, 5,
                SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2 - 135, 45,
                SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 45]);
            body.addRectangle(SuperSoccerNoggins.GameConstants.GAME_WIDTH, 50, 0, 25 + 45);
            var box2dBody = body.data;
            var filter;
            for (var fixture = box2dBody.GetFixtureList(); fixture; fixture = fixture.GetNext()) {
                filter = fixture.GetFilterData();
                filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_FIELD;
                fixture.SetFilterData(filter);
            }
            _this.anchor.y = 0;
            return _this;
        }
        SmallIslands.prototype.setCallBackWithBall = function (ball) {
            this.body.setBodyContactCallback(ball.body, this.ballHitField, this);
        };
        SmallIslands.prototype.ballHitField = function (body1, body2, fixture1, fixture2, begin, contact) {
            var ball = body2.sprite;
            var rndNumber = Math.floor(Math.random() * 4) + 1;
            if (begin && ball) {
                SuperSoccerNoggins.StageContainer.currentInstance.ballHitStageWalls(ball, contact, SuperSoccerNoggins.GameConstants.SURFACE_FIELD);
                if (ball.isBouncy) {
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect("elastic_ball");
                }
                else {
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect("impacto_" + rndNumber);
                }
            }
            if (!begin && ball) {
                SuperSoccerNoggins.AdversaryAI.currentInstance.ballJustChangedDirection(ball, "small-islands");
            }
        };
        return SmallIslands;
    }(Phaser.Sprite));
    SuperSoccerNoggins.SmallIslands = SmallIslands;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var StageBoundaries = (function (_super) {
        __extends(StageBoundaries, _super);
        function StageBoundaries(game) {
            var _this = _super.call(this, game) || this;
            StageBoundaries.currentInstance = _this;
            _this.stageWalls = new SuperSoccerNoggins.StageWalls(_this.game);
            _this.add(_this.stageWalls);
            _this.flatField = null;
            _this.threeVerticalMovingSlices = null;
            _this.island = null;
            _this.smallIslands = null;
            _this.bigLake = null;
            switch (SuperSoccerNoggins.GameVars.getInstance().terrain) {
                case SuperSoccerNoggins.GameConstants.TERRAIN_SMALL_ISLANDS:
                    _this.smallIslands = new SuperSoccerNoggins.SmallIslands(_this.game);
                    _this.add(_this.smallIslands);
                    break;
                case SuperSoccerNoggins.GameConstants.TERRAIN_BIG_LAKE:
                    _this.bigLake = new SuperSoccerNoggins.BigLake(_this.game);
                    _this.add(_this.bigLake);
                    break;
                case SuperSoccerNoggins.GameConstants.TERRAIN_FLAT:
                    _this.flatField = new SuperSoccerNoggins.FlatField(_this.game);
                    _this.add(_this.flatField);
                    break;
                case SuperSoccerNoggins.GameConstants.TERRAIN_MOVING_SLICES_1:
                case SuperSoccerNoggins.GameConstants.TERRAIN_MOVING_SLICES_2:
                case SuperSoccerNoggins.GameConstants.TERRAIN_MOVING_SLICES_3:
                    _this.threeVerticalMovingSlices = new SuperSoccerNoggins.ThreeVerticalMovingSlices(_this.game);
                    _this.add(_this.threeVerticalMovingSlices);
                    break;
                case SuperSoccerNoggins.GameConstants.TERRAIN_ISLAND:
                    _this.island = new SuperSoccerNoggins.Island(_this.game);
                    _this.add(_this.island);
                    break;
                default:
                    break;
            }
            if (SuperSoccerNoggins.GameVars.getInstance().obstacles !== SuperSoccerNoggins.GameConstants.OBSTACLES_NONE) {
                _this.stageObstacles = new SuperSoccerNoggins.StageObstacles(_this.game);
                _this.add(_this.stageObstacles);
            }
            return _this;
        }
        StageBoundaries.prototype.setCallBacks = function (ball) {
            this.stageWalls.setCallBacks(ball);
            if (this.stageObstacles) {
                this.stageObstacles.setCallBacks(ball);
            }
            switch (SuperSoccerNoggins.GameVars.getInstance().terrain) {
                case SuperSoccerNoggins.GameConstants.TERRAIN_FLAT:
                    this.flatField.setCallBackWithBall(ball);
                    break;
                case SuperSoccerNoggins.GameConstants.TERRAIN_SMALL_ISLANDS:
                    this.smallIslands.setCallBackWithBall(ball);
                    break;
                case SuperSoccerNoggins.GameConstants.TERRAIN_BIG_LAKE:
                    this.bigLake.setCallBackWithBall(ball);
                    break;
                case SuperSoccerNoggins.GameConstants.TERRAIN_ISLAND:
                    this.island.setCallBackWithBall(ball);
                    break;
                case SuperSoccerNoggins.GameConstants.TERRAIN_MOVING_SLICES_1:
                case SuperSoccerNoggins.GameConstants.TERRAIN_MOVING_SLICES_2:
                case SuperSoccerNoggins.GameConstants.TERRAIN_MOVING_SLICES_3:
                    this.threeVerticalMovingSlices.setCallBackWithBall(ball);
                    break;
                default:
                    break;
            }
        };
        StageBoundaries.prototype.setStageObstacles = function () {
            if (this.stageObstacles) {
                this.stageObstacles.destroy(true);
            }
            if (SuperSoccerNoggins.GameVars.getInstance().obstacles !== SuperSoccerNoggins.GameConstants.OBSTACLES_NONE) {
                this.stageObstacles = new SuperSoccerNoggins.StageObstacles(this.game);
                this.add(this.stageObstacles);
            }
            if (SuperSoccerNoggins.BallsManager.currentInstance.ball) {
                this.stageObstacles.setCallBacks(SuperSoccerNoggins.BallsManager.currentInstance.ball);
            }
        };
        return StageBoundaries;
    }(Phaser.Group));
    SuperSoccerNoggins.StageBoundaries = StageBoundaries;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var StageObstacles = (function (_super) {
        __extends(StageObstacles, _super);
        function StageObstacles(game) {
            var _this = _super.call(this, game, null, "stage-obstacles") || this;
            _this.ball = null;
            _this.ballHitBumper = false;
            _this.threeMovingCircles = false;
            _this.bumpers = false;
            switch (SuperSoccerNoggins.GameVars.getInstance().obstacles) {
                case SuperSoccerNoggins.GameConstants.OBSTACLES_ONE_CIRCLE:
                    _this.setOneCircle();
                    break;
                case SuperSoccerNoggins.GameConstants.OBSTACLES_THREE_MOVING_CIRCLES:
                    _this.threeMovingCircles = true;
                    _this.setThreeMovingCircles();
                    break;
                case SuperSoccerNoggins.GameConstants.OBSTACLES_BUMPERS_2:
                    _this.bumpers = true;
                    _this.setBumpers(2);
                    break;
                case SuperSoccerNoggins.GameConstants.OBSTACLES_BUMPERS_3:
                    _this.bumpers = true;
                    _this.setBumpers(3);
                    break;
                default:
                    break;
            }
            return _this;
        }
        StageObstacles.prototype.update = function () {
            if (this.threeMovingCircles) {
                if (this.controlCircle.y < 65 || this.controlCircle.y > 240) {
                    var i = this.movingCircles.length;
                    var circle;
                    while (i--) {
                        circle = this.movingCircles[i];
                        circle.body.velocity.y *= -1;
                    }
                }
            }
            if (this.ballHitBumper) {
                this.ballHitBumper = false;
                var length = Math.sqrt((this.ball.body.velocity.x * this.ball.body.velocity.x) + (this.ball.body.velocity.y * this.ball.body.velocity.y));
                var ballSpeed = 1050;
                this.ball.body.velocity.x = ballSpeed * this.ball.body.velocity.x / length;
                this.ball.body.velocity.y = ballSpeed * this.ball.body.velocity.y / length;
            }
            _super.prototype.update.call(this);
        };
        StageObstacles.prototype.setCallBacks = function (ball) {
            var obstacleSprite;
            for (var i = 0; i < this.length; i++) {
                obstacleSprite = this.getChildAt(i);
                obstacleSprite.body.setBodyContactCallback(ball.body, this.ballHitObstacle, this);
            }
        };
        StageObstacles.prototype.setOneCircle = function () {
            var tournamentID = Math.floor(SuperSoccerNoggins.GameVars.getInstance().matchID / 8);
            var obstacle = new Phaser.Sprite(this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 120, "texture_atlas_season", "obstacle_000" + (tournamentID + 1) + ".png");
            this.add(obstacle);
            this.game.physics.box2d.enable(obstacle);
            var fixture = obstacle.body.setCircle(40);
            obstacle.body.restitution = SuperSoccerNoggins.GameConstants.STAGE_WALLS_RESTITUTION;
            obstacle.body.static = true;
            var filter = fixture.GetFilterData();
            filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_FIELD;
            fixture.SetFilterData(filter);
        };
        StageObstacles.prototype.setThreeMovingCircles = function () {
            this.movingCircles = [];
            var tournamentID = Math.floor(SuperSoccerNoggins.GameVars.getInstance().matchID / 8);
            var movingCircle;
            var px;
            var py;
            for (var i = 0; i < 3; i++) {
                px = StageObstacles.MOVING_CIRCLES_POSITIONS[i][0];
                py = StageObstacles.MOVING_CIRCLES_POSITIONS[i][1];
                movingCircle = new Phaser.Sprite(this.game, px, py, "texture_atlas_season", "obstacle_000" + (tournamentID + 1) + ".png");
                this.add(movingCircle);
                this.movingCircles.push(movingCircle);
                this.game.physics.box2d.enable(movingCircle);
                var fixture = movingCircle.body.setCircle(40);
                movingCircle.body.restitution = SuperSoccerNoggins.GameConstants.STAGE_WALLS_RESTITUTION;
                movingCircle.body.kinematic = true;
                var filter = fixture.GetFilterData();
                filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_FIELD;
                fixture.SetFilterData(filter);
                if (StageObstacles.MOVING_CIRCLES_POSITIONS[i][2] === 1) {
                    movingCircle.body.velocity.y = StageObstacles.CIRCLES_SPEED;
                }
                else {
                    movingCircle.body.velocity.y = -StageObstacles.CIRCLES_SPEED;
                }
            }
            this.controlCircle = movingCircle;
        };
        StageObstacles.prototype.setBumpers = function (n) {
            var bumper;
            var bumperPositions;
            if (n === 2) {
                bumperPositions = StageObstacles.BUMPERS_POSITIONS_2;
            }
            else {
                bumperPositions = StageObstacles.BUMPERS_POSITIONS_3;
            }
            for (var i = 0; i < bumperPositions.length; i++) {
                bumper = this.create(bumperPositions[i][0], bumperPositions[i][1], "texture_atlas_1", "bumper-off.png");
                this.game.physics.box2d.enable(bumper);
                var fixture = bumper.body.setCircle(19.5);
                bumper.body.restitution = SuperSoccerNoggins.GameConstants.BUMPER_RESTITUTION;
                bumper.body.static = true;
                var filter = fixture.GetFilterData();
                filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_FIELD;
                fixture.SetFilterData(filter);
            }
        };
        StageObstacles.prototype.ballHitObstacle = function (body1, body2, fixture1, fixture2, begin, contact) {
            this.ball = body2.sprite;
            if (!this.ball) {
                return;
            }
            if (begin) {
                if (this.bumpers) {
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect("bumper_impact");
                    body1.sprite.frameName = "bumper-on.png";
                    body1.sprite.scale.set(1.1);
                    this.game.time.events.add(200, function (args) {
                        var bumper = args[0];
                        bumper.frameName = "bumper-off.png";
                        bumper.scale.set(1);
                    }, this, [body1.sprite]);
                    SuperSoccerNoggins.StageContainer.currentInstance.ballHitStageWalls(this.ball, contact, SuperSoccerNoggins.GameConstants.SURFACE_BUMPER);
                }
                else {
                    var rndNumber = Math.floor(Math.random() * 4) + 1;
                    if (this.ball.isBouncy) {
                        SuperSoccerNoggins.AudioManager.getInstance().playEffect("elastic_ball");
                    }
                    else {
                        SuperSoccerNoggins.AudioManager.getInstance().playEffect("impacto_" + rndNumber);
                    }
                    SuperSoccerNoggins.StageContainer.currentInstance.ballHitStageWalls(this.ball, contact, SuperSoccerNoggins.GameConstants.SURFACE_STAGE_WALLS);
                }
            }
            else {
                if (this.bumpers) {
                    this.ballHitBumper = true;
                }
                SuperSoccerNoggins.AdversaryAI.currentInstance.ballJustChangedDirection(this.ball);
            }
        };
        return StageObstacles;
    }(Phaser.Group));
    StageObstacles.MOVING_CIRCLES_POSITIONS = [
        [SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2 - 185, 200, -1],
        [SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 200, 1],
        [SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2 + 185, 200, -1]
    ];
    StageObstacles.BUMPERS_POSITIONS_2 = [
        [SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2 - 155, 180],
        [SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2 + 175, 180]
    ];
    StageObstacles.BUMPERS_POSITIONS_3 = [
        [SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2 - 155, 180],
        [SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 135],
        [SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2 + 175, 180]
    ];
    StageObstacles.CIRCLES_SPEED = 15;
    SuperSoccerNoggins.StageObstacles = StageObstacles;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var StageWalls = (function (_super) {
        __extends(StageWalls, _super);
        function StageWalls(game) {
            var _this = _super.call(this, game, null, "stage-walls") || this;
            _this.ceiling = new Phaser.Sprite(_this.game, 0, 0);
            _this.ceiling.visible = false;
            _this.ceiling.name = SuperSoccerNoggins.GameConstants.STAGE_WALLS;
            _this.game.physics.box2d.enable(_this.ceiling);
            var body = _this.ceiling.body;
            body.setRectangle(SuperSoccerNoggins.GameConstants.GAME_WIDTH, 100, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, -46, 0);
            body.addPolygon([0, 0,
                250, 0,
                88, 22,
                20, 90,
                0, 215]);
            body.addPolygon([SuperSoccerNoggins.GameConstants.GAME_WIDTH, 0,
                SuperSoccerNoggins.GameConstants.GAME_WIDTH - 250, 0,
                SuperSoccerNoggins.GameConstants.GAME_WIDTH - 88, 22,
                SuperSoccerNoggins.GameConstants.GAME_WIDTH - 20, 90,
                SuperSoccerNoggins.GameConstants.GAME_WIDTH, 215]);
            body.static = true;
            body.restitution = SuperSoccerNoggins.GameConstants.STAGE_WALLS_RESTITUTION;
            var filter;
            for (var fixture = body.data.GetFixtureList(); fixture; fixture = fixture.GetNext()) {
                filter = fixture.GetFilterData();
                filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_FIELD;
                fixture.SetFilterData(filter);
            }
            _this.add(_this.ceiling);
            _this.rightWall = new Phaser.Sprite(_this.game, 0, 0);
            _this.rightWall.visible = false;
            _this.rightWall.name = SuperSoccerNoggins.GameConstants.STAGE_WALLS;
            _this.game.physics.box2d.enable(_this.rightWall);
            body = _this.rightWall.body;
            fixture = body.setRectangle(100, 200, SuperSoccerNoggins.GameConstants.GAME_WIDTH + 50, 300);
            body.static = true;
            body.restitution = SuperSoccerNoggins.GameConstants.STAGE_WALLS_RESTITUTION;
            filter = fixture.GetFilterData();
            filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_FIELD;
            fixture.SetFilterData(filter);
            _this.add(_this.rightWall);
            _this.leftWall = new Phaser.Sprite(_this.game, 0, 0);
            _this.leftWall.visible = false;
            _this.leftWall.name = SuperSoccerNoggins.GameConstants.STAGE_WALLS;
            _this.game.physics.box2d.enable(_this.leftWall);
            body = _this.leftWall.body;
            fixture = body.setRectangle(100, 200, -50, 300);
            body.static = true;
            body.restitution = SuperSoccerNoggins.GameConstants.STAGE_WALLS_RESTITUTION;
            filter = fixture.GetFilterData();
            filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_FIELD;
            fixture.SetFilterData(filter);
            _this.add(_this.leftWall);
            return _this;
        }
        StageWalls.prototype.setCallBacks = function (ball) {
            this.ceiling.body.setBodyContactCallback(ball.body, this.ballHitWall, this);
            this.leftWall.body.setBodyContactCallback(ball.body, this.ballHitWall, this);
            this.rightWall.body.setBodyContactCallback(ball.body, this.ballHitWall, this);
        };
        StageWalls.prototype.ballHitWall = function (body1, body2, fixture1, fixture2, begin, contact) {
            var ball = body2.sprite;
            if (begin && ball) {
                SuperSoccerNoggins.StageContainer.currentInstance.ballHitStageWalls(ball, contact, SuperSoccerNoggins.GameConstants.SURFACE_STAGE_WALLS);
                var rndNumber = Math.floor(Math.random() * 4) + 1;
                if (ball.isBouncy) {
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect("elastic_ball");
                }
                else {
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect("impacto_" + rndNumber);
                }
            }
            else if (ball) {
                SuperSoccerNoggins.AdversaryAI.currentInstance.ballJustChangedDirection(ball);
            }
        };
        return StageWalls;
    }(Phaser.Group));
    SuperSoccerNoggins.StageWalls = StageWalls;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var ThreeVerticalMovingSlices = (function (_super) {
        __extends(ThreeVerticalMovingSlices, _super);
        function ThreeVerticalMovingSlices(game) {
            var _this = _super.call(this, game, null, "field") || this;
            _this.fieldSlicesHorizontal = [];
            _this.fieldSlicesVertical = [];
            var fieldSlice;
            var fieldHeight = 200;
            var body;
            var fixture;
            var filter;
            for (var i = 0; i < 5; i++) {
                fieldSlice = new Phaser.Sprite(_this.game, i * SuperSoccerNoggins.GameConstants.GAME_WIDTH / 5 + SuperSoccerNoggins.GameConstants.GAME_WIDTH / 10, SuperSoccerNoggins.GameConstants.FLAT_FIELD_Y, "texture_atlas_season", "terrain-clod.png");
                _this.game.physics.box2d.enable(fieldSlice);
                fieldSlice.anchor.y = 0.025;
                body = fieldSlice.body;
                body.kinematic = true;
                fixture = body.setPolygon([-SuperSoccerNoggins.GameConstants.GAME_WIDTH / 10 + 6, 0,
                    SuperSoccerNoggins.GameConstants.GAME_WIDTH / 10 - 6, 0,
                    SuperSoccerNoggins.GameConstants.GAME_WIDTH / 10 - 6, 40,
                    -SuperSoccerNoggins.GameConstants.GAME_WIDTH / 10 + 6, 40]);
                body.restitution = SuperSoccerNoggins.GameConstants.STAGE_WALLS_RESTITUTION;
                filter = fixture.GetFilterData();
                filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_FIELD;
                fixture.SetFilterData(filter);
                _this.fieldSlicesHorizontal.push(fieldSlice);
                _this.add(fieldSlice);
                fieldSlice = new Phaser.Sprite(_this.game, i * SuperSoccerNoggins.GameConstants.GAME_WIDTH / 5 + SuperSoccerNoggins.GameConstants.GAME_WIDTH / 10, SuperSoccerNoggins.GameConstants.FLAT_FIELD_Y);
                fieldSlice.scale.setTo(SuperSoccerNoggins.GameConstants.GAME_WIDTH / 5 / 16, fieldHeight / 16);
                fieldSlice.visible = false;
                _this.game.physics.box2d.enable(fieldSlice);
                body = fieldSlice.body;
                body.kinematic = true;
                body.restitution = SuperSoccerNoggins.GameConstants.STAGE_WALLS_RESTITUTION;
                fixture = body.setPolygon([-SuperSoccerNoggins.GameConstants.GAME_WIDTH / 10, 5,
                    SuperSoccerNoggins.GameConstants.GAME_WIDTH / 10, 5,
                    SuperSoccerNoggins.GameConstants.GAME_WIDTH / 10, fieldHeight,
                    -SuperSoccerNoggins.GameConstants.GAME_WIDTH / 10, fieldHeight]);
                filter = fixture.GetFilterData();
                filter.categoryBits = SuperSoccerNoggins.GameConstants.CATEGORY_FIELD;
                fixture.SetFilterData(filter);
                _this.fieldSlicesVertical.push(fieldSlice);
                _this.add(fieldSlice);
            }
            var verticalSpeed;
            switch (SuperSoccerNoggins.GameVars.getInstance().terrain) {
                case SuperSoccerNoggins.GameConstants.TERRAIN_MOVING_SLICES_1:
                    _this.lowerLimit = 400;
                    _this.upperLimit = 360;
                    verticalSpeed = 7.5;
                    break;
                case SuperSoccerNoggins.GameConstants.TERRAIN_MOVING_SLICES_2:
                    _this.lowerLimit = 410;
                    _this.upperLimit = 340;
                    verticalSpeed = 12.5;
                    break;
                case SuperSoccerNoggins.GameConstants.TERRAIN_MOVING_SLICES_3:
                    _this.lowerLimit = 420;
                    _this.upperLimit = 300;
                    verticalSpeed = 20;
                    break;
                default:
                    break;
            }
            _this.fieldSlicesHorizontal[1].body.velocity.y = -verticalSpeed;
            _this.fieldSlicesHorizontal[2].body.velocity.y = verticalSpeed;
            _this.fieldSlicesHorizontal[3].body.velocity.y = -verticalSpeed;
            _this.fieldSlicesVertical[1].body.velocity.y = -verticalSpeed;
            _this.fieldSlicesVertical[2].body.velocity.y = verticalSpeed;
            _this.fieldSlicesVertical[3].body.velocity.y = -verticalSpeed;
            return _this;
        }
        ThreeVerticalMovingSlices.prototype.update = function () {
            if (this.fieldSlicesHorizontal[1].body.y < this.upperLimit || this.fieldSlicesHorizontal[1].body.y > this.lowerLimit) {
                this.fieldSlicesHorizontal[1].body.velocity.y *= -1;
                this.fieldSlicesHorizontal[2].body.velocity.y *= -1;
                this.fieldSlicesHorizontal[3].body.velocity.y *= -1;
                this.fieldSlicesVertical[1].body.velocity.y *= -1;
                this.fieldSlicesVertical[2].body.velocity.y *= -1;
                this.fieldSlicesVertical[3].body.velocity.y *= -1;
            }
        };
        ThreeVerticalMovingSlices.prototype.setCallBackWithBall = function (ball) {
            var sliceSprite;
            for (var i = 0; i < this.length; i++) {
                sliceSprite = this.getChildAt(i);
                sliceSprite.body.setBodyContactCallback(ball.body, this.ballHitField, this);
            }
        };
        ThreeVerticalMovingSlices.prototype.ballHitField = function (body1, body2, fixture1, fixture2, begin, contact) {
            var ball = body2.sprite;
            if (begin && ball) {
                SuperSoccerNoggins.StageContainer.currentInstance.ballHitStageWalls(ball, contact, SuperSoccerNoggins.GameConstants.SURFACE_FIELD);
                var rnd = Math.floor(Math.random() * 4) + 1;
                SuperSoccerNoggins.AudioManager.getInstance().playEffect("impacto_" + rnd);
            }
            if (!begin && ball) {
                SuperSoccerNoggins.AdversaryAI.currentInstance.ballJustChangedDirection(ball, "moving platforms");
            }
        };
        return ThreeVerticalMovingSlices;
    }(Phaser.Group));
    SuperSoccerNoggins.ThreeVerticalMovingSlices = ThreeVerticalMovingSlices;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var AudioButtonsContainer = (function (_super) {
        __extends(AudioButtonsContainer, _super);
        function AudioButtonsContainer(game) {
            var _this = _super.call(this, game, null, "audio buttons", false) || this;
            _this.musicOnButton = new Phaser.Button(_this.game, -22, 0, "texture_atlas_1", _this.onClickMusicOn, _this, "button-music-on-on.png", "button-music-on-off.png", "button-music-on-on.png");
            _this.musicOnButton.anchor.setTo(.5, .5);
            _this.add(_this.musicOnButton);
            _this.musicOffButton = new Phaser.Button(_this.game, -22, 0, "texture_atlas_1", _this.onClickMusicOff, _this, "button-music-off-on.png", "button-music-off-off.png", "button-music-off-on.png");
            _this.musicOffButton.anchor.setTo(.5, .5);
            _this.add(_this.musicOffButton);
            if (SuperSoccerNoggins.AudioManager.getInstance().isMusicMuted) {
                _this.musicOnButton.visible = false;
            }
            else {
                _this.musicOffButton.visible = false;
            }
            _this.fxOnButton = new Phaser.Button(_this.game, 22, 0, "texture_atlas_1", _this.onClickFxOn, _this, "button-fx-on-on.png", "button-fx-on-off.png", "button-fx-on-on.png");
            _this.fxOnButton.anchor.setTo(.5, .5);
            _this.add(_this.fxOnButton);
            _this.fxOffButton = new Phaser.Button(_this.game, 22, 0, "texture_atlas_1", _this.onClickFxOff, _this, "button-fx-off-on.png", "button-fx-off-off.png", "button-fx-off-on.png");
            _this.fxOffButton.anchor.setTo(.5, .5);
            _this.add(_this.fxOffButton);
            if (SuperSoccerNoggins.AudioManager.getInstance().areEffectsMuted) {
                _this.fxOnButton.visible = false;
            }
            else {
                _this.fxOffButton.visible = false;
            }
            return _this;
        }
        AudioButtonsContainer.prototype.onClickMusicOn = function () {
            this.musicOnButton.visible = false;
            this.musicOffButton.visible = true;
            SuperSoccerNoggins.AudioManager.getInstance().isMusicMuted = true;
        };
        AudioButtonsContainer.prototype.onClickMusicOff = function () {
            this.musicOnButton.visible = true;
            this.musicOffButton.visible = false;
            SuperSoccerNoggins.AudioManager.getInstance().isMusicMuted = false;
        };
        AudioButtonsContainer.prototype.onClickFxOn = function () {
            this.fxOnButton.visible = false;
            this.fxOffButton.visible = true;
            SuperSoccerNoggins.AudioManager.getInstance().areEffectsMuted = true;
        };
        AudioButtonsContainer.prototype.onClickFxOff = function () {
            this.fxOnButton.visible = true;
            this.fxOffButton.visible = false;
            SuperSoccerNoggins.AudioManager.getInstance().areEffectsMuted = false;
        };
        return AudioButtonsContainer;
    }(Phaser.Group));
    SuperSoccerNoggins.AudioButtonsContainer = AudioButtonsContainer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var Boot = (function (_super) {
        __extends(Boot, _super);
        function Boot() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Boot.prototype.init = function () {
            Boot.currentInstance = this;
        };
        Boot.prototype.preload = function () {
            this.load.image("preload-background", "assets/preload-background.jpg");
        };
        Boot.prototype.create = function () {
            this.game.plugins.add(Fabrique.Plugins.CacheBuster);
            this.game.load.cacheBuster = SuperSoccerNoggins.GameConstants.VERSION;
            this.input.maxPointers = 1;
            this.game.stage.disableVisibilityChange = false;
            this.game.stage.backgroundColor = "#000000";
            this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            this.game.scale.pageAlignHorizontally = true;
            if (SuperSoccerNoggins.GameConstants.DEVELOPMENT) {
                this.game.time.advancedTiming = true;
            }
            SuperSoccerNoggins.GameVars.getInstance().init(this.game);
            SuperSoccerNoggins.GameManager.getInstance().init(this.game);
            SuperSoccerNoggins.AchievementsManager.getInstance().init();
            this.game.state.start("PreLoader", true, false);
        };
        return Boot;
    }(Phaser.State));
    Boot.bootedInWrongOrientation = false;
    SuperSoccerNoggins.Boot = Boot;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var FlagStripes = (function (_super) {
        __extends(FlagStripes, _super);
        function FlagStripes(game) {
            var _this = _super.call(this, game, null, "flag-stripes", false) || this;
            var topStripe = new Phaser.Image(_this.game, 0, 0, "texture_atlas_season", "tab_splash.png");
            _this.add(topStripe);
            var bottomStripe = new Phaser.Image(_this.game, 0, 420, "texture_atlas_season", "tab_splash.png");
            bottomStripe.scale.set(1, -1);
            _this.add(bottomStripe);
            _this.topFlags = [];
            _this.bottomFlags = [];
            _this.topFlags[0] = new Phaser.Image(_this.game, 0, 0, "texture_atlas_season", "flags_splash.png");
            _this.topFlags[0].alpha = SuperSoccerNoggins.GameVars.getInstance().christmasVersion ? 1 : .5;
            _this.add(_this.topFlags[0]);
            _this.topFlags[1] = new Phaser.Image(_this.game, -1280, 0, "texture_atlas_season", "flags_splash.png");
            _this.topFlags[1].alpha = SuperSoccerNoggins.GameVars.getInstance().christmasVersion ? 1 : .5;
            _this.add(_this.topFlags[1]);
            _this.bottomFlags[0] = new Phaser.Image(_this.game, -640, 388, "texture_atlas_season", "flags_splash.png");
            _this.add(_this.bottomFlags[0]);
            _this.bottomFlags[0].alpha = SuperSoccerNoggins.GameVars.getInstance().christmasVersion ? 1 : .5;
            _this.bottomFlags[1] = new Phaser.Image(_this.game, 641, 388, "texture_atlas_season", "flags_splash.png");
            _this.bottomFlags[1].alpha = SuperSoccerNoggins.GameVars.getInstance().christmasVersion ? 1 : .5;
            _this.add(_this.bottomFlags[1]);
            return _this;
        }
        FlagStripes.prototype.update = function () {
            _super.prototype.update.call(this);
            this.topFlags[0].x += 0.1;
            this.topFlags[1].x += 0.1;
            this.bottomFlags[0].x -= 0.1;
            this.bottomFlags[1].x -= 0.1;
            if (this.topFlags[0].x > SuperSoccerNoggins.GameConstants.GAME_WIDTH) {
                this.restart("top", 0);
            }
            else if (this.topFlags[1].x > SuperSoccerNoggins.GameConstants.GAME_WIDTH * 2) {
                this.restart("top", 1);
            }
            else if (this.bottomFlags[1].x < -SuperSoccerNoggins.GameConstants.GAME_WIDTH * 2) {
                this.restart("bottom");
            }
        };
        FlagStripes.prototype.restart = function (type, pos) {
            if (type === "top") {
                if (pos === 0) {
                    this.topFlags[0].x = this.topFlags[1].x - 1280;
                    this.bottomFlags[0].x = this.bottomFlags[1].x + 1280;
                }
                else {
                    this.topFlags[1].x = this.topFlags[0].x - 1280;
                }
            }
            else {
                this.bottomFlags[1].x = this.bottomFlags[0].x + 1280;
            }
        };
        return FlagStripes;
    }(Phaser.Group));
    SuperSoccerNoggins.FlagStripes = FlagStripes;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var PreLoader = (function (_super) {
        __extends(PreLoader, _super);
        function PreLoader() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PreLoader.prototype.init = function () {
            PreLoader.currentInstance = this;
            this.ready = false;
            this.assetsLoaded = false;
        };
        PreLoader.prototype.preload = function () {
            Phaser.Canvas.setBackgroundColor(this.game.canvas, "#000000");
            this.generateBitmapData();
            this.composeScene();
            this.loadAssets();
        };
        PreLoader.prototype.create = function () {
            this.assetsLoaded = true;
            SuperSoccerNoggins.GameManager.getInstance().processJSONData();
            SuperSoccerNoggins.AudioManager.getInstance().init(this.game);
            this.startGame();
        };
        PreLoader.prototype.shutdown = function () {
            PreLoader.currentInstance = this;
            _super.prototype.shutdown.call(this);
        };
        PreLoader.prototype.startGame = function () {
            this.game.camera.fade(0x00254f, SuperSoccerNoggins.GameConstants.TIME_FADE_IN_OUT, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start("SplashState", true, false);
            }, this);
        };
        PreLoader.prototype.updateLoadedPercentage = function () {
            this.preloadBar.scale.x = this.load.progress / 100 * 14.45;
        };
        PreLoader.prototype.generateBitmapData = function () {
            var bmd = this.game.add.bitmapData(16, 16, "black-square", true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#000000";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 128, "sky_gradient_background", true);
            var grd = bmd.ctx.createLinearGradient(0, 0, 0, 128);
            grd.addColorStop(0, "#7ec0ee");
            grd.addColorStop(1, "#ffffff");
            bmd.ctx.fillStyle = grd;
            bmd.ctx.fillRect(0, 0, 16, 128);
            bmd = this.game.add.bitmapData(16, 16, SuperSoccerNoggins.GameConstants.WHITE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#ffffff";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 16, SuperSoccerNoggins.GameConstants.GREEN_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#00ff00";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 16, SuperSoccerNoggins.GameConstants.BLUE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#0000ff";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 16, SuperSoccerNoggins.GameConstants.DARK_BLUE_SQUARE, true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#036DC6";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 16, "yellow-square", true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#FFE781";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 16, "dark-square", true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#00495C";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 16, "preload-bar", true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#fc8e00";
            bmd.ctx.fill();
            bmd = this.game.add.bitmapData(16, 16, "blue-achievements", true);
            bmd.ctx.beginPath();
            bmd.ctx.rect(0, 0, 16, 16);
            bmd.ctx.fillStyle = "#6ED1D1";
            bmd.ctx.fill();
        };
        PreLoader.prototype.composeScene = function () {
            this.add.text(0, 0, "abcdefgh", { font: "13px Open Sans", fontWeight: "800", fill: "#000000" });
            this.add.text(0, 100, "abcdefgh", { font: "13px Open Sans", fontWeight: "600", fill: "#000000" });
            this.add.image(0, 0, "preload-background");
            var preloadBarCapsuleShadow = this.add.sprite(SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2 + 2, 395 + 2, this.game.cache.getBitmapData("black-square"));
            preloadBarCapsuleShadow.scale.set(14.65, .85);
            preloadBarCapsuleShadow.anchor.set(.5);
            preloadBarCapsuleShadow.alpha = .45;
            var preloadBarCapsule = this.add.sprite(SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 395, this.game.cache.getBitmapData("white-square"));
            preloadBarCapsule.scale.setTo(14.65, .85);
            preloadBarCapsule.anchor.set(.5);
            this.preloadBar = this.add.sprite(SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2 - 116, 395, this.game.cache.getBitmapData("preload-bar"));
            this.preloadBar.scale.setTo(0, .6);
            this.preloadBar.anchor.set(0, .5);
        };
        PreLoader.prototype.loadAssets = function () {
            if (SuperSoccerNoggins.GameConstants.DEVELOPMENT) {
                this.load.atlas("texture_atlas_0", "assets/texture_atlas_0.png", "assets/texture_atlas_0.json");
            }
            this.load.atlas("texture_atlas_1", "assets/texture_atlas_1.png", "assets/texture_atlas_1.json");
            if (SuperSoccerNoggins.GameVars.getInstance().christmasVersion) {
                this.load.atlas("texture_atlas_season", "assets/texture_atlas_4.png", "assets/texture_atlas_4.json");
            }
            else {
                this.load.atlas("texture_atlas_season", "assets/texture_atlas_3.png", "assets/texture_atlas_3.json");
            }
            this.load.bitmapFont("digital-display", "assets/fonts/digital-display.png", "assets/fonts/digital-display.xml");
            this.load.json("teams-data", "assets/config/teams.json");
            this.load.json("tournaments-data", "assets/config/tournaments.json");
            this.load.json("ai-config", "assets/config/ai.json");
            if (SuperSoccerNoggins.GameVars.getInstance().christmasVersion) {
                this.load.audiosprite("audio-sprite-music", ["assets/audio/xmas-audio-sprite-music.mp3"], "assets/audio/xmas-audio-sprite-music.json");
                this.load.audiosprite("audio-sprite-effects", ["assets/audio/xmas-audio-sprite-effects.mp3"], "assets/audio/xmas-audio-sprite-effects.json");
            }
            else {
                this.load.audiosprite("audio-sprite-music", ["assets/audio/audio-sprite-music.mp3"], "assets/audio/audio-sprite-music.json");
                this.load.audiosprite("audio-sprite-effects", ["assets/audio/audio-sprite-effects.mp3"], "assets/audio/audio-sprite-effects.json");
            }
            this.load.onFileComplete.add(this.updateLoadedPercentage, this);
        };
        return PreLoader;
    }(Phaser.State));
    SuperSoccerNoggins.PreLoader = PreLoader;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var AchievementContainer = (function (_super) {
        __extends(AchievementContainer, _super);
        function AchievementContainer(game, id, progress) {
            var _this = _super.call(this, game, null, "achievement-container") || this;
            var achievementImage;
            var achievementData = SuperSoccerNoggins.AchievementsManager.getInstance().achievementsData;
            var achievementDescriptionStr = achievementData[id].description;
            var frame;
            var creditsLabel = new Phaser.Text(_this.game, 195, 48, SuperSoccerNoggins.GameVars.getInstance().formatNumber(achievementData[id].prize), { font: "12px Open Sans", fontWeight: "800", fill: "#2A3646" });
            _this.add(creditsLabel);
            var credits = new Phaser.Image(_this.game, creditsLabel.x + 62, creditsLabel.y + 5, "texture_atlas_1", "icon-banknotes.png");
            credits.anchor.set(.5);
            credits.scale.set(.85);
            _this.add(credits);
            if (achievementData[id].unlocked) {
                achievementImage = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "achievement_" + (id + 1) + ".png");
                frame = new Phaser.Image(_this.game, achievementImage.x - 5, achievementImage.y - 5, "texture_atlas_1", "frame_achievement_unlocked.png");
            }
            else {
                achievementImage = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "achievement_locked_" + (id + 1) + ".png");
                frame = new Phaser.Image(_this.game, achievementImage.x - 5, achievementImage.y - 5, "texture_atlas_1", "frame_achievement_locked.png");
            }
            _this.add(frame);
            _this.add(achievementImage);
            if (achievementData[id].numeric) {
                if (achievementData[id].achieved >= achievementData[id].goal) {
                    achievementDescriptionStr += " (" + achievementData[id].goal + "/" + achievementData[id].goal + ")";
                }
                else {
                    achievementDescriptionStr += " (" + achievementData[id].achieved + "/" + achievementData[id].goal + ")";
                }
            }
            var i = achievementDescriptionStr.indexOf(":");
            var achievementLabel = new Phaser.Text(_this.game, 65, 15, achievementDescriptionStr.substr(i + 1, achievementDescriptionStr.length), { font: "12px Open Sans", fontWeight: "600", fill: "#2A3646" });
            achievementLabel.wordWrap = true;
            achievementLabel.wordWrapWidth = 215;
            achievementLabel.lineSpacing = -5;
            _this.add(achievementLabel);
            var achievementLabelHeader = new Phaser.Text(_this.game, 65, 0, achievementDescriptionStr.substring(0, i), { font: "12px Open Sans", fontWeight: "800", fill: "#2A3646" });
            _this.add(achievementLabelHeader);
            if (achievementData[id].numeric) {
                i = achievementLabel.text.indexOf("(");
                achievementLabel.addColor("#644143", i);
            }
            return _this;
        }
        return AchievementContainer;
    }(Phaser.Group));
    SuperSoccerNoggins.AchievementContainer = AchievementContainer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var AchievementsState = (function (_super) {
        __extends(AchievementsState, _super);
        function AchievementsState() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AchievementsState.prototype.init = function () {
            AchievementsState.currentInstance = this;
        };
        AchievementsState.prototype.create = function () {
            this.add.image(0, 0, "texture_atlas_season", "match-background-00.png");
            var waterBehind = this.add.image(0, 450, "texture_atlas_1", "water-behind.png");
            waterBehind.anchor.set(0, 1);
            waterBehind.tint = 0x45608F;
            this.add.image(0, 420, "texture_atlas_season", "terrain-island.png").anchor.set(0, 1);
            var waterInFront = this.add.image(0, 459, "texture_atlas_1", "water-behind.png");
            waterInFront.anchor.set(0, 1);
            waterInFront.alpha = 0.8;
            var blueMask = this.add.image(0, 0, this.game.cache.getBitmapData("blue-achievements"));
            blueMask.scale.set(SuperSoccerNoggins.GameConstants.GAME_WIDTH / 16, SuperSoccerNoggins.GameConstants.GAME_HEIGHT / 16);
            blueMask.alpha = 0.6;
            this.add.image(0, 0, "texture_atlas_1", "achievements_tab.png");
            for (var i = 0; i < 2; i++) {
                for (var j = 0; j < 5; j++) {
                    var achievement = new SuperSoccerNoggins.AchievementContainer(this.game, i * 5 + j);
                    achievement.x = 20 + i * 300;
                    achievement.y = 75 + j * 67;
                    this.add.existing(achievement);
                }
            }
            var exitButton = this.add.button(600, 3, "texture_atlas_1", this.onClickExit, this);
            exitButton.setFrames("button-home-on.png", "button-home-off.png", "button-home-on.png");
            this.game.camera.flash(SuperSoccerNoggins.GameConstants.COLOR_FADE_IN_OUT, SuperSoccerNoggins.GameConstants.TIME_FADE_IN_OUT, false);
        };
        AchievementsState.prototype.shutdown = function () {
            AchievementsState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        AchievementsState.prototype.onClickExit = function () {
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
            this.game.camera.fade(SuperSoccerNoggins.GameConstants.COLOR_FADE_IN_OUT, SuperSoccerNoggins.GameConstants.TIME_FADE_IN_OUT, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start("MatchSelectionState", true, false);
            }, this);
        };
        return AchievementsState;
    }(Phaser.State));
    SuperSoccerNoggins.AchievementsState = AchievementsState;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var CreditsState = (function (_super) {
        __extends(CreditsState, _super);
        function CreditsState() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        CreditsState.prototype.init = function () {
            CreditsState.currentInstance = this;
        };
        CreditsState.prototype.create = function () {
            this.leavingScene = false;
            this.add.image(0, 0, "texture_atlas_season", "match-background-00.png");
            var flagStripes = new SuperSoccerNoggins.FlagStripes(this.game);
            this.add.existing(flagStripes);
            var homeButton = this.add.button(600, 40, "texture_atlas_1", this.onClickHomeButton, this, "button-home-on.png", "button-home-off.png", "button-home-on.png");
            homeButton.input.useHandCursor = true;
            var rect = this.add.image(50, 75, this.game.cache.getBitmapData("black-square"));
            rect.scale.set(540 / 16, 300 / 16);
            rect.alpha = 0.35;
            rect.angle = -1;
            this.add.existing(rect);
            var text;
            text = new Phaser.Text(this.game, 130, 75, "A GAME BY RAVALMATIC", { font: "30px Open Sans", fontWeight: "800", fill: "#E5F3EB" });
            text.setShadow(3, 3, "rgba(0,0,0,1)", 0);
            text.angle = -1;
            this.add.existing(text);
            text = new Phaser.Text(this.game, 130, 130, "MUSIC: JAVI DOBLAS", { font: "20px Open Sans", fontWeight: "600", fill: "#E5F3EB" });
            text.setShadow(2, 2, "rgba(0,0,0,1)", 0);
            text.angle = -1;
            this.add.existing(text);
            text = new Phaser.Text(this.game, 130, 130 + 1 * 32, "ART & UX: JAVI SANZ", { font: "20px Open Sans", fontWeight: "600", fill: "#E5F3EB" });
            text.setShadow(2, 2, "rgba(0,0,0,1)", 0);
            text.angle = -1;
            this.add.existing(text);
            text = new Phaser.Text(this.game, 130, 130 + 2 * 32, "PROGRAMMER: E.G. BIANCO ", { font: "20px Open Sans", fontWeight: "600", fill: "#E5F3EB" });
            text.setShadow(2, 2, "rgba(0,0,0,1)", 0);
            text.angle = -1;
            this.add.existing(text);
            text = new Phaser.Text(this.game, 130, 130 + 3 * 32, "TESTERS: L. GRIJANDER AND C. MAIRENA", { font: "20px Open Sans", fontWeight: "600", fill: "#E5F3EB" });
            text.setShadow(2, 2, "rgba(0,0,0,1)", 0);
            text.angle = -1;
            this.add.existing(text);
            text = new Phaser.Text(this.game, 130, 130 + 4 * 32, "GAME DESIGN: ENRIQUETO", { font: "20px Open Sans", fontWeight: "600", fill: "#E5F3EB" });
            text.setShadow(2, 2, "rgba(0,0,0,1)", 0);
            text.angle = -1;
            this.add.existing(text);
            var banana = new Phaser.Image(this.game, 410, 268, "texture_atlas_1", "banana.png");
            banana.anchor.set(0.5);
            banana.scale.set(0.5);
            banana.angle = 6;
            this.add.existing(banana);
            var pulseTween = this.game.add.tween(banana.scale);
            pulseTween.to({ x: 0.55, y: 0.45 }, 300, Phaser.Easing.Linear.None, false);
            pulseTween.delay(250);
            pulseTween.to({ x: 0.45, y: 0.55 }, 700, Phaser.Easing.Elastic.Out);
            pulseTween.loop();
            pulseTween.start();
            text = new Phaser.Text(this.game, 130, 330, "GAME FRAMEWORK: PHASER ", { font: "10px Open Sans", fontWeight: "600", fontStyle: "italic", fill: "#E5F3EB" });
            text.setShadow(1, 1, "rgba(0,0,0,1)", 0);
            text.angle = -1;
            this.add.existing(text);
            text = new Phaser.Text(this.game, 130, 350, "BASED ON SPORTS HEAD FOOTBALL CHAMPIONSHIP ", { font: "10px Open Sans", fontWeight: "600", fontStyle: "italic", fill: "#E5F3EB" });
            text.setShadow(1, 1, "rgba(0,0,0,1)", 0);
            text.angle = -1;
            this.add.existing(text);
            text = new Phaser.Text(this.game, 66, 360, "v " + SuperSoccerNoggins.GameConstants.VERSION, { font: "8px Open Sans", fontWeight: "600", fontStyle: "italic", fill: "#E5F3EB" });
            text.setShadow(1, 1, "rgba(0,0,0,1)", 0);
            text.angle = -1;
            this.add.existing(text);
            var flamencaStr = SuperSoccerNoggins.GameVars.getInstance().christmasVersion ? "xmas_body_flamenca_pale_0001.png" : "body_flamenca_pale_0001.png";
            var bodyFlamenca = this.add.image(500, 355, "texture_atlas_1", flamencaStr);
            bodyFlamenca.anchor.set(0.5);
            flamencaStr = SuperSoccerNoggins.GameVars.getInstance().christmasVersion ? "xmas_body_flamenca_pale_" : "body_flamenca_pale_";
            bodyFlamenca.animations.add("dance", Phaser.Animation.generateFrameNames(flamencaStr, 1, 3, ".png", 4), 8, true);
            bodyFlamenca.play("dance");
            flamencaStr = SuperSoccerNoggins.GameVars.getInstance().christmasVersion ? "xmas_head_flamenca_0030.png" : "head_flamenca_0030.png";
            var headFlamenca = this.add.image(495, 310, "texture_atlas_1", flamencaStr);
            headFlamenca.anchor.set(.5);
        };
        CreditsState.prototype.shutdown = function () {
            CreditsState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        CreditsState.prototype.onClickHomeButton = function () {
            if (this.leavingScene) {
                return;
            }
            this.leavingScene = true;
            this.goToScene("SplashState");
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
        };
        CreditsState.prototype.goToScene = function (nextScene, args) {
            this.game.camera.fade(SuperSoccerNoggins.GameConstants.COLOR_FADE_IN_OUT, SuperSoccerNoggins.GameConstants.TIME_FADE_IN_OUT, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start(nextScene, true, false);
            }, this);
        };
        return CreditsState;
    }(Phaser.State));
    SuperSoccerNoggins.CreditsState = CreditsState;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var FieldConfigurationContainer = (function (_super) {
        __extends(FieldConfigurationContainer, _super);
        function FieldConfigurationContainer(game) {
            var _this = _super.call(this, game, null, "team-selection-container", false) || this;
            _this.randomizing = false;
            var fieldImageName = "field_configuration_" + FieldConfigurationContainer.fieldID + ".png";
            _this.fieldImage = new Phaser.Image(_this.game, 0, -6, "texture_atlas_1", fieldImageName);
            _this.fieldImage.anchor.setTo(.5);
            _this.add(_this.fieldImage);
            var leftArrowButton = new Phaser.Button(_this.game, -110, 38, "texture_atlas_1", _this.onClickArrow, _this);
            leftArrowButton.setFrames("button_arrow_horizontal_on.png", "button_arrow_horizontal_off.png", "button_arrow_horizontal_on.png");
            leftArrowButton.anchor.set(.5);
            leftArrowButton.name = SuperSoccerNoggins.GameConstants.LEFT;
            _this.add(leftArrowButton);
            var rightArrowButton = new Phaser.Button(_this.game, 110, 38, "texture_atlas_1", _this.onClickArrow, _this);
            rightArrowButton.setFrames("button_arrow_horizontal_on.png", "button_arrow_horizontal_off.png", "button_arrow_horizontal_on.png");
            rightArrowButton.anchor.set(.5);
            rightArrowButton.scale.x = -1;
            rightArrowButton.name = SuperSoccerNoggins.GameConstants.RIGHT;
            _this.add(rightArrowButton);
            var randomButton = new Phaser.Button(_this.game, 0, 60, "texture_atlas_1", _this.onClickRandom, _this);
            randomButton.setFrames("button-random-field-on.png", "button-random-field-off.png", "button-random-field-on.png");
            randomButton.anchor.set(.5);
            _this.add(randomButton);
            return _this;
        }
        FieldConfigurationContainer.prototype.update = function () {
            if (this.randomizing) {
                this.framesCounter++;
                if (this.framesCounter % 6 === 0) {
                    var fieldID = Math.floor(Math.random() * 6);
                    this.fieldImage.frameName = "field_configuration_" + fieldID + ".png";
                }
                if (this.framesCounter > 36) {
                    this.setRandomField();
                }
            }
        };
        FieldConfigurationContainer.prototype.onClickArrow = function (b) {
            if (b.name === SuperSoccerNoggins.GameConstants.RIGHT) {
                FieldConfigurationContainer.fieldID = FieldConfigurationContainer.fieldID < SuperSoccerNoggins.GameConstants.PREFAB_FIELDS.length - 1 ? FieldConfigurationContainer.fieldID + 1 : 0;
            }
            else {
                FieldConfigurationContainer.fieldID = FieldConfigurationContainer.fieldID > 0 ? FieldConfigurationContainer.fieldID - 1 : SuperSoccerNoggins.GameConstants.PREFAB_FIELDS.length - 1;
            }
            this.fieldImage.frameName = "field_configuration_" + FieldConfigurationContainer.fieldID + ".png";
        };
        FieldConfigurationContainer.prototype.onClickRandom = function () {
            this.randomizing = true;
            this.framesCounter = 0;
            this.fieldImage.tint = 0xFF7788;
        };
        FieldConfigurationContainer.prototype.setRandomField = function () {
            this.randomizing = false;
            this.fieldImage.tint = 0xFFFFFF;
            FieldConfigurationContainer.fieldID = Math.floor(Math.random() * 6);
            this.fieldImage.frameName = "field_configuration_" + FieldConfigurationContainer.fieldID + ".png";
        };
        return FieldConfigurationContainer;
    }(Phaser.Group));
    FieldConfigurationContainer.fieldID = 0;
    SuperSoccerNoggins.FieldConfigurationContainer = FieldConfigurationContainer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var LocalMultiPlayerState = (function (_super) {
        __extends(LocalMultiPlayerState, _super);
        function LocalMultiPlayerState() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        LocalMultiPlayerState.prototype.init = function () {
            LocalMultiPlayerState.currentInstance = this;
        };
        LocalMultiPlayerState.prototype.create = function () {
            this.leavingScene = false;
            this.add.image(0, 0, "texture_atlas_1", "multiplayer_bg.png");
            var homeButton = this.add.button(600, 4, "texture_atlas_1", this.onClickHomeButton, this, "button-home-on.png", "button-home-off.png", "button-home-on.png");
            homeButton.input.useHandCursor = true;
            var teamSel_dx = 148;
            var teamSel_py = 100;
            this.playerLeftTeamSelContainer = new SuperSoccerNoggins.TeamSelectionContainer(this.game, true);
            this.playerLeftTeamSelContainer.x = SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2 - teamSel_dx;
            this.playerLeftTeamSelContainer.y = teamSel_py;
            this.add.existing(this.playerLeftTeamSelContainer);
            this.playerRightTeamSelContainer = new SuperSoccerNoggins.TeamSelectionContainer(this.game, false);
            this.playerRightTeamSelContainer.x = SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2 + teamSel_dx;
            this.playerRightTeamSelContainer.y = teamSel_py;
            this.add.existing(this.playerRightTeamSelContainer);
            this.nogginSkillsSelectionContainer = new SuperSoccerNoggins.NogginSkillsSelectionContainer(this.game);
            this.nogginSkillsSelectionContainer.x = SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2;
            this.nogginSkillsSelectionContainer.y = 70;
            this.add.existing(this.nogginSkillsSelectionContainer);
            var matchTypeSelector = new SuperSoccerNoggins.MatchTypeSelector(this.game);
            matchTypeSelector.x = 115;
            matchTypeSelector.y = 330;
            this.add.existing(matchTypeSelector);
            var fieldConfigurationContainer = new SuperSoccerNoggins.FieldConfigurationContainer(this.game);
            fieldConfigurationContainer.x = 385;
            fieldConfigurationContainer.y = 335;
            this.add.existing(fieldConfigurationContainer);
            var star = this.add.image(585, 365, "texture_atlas_1", "star-briefcase.png");
            star.anchor.set(.5);
            star.scale.set(.36);
            this.game.add.tween(star.scale)
                .to({ x: .4, y: .4 }, 500, Phaser.Easing.Cubic.Out, true, 0, -1, true);
            var playButton = this.add.button(595, 365, "texture_atlas_1", this.onClickPlay, this);
            playButton.setFrames("button-next-on.png", "button-next-off.png", "button-next-on.png");
            playButton.anchor.set(.5);
            playButton.scale.set(1.35);
            playButton.angle = -5;
            this.game.add.tween(playButton)
                .to({ angle: 5 }, 3500, Phaser.Easing.Cubic.Out, true, 0, -1, true);
        };
        LocalMultiPlayerState.prototype.shutdown = function () {
            LocalMultiPlayerState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        LocalMultiPlayerState.prototype.startPVPMatch = function () {
            this.game.camera.fade(SuperSoccerNoggins.GameConstants.COLOR_FADE_IN_OUT, SuperSoccerNoggins.GameConstants.TIME_FADE_IN_OUT, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start("MatchState");
            }, this);
        };
        LocalMultiPlayerState.prototype.onClickHomeButton = function () {
            if (this.leavingScene) {
                return;
            }
            this.leavingScene = true;
            this.game.camera.fade(SuperSoccerNoggins.GameConstants.COLOR_FADE_IN_OUT, SuperSoccerNoggins.GameConstants.TIME_FADE_IN_OUT, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start("SplashState", true, false);
            }, this);
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
        };
        LocalMultiPlayerState.prototype.onClickPlay = function (b) {
            if (this.leavingScene) {
                return;
            }
            this.leavingScene = true;
            b.clearFrames();
            var prefabFieldData = SuperSoccerNoggins.GameConstants.PREFAB_FIELDS[SuperSoccerNoggins.FieldConfigurationContainer.fieldID];
            var configurationData = {
                adversaryTeamID: SuperSoccerNoggins.TeamSelectionContainer.leftTeamID,
                playerTeamID: SuperSoccerNoggins.TeamSelectionContainer.rightTeamID,
                jumpIndex: SuperSoccerNoggins.NogginSkillsSelectionContainer.jumpIndex,
                rushIndex: SuperSoccerNoggins.NogginSkillsSelectionContainer.rushIndex,
                backtrackIndex: SuperSoccerNoggins.NogginSkillsSelectionContainer.backtrackIndex,
                kickIndex: SuperSoccerNoggins.NogginSkillsSelectionContainer.kickIndex,
                terrain: prefabFieldData.terrain,
                water: prefabFieldData.water,
                obstacles: prefabFieldData.obstacles,
                powerUps: prefabFieldData.powerUps,
                matchType: SuperSoccerNoggins.MatchTypeSelector.currentMatchType
            };
            SuperSoccerNoggins.GameManager.getInstance().localMultiplayerSelected(configurationData);
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
        };
        return LocalMultiPlayerState;
    }(Phaser.State));
    SuperSoccerNoggins.LocalMultiPlayerState = LocalMultiPlayerState;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var MatchTypeSelector = (function (_super) {
        __extends(MatchTypeSelector, _super);
        function MatchTypeSelector(game) {
            var _this = _super.call(this, game, null, "match-type-selector", false) || this;
            _this.arrow = new Phaser.Image(_this.game, 72, -46, "texture_atlas_1", "arrow_white.png");
            _this.arrow.anchor.set(.5);
            _this.arrow.angle = 180;
            _this.add(_this.arrow);
            _this.marker = new Phaser.Image(_this.game, 0, -46, "texture_atlas_1", "selected_frame.png");
            _this.marker.anchor.set(.5);
            _this.add(_this.marker);
            var firstToSevenIcon = new Phaser.Image(_this.game, -84, -46, "texture_atlas_1", "icon_first_to_seven.png");
            firstToSevenIcon.anchor.set(.5);
            _this.add(firstToSevenIcon);
            var firstToSevenButton = new Phaser.Button(_this.game, 0, -46, "texture_atlas_1", _this.onClickMatchButton, _this);
            firstToSevenButton.setFrames("button_first_to_seven_match_on.png", "button_first_to_seven_match_off.png", "button_first_to_seven_match_on.png");
            firstToSevenButton.anchor.set(.5);
            firstToSevenButton.name = SuperSoccerNoggins.GameConstants.FIRST_TO_SEVEN_MATCH;
            _this.add(firstToSevenButton);
            var timedIcon = new Phaser.Image(_this.game, -84, 0, "texture_atlas_1", "icon_timed_match.png");
            timedIcon.anchor.set(.5);
            _this.add(timedIcon);
            var timedButton = new Phaser.Button(_this.game, 0, 0, "texture_atlas_1", _this.onClickMatchButton, _this);
            timedButton.setFrames("button_timed_match_on.png", "button_timed_match_off.png", "button_timed_match_on.png");
            timedButton.anchor.set(.5);
            timedButton.name = SuperSoccerNoggins.GameConstants.TIMED_MATCH;
            _this.add(timedButton);
            var goldenGoalIcon = new Phaser.Image(_this.game, -84, 46, "texture_atlas_1", "icon_golden_goal.png");
            goldenGoalIcon.anchor.set(.5);
            _this.add(goldenGoalIcon);
            var goldenGoalButton = new Phaser.Button(_this.game, 0, 46, "texture_atlas_1", _this.onClickMatchButton, _this);
            goldenGoalButton.setFrames("button_golden_goal_match_on.png", "button_golden_goal_match_off.png", "button_golden_goal_match_on.png");
            goldenGoalButton.anchor.set(.5);
            goldenGoalButton.name = SuperSoccerNoggins.GameConstants.GOLDEN_GOAL_MATCH;
            _this.add(goldenGoalButton);
            _this.setMarker();
            return _this;
        }
        MatchTypeSelector.prototype.setMarker = function () {
            switch (MatchTypeSelector.currentMatchType) {
                case SuperSoccerNoggins.GameConstants.FIRST_TO_SEVEN_MATCH:
                    this.arrow.y = -46;
                    this.marker.y = -46;
                    break;
                case SuperSoccerNoggins.GameConstants.TIMED_MATCH:
                    this.arrow.y = 0;
                    this.marker.y = 0;
                    break;
                case SuperSoccerNoggins.GameConstants.GOLDEN_GOAL_MATCH:
                    this.arrow.y = 46;
                    this.marker.y = 46;
                    break;
                default:
                    break;
            }
        };
        MatchTypeSelector.prototype.onClickMatchButton = function (b) {
            switch (b.name) {
                case SuperSoccerNoggins.GameConstants.FIRST_TO_SEVEN_MATCH:
                    MatchTypeSelector.currentMatchType = SuperSoccerNoggins.GameConstants.FIRST_TO_SEVEN_MATCH;
                    break;
                case SuperSoccerNoggins.GameConstants.TIMED_MATCH:
                    MatchTypeSelector.currentMatchType = SuperSoccerNoggins.GameConstants.TIMED_MATCH;
                    break;
                case SuperSoccerNoggins.GameConstants.GOLDEN_GOAL_MATCH:
                    MatchTypeSelector.currentMatchType = SuperSoccerNoggins.GameConstants.GOLDEN_GOAL_MATCH;
                    break;
                default:
                    break;
            }
            this.setMarker();
        };
        return MatchTypeSelector;
    }(Phaser.Group));
    MatchTypeSelector.currentMatchType = SuperSoccerNoggins.GameConstants.FIRST_TO_SEVEN_MATCH;
    SuperSoccerNoggins.MatchTypeSelector = MatchTypeSelector;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var NogginSkillsSelectionContainer = (function (_super) {
        __extends(NogginSkillsSelectionContainer, _super);
        function NogginSkillsSelectionContainer(game) {
            var _this = _super.call(this, game, null, "noggin-skill-selection-container", false) || this;
            var px = -66;
            var py = -60;
            var dy = 48;
            var rush = new SuperSoccerNoggins.SkillsContainer(_this.game, SuperSoccerNoggins.GameConstants.ABILITY_RUSH);
            rush.x = px;
            rush.y = py;
            _this.add(rush);
            var backtrack = new SuperSoccerNoggins.SkillsContainer(_this.game, SuperSoccerNoggins.GameConstants.ABILITY_BACKTRACK);
            backtrack.x = px;
            backtrack.y = py + dy;
            _this.add(backtrack);
            var jump = new SuperSoccerNoggins.SkillsContainer(_this.game, SuperSoccerNoggins.GameConstants.ABILITY_JUMP);
            jump.x = px;
            jump.y = py + 2 * dy;
            _this.add(jump);
            var kick = new SuperSoccerNoggins.SkillsContainer(_this.game, SuperSoccerNoggins.GameConstants.ABILITY_KICK);
            kick.x = px;
            kick.y = py + 3 * dy;
            _this.add(kick);
            return _this;
        }
        return NogginSkillsSelectionContainer;
    }(Phaser.Group));
    NogginSkillsSelectionContainer.rushIndex = 3;
    NogginSkillsSelectionContainer.backtrackIndex = 3;
    NogginSkillsSelectionContainer.jumpIndex = 3;
    NogginSkillsSelectionContainer.kickIndex = 3;
    SuperSoccerNoggins.NogginSkillsSelectionContainer = NogginSkillsSelectionContainer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var SkillsContainer = (function (_super) {
        __extends(SkillsContainer, _super);
        function SkillsContainer(game, skill) {
            var _this = _super.call(this, game, null, "noggin-skill-selection-container", false) || this;
            _this.skill = skill;
            var abilityLabel = new Phaser.Text(_this.game, 16, 6, _this.skill, { font: "14px Open Sans", fontWeight: "600", fill: "#D2F2EA" });
            abilityLabel.scale.x = .8;
            _this.add(abilityLabel);
            var icon = new Phaser.Image(_this.game, 100, 10, "texture_atlas_1", null);
            icon.anchor.set(.5);
            _this.add(icon);
            switch (_this.skill) {
                case SuperSoccerNoggins.GameConstants.ABILITY_RUSH:
                    icon.frameName = "icon_rush.png";
                    _this.skillIndex = SuperSoccerNoggins.NogginSkillsSelectionContainer.rushIndex;
                    break;
                case SuperSoccerNoggins.GameConstants.ABILITY_BACKTRACK:
                    icon.frameName = "icon_backtrack.png";
                    _this.skillIndex = SuperSoccerNoggins.NogginSkillsSelectionContainer.backtrackIndex;
                    break;
                case SuperSoccerNoggins.GameConstants.ABILITY_JUMP:
                    icon.frameName = "icon_jump.png";
                    _this.skillIndex = SuperSoccerNoggins.NogginSkillsSelectionContainer.jumpIndex;
                    break;
                case SuperSoccerNoggins.GameConstants.ABILITY_KICK:
                    icon.frameName = "icon_kick.png";
                    _this.skillIndex = SuperSoccerNoggins.NogginSkillsSelectionContainer.kickIndex;
                    break;
                default:
                    break;
            }
            _this.skillGradeImage = new Phaser.Image(_this.game, 14, 28, "texture_atlas_1", "upgrade_" + _this.skillIndex + ".png");
            _this.add(_this.skillGradeImage);
            _this.minusButton = new Phaser.Button(_this.game, -5, 32, "texture_atlas_1", _this.onClickPlusMinusButton, _this);
            _this.minusButton.setFrames("button-minus-on.png", "button-minus-off.png", "button-minus-on.png");
            _this.minusButton.anchor.set(.5);
            _this.minusButton.name = SkillsContainer.MINUS;
            _this.add(_this.minusButton);
            _this.plusButton = new Phaser.Button(_this.game, 135, 32, "texture_atlas_1", _this.onClickPlusMinusButton, _this);
            _this.plusButton.setFrames("button-plus-on.png", "button-plus-off.png", "button-plus-on.png");
            _this.plusButton.anchor.set(.5);
            _this.plusButton.name = SkillsContainer.PLUS;
            _this.add(_this.plusButton);
            _this.setButtons();
            return _this;
        }
        SkillsContainer.prototype.onClickPlusMinusButton = function (b) {
            if (b.name === SkillsContainer.PLUS) {
                this.skillIndex++;
            }
            else {
                this.skillIndex--;
            }
            this.setButtons();
            this.skillGradeImage.frameName = "upgrade_" + this.skillIndex + ".png";
            switch (this.skill) {
                case SuperSoccerNoggins.GameConstants.ABILITY_RUSH:
                    SuperSoccerNoggins.NogginSkillsSelectionContainer.rushIndex = this.skillIndex;
                    break;
                case SuperSoccerNoggins.GameConstants.ABILITY_BACKTRACK:
                    SuperSoccerNoggins.NogginSkillsSelectionContainer.backtrackIndex = this.skillIndex;
                    break;
                case SuperSoccerNoggins.GameConstants.ABILITY_JUMP:
                    SuperSoccerNoggins.NogginSkillsSelectionContainer.jumpIndex = this.skillIndex;
                    break;
                case SuperSoccerNoggins.GameConstants.ABILITY_KICK:
                    SuperSoccerNoggins.NogginSkillsSelectionContainer.kickIndex = this.skillIndex;
                    break;
                default:
            }
        };
        SkillsContainer.prototype.setButtons = function () {
            if (this.skillIndex === 5) {
                this.plusButton.inputEnabled = false;
                this.plusButton.alpha = .5;
            }
            else if (this.skillIndex === 1) {
                this.minusButton.inputEnabled = false;
                this.minusButton.alpha = .5;
            }
            else {
                this.plusButton.inputEnabled = true;
                this.plusButton.alpha = 1;
                this.minusButton.inputEnabled = true;
                this.minusButton.alpha = 1;
            }
        };
        return SkillsContainer;
    }(Phaser.Group));
    SkillsContainer.PLUS = "plus";
    SkillsContainer.MINUS = "minus";
    SuperSoccerNoggins.SkillsContainer = SkillsContainer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var TeamSelectionContainer = (function (_super) {
        __extends(TeamSelectionContainer, _super);
        function TeamSelectionContainer(game, leftPlayer) {
            var _this = _super.call(this, game, null, "team-selection-container", false) || this;
            _this.leftPlayer = leftPlayer;
            var teamID;
            if (_this.leftPlayer) {
                teamID = TeamSelectionContainer.leftTeamID;
            }
            else {
                teamID = TeamSelectionContainer.rightTeamID;
            }
            _this.teamName = new Phaser.Text(_this.game, 0, -40, SuperSoccerNoggins.GameVars.getInstance().teamsData[teamID].name.toUpperCase(), { font: "18px Open Sans", fontWeight: "800", fill: "#1A3544", stroke: "#C6F4F7", strokeThickness: 0 });
            _this.teamName.scale.x = _this.teamName.text.length > 9 ? .5 : .65;
            _this.teamName.anchor.set(.5);
            _this.add(_this.teamName);
            _this.nogginContainer = new Phaser.Group(_this.game);
            _this.nogginContainer.y = 60;
            _this.add(_this.nogginContainer);
            var headTextureName;
            var bodyTextureName;
            if (teamID + 1 < 10) {
                headTextureName = "head_000" + (teamID + 1).toString() + ".png";
                bodyTextureName = "body_01_000" + (teamID + 1).toString() + ".png";
            }
            else {
                headTextureName = "head_00" + (teamID + 1).toString() + ".png";
                bodyTextureName = "body_01_00" + (teamID + 1).toString() + ".png";
            }
            _this.nogginBodyImage = new Phaser.Image(_this.game, 0, 10, "texture_atlas_1", bodyTextureName);
            _this.nogginBodyImage.anchor.setTo(.5, 1);
            if (leftPlayer) {
                _this.nogginBodyImage.scale.set(-1.4, 1.4);
            }
            else {
                _this.nogginBodyImage.scale.set(1.4);
            }
            _this.nogginContainer.add(_this.nogginBodyImage);
            _this.nogginHeadImage = new Phaser.Image(_this.game, -8, -80, "texture_atlas_1", headTextureName);
            _this.nogginHeadImage.anchor.x = .37;
            _this.nogginHeadImage.x = _this.leftPlayer ? 8 : -8;
            _this.nogginHeadImage.scale.x = _this.leftPlayer ? -1 : 1;
            _this.nogginContainer.add(_this.nogginHeadImage);
            var upArrowButton = new Phaser.Button(_this.game, leftPlayer ? -52 : 52, 0, "texture_atlas_1", _this.onClickArrow, _this);
            upArrowButton.setFrames("button_arrow_vertical_on.png", "button_arrow_vertical_off.png", "button_arrow_vertical_on.png");
            upArrowButton.anchor.set(.5);
            upArrowButton.scale.y = -1;
            upArrowButton.name = SuperSoccerNoggins.GameConstants.LEFT;
            _this.add(upArrowButton);
            var downArrowButton = new Phaser.Button(_this.game, leftPlayer ? -52 : 52, 40, "texture_atlas_1", _this.onClickArrow, _this);
            downArrowButton.setFrames("button_arrow_vertical_on.png", "button_arrow_vertical_off.png", "button_arrow_vertical_on.png");
            downArrowButton.anchor.set(.5);
            downArrowButton.name = SuperSoccerNoggins.GameConstants.RIGHT;
            _this.add(downArrowButton);
            if (_this.leftPlayer) {
                _this.addKeysButtons();
            }
            else {
                _this.addArrowsSign();
            }
            _this.game.time.events.add(Math.random() * 1000 + 1000, _this.shake, _this);
            return _this;
        }
        TeamSelectionContainer.prototype.shake = function () {
            if (!this.game) {
                return;
            }
            var nogginTween = this.game.add.tween(this.nogginContainer.scale);
            nogginTween.to({ x: 1.03, y: .94 }, 300, Phaser.Easing.Linear.None, false);
            nogginTween.delay(400);
            nogginTween.to({ x: 1, y: 1 }, 700, Phaser.Easing.Elastic.Out);
            nogginTween.start();
            this.game.time.events.add(Math.random() * 2000 + 2000, this.shake, this);
        };
        TeamSelectionContainer.prototype.onClickArrow = function (b) {
            var teamID;
            if (this.leftPlayer) {
                if (b.name === SuperSoccerNoggins.GameConstants.RIGHT) {
                    TeamSelectionContainer.leftTeamID = TeamSelectionContainer.leftTeamID < 29 ? TeamSelectionContainer.leftTeamID + 1 : 0;
                }
                else {
                    TeamSelectionContainer.leftTeamID = TeamSelectionContainer.leftTeamID > 0 ? TeamSelectionContainer.leftTeamID - 1 : 20;
                }
                teamID = TeamSelectionContainer.leftTeamID;
            }
            else {
                if (b.name === SuperSoccerNoggins.GameConstants.RIGHT) {
                    TeamSelectionContainer.rightTeamID = TeamSelectionContainer.rightTeamID < 29 ? TeamSelectionContainer.rightTeamID + 1 : 0;
                }
                else {
                    TeamSelectionContainer.rightTeamID = TeamSelectionContainer.rightTeamID > 0 ? TeamSelectionContainer.rightTeamID - 1 : 20;
                }
                teamID = TeamSelectionContainer.rightTeamID;
            }
            if (teamID + 1 < 10) {
                this.nogginHeadImage.frameName = "head_000" + (teamID + 1).toString() + ".png";
                this.nogginBodyImage.frameName = "body_01_000" + (teamID + 1).toString() + ".png";
            }
            else {
                this.nogginHeadImage.frameName = "head_00" + (teamID + 1).toString() + ".png";
                this.nogginBodyImage.frameName = "body_01_00" + (teamID + 1).toString() + ".png";
            }
            this.teamName.text = SuperSoccerNoggins.GameVars.getInstance().teamsData[teamID].name.toUpperCase();
            this.teamName.scale.x = this.teamName.text.length > 9 ? .5 : .65;
        };
        TeamSelectionContainer.prototype.addKeysButtons = function () {
            this.wasdImage = new Phaser.Image(this.game, -110, -6, "texture_atlas_1", "controls_wasd.png");
            this.wasdImage.anchor.set(.5);
            this.wasdImage.name = SuperSoccerNoggins.GameConstants.WASD;
            this.wasdImage.events.onInputDown.add(this.onClickKeysButton, this);
            this.add(this.wasdImage);
            this.zqsdImage = new Phaser.Image(this.game, -110, 55, "texture_atlas_1", "controls_zqsd.png");
            this.zqsdImage.anchor.set(.5);
            this.zqsdImage.name = SuperSoccerNoggins.GameConstants.ZQSD;
            this.zqsdImage.events.onInputDown.add(this.onClickKeysButton, this);
            this.add(this.zqsdImage);
            this.arrow = new Phaser.Image(this.game, -160, -6, "texture_atlas_1", "arrow_white.png");
            this.arrow.anchor.set(.5);
            this.add(this.arrow);
            this.setKeysButtons();
        };
        TeamSelectionContainer.prototype.addArrowsSign = function () {
            var arrowsControlsImage = new Phaser.Image(this.game, 85, 0, "texture_atlas_1", "controls_arrows.png");
            this.add(arrowsControlsImage);
        };
        TeamSelectionContainer.prototype.onClickKeysButton = function (img) {
            if (img.name === SuperSoccerNoggins.GameConstants.WASD) {
                TeamSelectionContainer.keysConfiguration = SuperSoccerNoggins.GameConstants.WASD;
            }
            else {
                TeamSelectionContainer.keysConfiguration = SuperSoccerNoggins.GameConstants.ZQSD;
            }
            this.setKeysButtons();
        };
        TeamSelectionContainer.prototype.setKeysButtons = function () {
            if (TeamSelectionContainer.keysConfiguration === SuperSoccerNoggins.GameConstants.WASD) {
                this.wasdImage.inputEnabled = false;
                this.wasdImage.tint = 0xFFFFFF;
                this.zqsdImage.inputEnabled = true;
                this.zqsdImage.input.useHandCursor = true;
                this.zqsdImage.tint = 0x247E8E;
                this.arrow.y = -6;
            }
            else {
                this.wasdImage.inputEnabled = true;
                this.wasdImage.input.useHandCursor = true;
                this.wasdImage.tint = 0x247E8E;
                this.zqsdImage.inputEnabled = false;
                this.zqsdImage.tint = 0xFFFFFF;
                this.arrow.y = 55;
            }
        };
        return TeamSelectionContainer;
    }(Phaser.Group));
    TeamSelectionContainer.leftTeamID = 0;
    TeamSelectionContainer.rightTeamID = 0;
    TeamSelectionContainer.keysConfiguration = SuperSoccerNoggins.GameConstants.WASD;
    SuperSoccerNoggins.TeamSelectionContainer = TeamSelectionContainer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var AbilityContainer = (function (_super) {
        __extends(AbilityContainer, _super);
        function AbilityContainer(game, abilityType) {
            var _this = _super.call(this, game, null, "ability-container") || this;
            _this.abilityType = abilityType;
            var abilityLabel = new Phaser.Text(_this.game, 16, 4, abilityType, { font: "13px Open Sans", fontWeight: "800", fill: "#C6F4F7" });
            abilityLabel.scale.x = .85;
            _this.add(abilityLabel);
            var icon = new Phaser.Image(_this.game, 88, -5, "texture_atlas_1", null);
            var abilityGrade = _this.getAbilityGrade();
            switch (_this.abilityType) {
                case SuperSoccerNoggins.GameConstants.ABILITY_RUSH:
                    icon.frameName = "icon_rush.png";
                    break;
                case SuperSoccerNoggins.GameConstants.ABILITY_BACKTRACK:
                    icon.frameName = "icon_backtrack.png";
                    break;
                case SuperSoccerNoggins.GameConstants.ABILITY_JUMP:
                    icon.frameName = "icon_jump.png";
                    break;
                case SuperSoccerNoggins.GameConstants.ABILITY_KICK:
                    icon.frameName = "icon_kick.png";
                    break;
                default:
                    break;
            }
            _this.add(icon);
            _this.abilityGradeImage = new Phaser.Image(_this.game, 16, 28, "texture_atlas_1", "upgrade_" + abilityGrade + ".png");
            _this.add(_this.abilityGradeImage);
            var buyButton_px = 126;
            var buyButton_py = 0;
            _this.buyButton = new Phaser.Button(_this.game, buyButton_px, buyButton_py, "texture_atlas_1", _this.onClickBuy, _this);
            _this.buyButton.setFrames("button-buy-upgrade-on.png", "button-buy-upgrade-off.png", "button-buy-upgrade-on.png");
            _this.buyButton.name = _this.abilityType;
            _this.add(_this.buyButton);
            _this.setUpgradePrice(abilityGrade);
            _this.priceLabel = new Phaser.Text(_this.game, buyButton_px + 5, buyButton_py + 4, SuperSoccerNoggins.GameVars.getInstance().formatNumber(_this.upgradePrice), { font: "15px Open Sans", fontWeight: "800", fill: "#4D1400" });
            _this.add(_this.priceLabel);
            if (abilityGrade === 5) {
                _this.buyButton.inputEnabled = false;
                _this.buyButton.alpha = .4;
                _this.priceLabel.alpha = .4;
            }
            if (_this.upgradePrice < SuperSoccerNoggins.GameVars.getInstance().credits && abilityGrade !== 5) {
                _this.abilityGradeImageHighlighted = new Phaser.Image(_this.game, 9, 19, "texture_atlas_1", "progress_bar_lights_" + abilityGrade + ".png");
                _this.add(_this.abilityGradeImageHighlighted);
                _this.game.add.tween(_this.abilityGradeImageHighlighted)
                    .to({ alpha: 0 }, 500, Phaser.Easing.Cubic.Out, true, 0, -1, true);
            }
            else {
                _this.abilityGradeImageHighlighted = null;
            }
            return _this;
        }
        AbilityContainer.prototype.purchased = function () {
            var abilityGrade = this.getAbilityGrade();
            this.setUpgradePrice(abilityGrade);
            this.abilityGradeImage.frameName = "upgrade_" + abilityGrade + ".png";
            this.priceLabel.text = SuperSoccerNoggins.GameVars.getInstance().formatNumber(this.upgradePrice);
            if (abilityGrade === 5) {
                this.buyButton.inputEnabled = false;
                this.buyButton.alpha = .4;
                this.priceLabel.alpha = .4;
            }
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("buy_upgrade");
        };
        AbilityContainer.prototype.updateUpgradeBar = function () {
            var abilityGrade = this.getAbilityGrade();
            if (this.upgradePrice < SuperSoccerNoggins.GameVars.getInstance().credits && abilityGrade !== 5) {
                this.abilityGradeImageHighlighted.frameName = "progress_bar_lights_" + abilityGrade + ".png";
            }
            else {
                if (this.abilityGradeImageHighlighted !== null) {
                    this.abilityGradeImageHighlighted.destroy();
                    this.abilityGradeImageHighlighted = null;
                }
            }
        };
        AbilityContainer.prototype.onClickBuy = function (b) {
            if (SuperSoccerNoggins.ThreadMill.syringeAnimationActive) {
                return;
            }
            SuperSoccerNoggins.GameManager.getInstance().onBuyAbility(b.name, this.upgradePrice);
        };
        AbilityContainer.prototype.getAbilityGrade = function () {
            var abilityGrade;
            switch (this.abilityType) {
                case SuperSoccerNoggins.GameConstants.ABILITY_RUSH:
                    abilityGrade = SuperSoccerNoggins.GameVars.getInstance().playerRushIndex;
                    break;
                case SuperSoccerNoggins.GameConstants.ABILITY_BACKTRACK:
                    abilityGrade = SuperSoccerNoggins.GameVars.getInstance().playerBacktrackIndex;
                    break;
                case SuperSoccerNoggins.GameConstants.ABILITY_JUMP:
                    abilityGrade = SuperSoccerNoggins.GameVars.getInstance().playerJumpIndex;
                    break;
                case SuperSoccerNoggins.GameConstants.ABILITY_KICK:
                    abilityGrade = SuperSoccerNoggins.GameVars.getInstance().playerKickIndex;
                    break;
                default:
                    break;
            }
            return abilityGrade;
        };
        AbilityContainer.prototype.setUpgradePrice = function (abilityGrade) {
            switch (abilityGrade) {
                case 1:
                    this.upgradePrice = SuperSoccerNoggins.GameConstants.UPGRADE_2_PRICE;
                    break;
                case 2:
                    this.upgradePrice = SuperSoccerNoggins.GameConstants.UPGRADE_3_PRICE;
                    break;
                case 3:
                    this.upgradePrice = SuperSoccerNoggins.GameConstants.UPGRADE_4_PRICE;
                    break;
                case 4:
                    this.upgradePrice = SuperSoccerNoggins.GameConstants.UPGRADE_5_PRICE;
                    break;
                case 5:
                    this.upgradePrice = SuperSoccerNoggins.GameConstants.UPGRADE_5_PRICE;
                    break;
                default:
                    break;
            }
        };
        return AbilityContainer;
    }(Phaser.Group));
    SuperSoccerNoggins.AbilityContainer = AbilityContainer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var Confetti = (function (_super) {
        __extends(Confetti, _super);
        function Confetti(game) {
            var _this = _super.call(this, game, null, "confetti") || this;
            var confettiSprite = new Phaser.Sprite(_this.game, 0, -750, "texture_atlas_1");
            confettiSprite.animations.add("animation", Phaser.Animation.generateFrameNames("confetti_", 1, 6, ".png", 4), 8, true);
            confettiSprite.animations.play("animation");
            confettiSprite.anchor.set(.5);
            _this.add(confettiSprite);
            confettiSprite = new Phaser.Sprite(_this.game, 0, -500, "texture_atlas_1");
            confettiSprite.angle = 90;
            confettiSprite.animations.add("animation", Phaser.Animation.generateFrameNames("confetti_", 1, 6, ".png", 4), 8, true);
            confettiSprite.animations.play("animation");
            confettiSprite.anchor.set(.5);
            _this.add(confettiSprite);
            confettiSprite = new Phaser.Sprite(_this.game, 0, -250, "texture_atlas_1");
            confettiSprite.angle = 90;
            confettiSprite.animations.add("animation", Phaser.Animation.generateFrameNames("confetti_", 1, 6, ".png", 4), 8, true);
            confettiSprite.animations.play("animation");
            confettiSprite.anchor.set(.5);
            _this.add(confettiSprite);
            confettiSprite = new Phaser.Sprite(_this.game, 250, -750, "texture_atlas_1");
            confettiSprite.angle = -90;
            confettiSprite.animations.add("animation", Phaser.Animation.generateFrameNames("confetti_", 1, 6, ".png", 4), 8, true);
            confettiSprite.animations.play("animation");
            confettiSprite.anchor.set(.5);
            _this.add(confettiSprite);
            confettiSprite = new Phaser.Sprite(_this.game, 250, -500, "texture_atlas_1");
            confettiSprite.angle = 180;
            confettiSprite.animations.add("animation", Phaser.Animation.generateFrameNames("confetti_", 1, 6, ".png", 4), 8, true);
            confettiSprite.animations.play("animation");
            confettiSprite.anchor.set(.5);
            _this.add(confettiSprite);
            confettiSprite = new Phaser.Sprite(_this.game, 250, -250, "texture_atlas_1");
            confettiSprite.angle = 180;
            confettiSprite.animations.add("animation", Phaser.Animation.generateFrameNames("confetti_", 1, 6, ".png", 4), 8, true);
            confettiSprite.animations.play("animation");
            confettiSprite.anchor.set(.5);
            _this.add(confettiSprite);
            confettiSprite = new Phaser.Sprite(_this.game, 500, -750, "texture_atlas_1");
            confettiSprite.angle = -90;
            confettiSprite.animations.add("animation", Phaser.Animation.generateFrameNames("confetti_", 1, 6, ".png", 4), 8, true);
            confettiSprite.animations.play("animation");
            confettiSprite.anchor.set(.5);
            _this.add(confettiSprite);
            confettiSprite = new Phaser.Sprite(_this.game, 500, -500, "texture_atlas_1");
            confettiSprite.angle = 180;
            confettiSprite.animations.add("animation", Phaser.Animation.generateFrameNames("confetti_", 1, 6, ".png", 4), 8, true);
            confettiSprite.animations.play("animation");
            confettiSprite.anchor.set(.5);
            _this.add(confettiSprite);
            confettiSprite = new Phaser.Sprite(_this.game, 500, -250, "texture_atlas_1");
            confettiSprite.angle = 180;
            confettiSprite.animations.add("animation", Phaser.Animation.generateFrameNames("confetti_", 1, 6, ".png", 4), 8, true);
            confettiSprite.animations.play("animation");
            confettiSprite.anchor.set(.5);
            _this.add(confettiSprite);
            _this.updateAllowed = false;
            return _this;
        }
        Confetti.prototype.update = function () {
            if (!this.updateAllowed) {
                return;
            }
            this.forEach(function (confettiSprite) {
                if (confettiSprite.x === 0) {
                    confettiSprite.y += 3;
                }
                else if (confettiSprite.x === 250) {
                    confettiSprite.y += 2.75;
                }
                else {
                    confettiSprite.y += 3.25;
                }
                if (confettiSprite.y > 500) {
                    confettiSprite.y = -250;
                }
            }, this);
        };
        Confetti.prototype.activate = function (time) {
            this.updateAllowed = true;
            if (time) {
                this.game.time.events.add(time, this.removeConfetti, this);
            }
        };
        Confetti.prototype.removeConfetti = function () {
            this.game.add.tween(this)
                .to({ alpha: 0 }, 1000, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(this.destroy, this);
        };
        return Confetti;
    }(Phaser.Group));
    SuperSoccerNoggins.Confetti = Confetti;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var CupsContainer = (function (_super) {
        __extends(CupsContainer, _super);
        function CupsContainer(game) {
            var _this = _super.call(this, game, null, "achievements-container") || this;
            var cup;
            var achievedTournamentID = Math.floor(SuperSoccerNoggins.GameVars.getInstance().achievedMatchID / 8);
            for (var i = 0; i < 6; i++) {
                if (i < achievedTournamentID) {
                    cup = new Phaser.Image(_this.game, 40 + 50 * i, 396, "texture_atlas_season", "trophy_icon_" + (i + 1) + ".png");
                }
                else {
                    cup = new Phaser.Image(_this.game, 40 + 50 * i, 396, "texture_atlas_season", "trophy_icon_off_" + (i + 1) + ".png");
                }
                cup.anchor.set(.5);
                _this.add(cup);
            }
            return _this;
        }
        return CupsContainer;
    }(Phaser.Group));
    SuperSoccerNoggins.CupsContainer = CupsContainer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var MatchSelectionBackgroundManager = (function (_super) {
        __extends(MatchSelectionBackgroundManager, _super);
        function MatchSelectionBackgroundManager(game) {
            var _this = _super.call(this, game, null, "match-selection-background-manager") || this;
            _this.coloredBackgroundSprite = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData("white-square"));
            _this.coloredBackgroundSprite.scale.setTo(SuperSoccerNoggins.GameConstants.GAME_WIDTH / 16, SuperSoccerNoggins.GameConstants.GAME_HEIGHT / 16);
            _this.add(_this.coloredBackgroundSprite);
            _this.coloredPatternImage = new Phaser.Sprite(_this.game, 0, 0, "texture_atlas_season", "pattern.png");
            _this.coloredPatternImage.scale.setTo(2);
            _this.add(_this.coloredPatternImage);
            _this.nextColoredBackgroundSprite = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData("white-square"));
            _this.nextColoredBackgroundSprite.scale.setTo(SuperSoccerNoggins.GameConstants.GAME_WIDTH / 16, SuperSoccerNoggins.GameConstants.GAME_HEIGHT / 16);
            _this.nextColoredBackgroundSprite.visible = false;
            _this.add(_this.nextColoredBackgroundSprite);
            _this.nextColoredPatternImage = new Phaser.Sprite(_this.game, 0, 0, "texture_atlas_season", "pattern.png");
            _this.nextColoredPatternImage.visible = false;
            _this.nextColoredPatternImage.scale.setTo(2);
            _this.add(_this.nextColoredPatternImage);
            return _this;
        }
        MatchSelectionBackgroundManager.prototype.setColors = function (matchID) {
            var currentTournamentID = Math.floor(matchID / 8);
            if (SuperSoccerNoggins.GameVars.getInstance().christmasVersion) {
                this.coloredBackgroundSprite.tint = MatchSelectionBackgroundManager.XMAS_BACKGROUND_COLORS[currentTournamentID];
                this.coloredPatternImage.tint = MatchSelectionBackgroundManager.XMAS_PATTERN_COLORS[currentTournamentID];
            }
            else {
                this.coloredBackgroundSprite.tint = MatchSelectionBackgroundManager.BACKGROUND_COLORS[currentTournamentID];
                this.coloredPatternImage.tint = MatchSelectionBackgroundManager.PATTERN_COLORS[currentTournamentID];
            }
        };
        MatchSelectionBackgroundManager.prototype.scroll = function (up, currentTournamentIndex) {
            this.nextColoredBackgroundSprite.visible = true;
            this.nextColoredBackgroundSprite.alpha = 0;
            this.nextColoredPatternImage.visible = true;
            this.nextColoredPatternImage.alpha = 0;
            var i;
            if (up) {
                i = currentTournamentIndex + 1;
            }
            else {
                i = currentTournamentIndex - 1;
            }
            this.nextColoredBackgroundSprite.tint = MatchSelectionBackgroundManager.BACKGROUND_COLORS[i];
            this.nextColoredPatternImage.tint = MatchSelectionBackgroundManager.PATTERN_COLORS[i];
            this.game.add.tween(this.nextColoredBackgroundSprite)
                .to({ alpha: 1 }, 400, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.nextColoredPatternImage)
                .to({ alpha: 1 }, 400, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.coloredBackgroundSprite)
                .to({ alpha: 0 }, 400, Phaser.Easing.Cubic.Out, true);
            this.game.add.tween(this.coloredPatternImage)
                .to({ alpha: 0 }, 400, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.coloredBackgroundSprite.visible = false;
                this.coloredPatternImage.visible = false;
                var tmpSprite = this.coloredBackgroundSprite;
                var tmpImage = this.coloredPatternImage;
                this.coloredBackgroundSprite = this.nextColoredBackgroundSprite;
                this.coloredPatternImage = this.nextColoredPatternImage;
                this.nextColoredBackgroundSprite = tmpSprite;
                this.nextColoredPatternImage = tmpImage;
            }, this);
        };
        return MatchSelectionBackgroundManager;
    }(Phaser.Group));
    MatchSelectionBackgroundManager.BACKGROUND_COLORS = [0x6ED1D1, 0xFF90C0, 0x00BCA1, 0xFDDA75, 0xAD2B48, 0x9B364C];
    MatchSelectionBackgroundManager.PATTERN_COLORS = [0X06BE97, 0x00BCE3, 0xFFC560, 0xFF9F64, 0xF33D64, 0x003A4D];
    MatchSelectionBackgroundManager.XMAS_BACKGROUND_COLORS = [0xFFD56B, 0x0B6C8A, 0x3DE7F5, 0x1BC6DE, 0x87283D, 0xAD2B48];
    MatchSelectionBackgroundManager.XMAS_PATTERN_COLORS = [0XFF6C44, 0x00A882, 0xFF66FF, 0x157398, 0xFF3167, 0x003C50];
    SuperSoccerNoggins.MatchSelectionBackgroundManager = MatchSelectionBackgroundManager;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var MatchSelectionState = (function (_super) {
        __extends(MatchSelectionState, _super);
        function MatchSelectionState() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MatchSelectionState.prototype.init = function () {
            MatchSelectionState.currentInstance = this;
            this.delayTeamSelectionLayer = false;
            this.leavingScene = false;
        };
        MatchSelectionState.prototype.create = function () {
            this.matchSelectionBackground = new SuperSoccerNoggins.MatchSelectionBackgroundManager(this.game);
            this.add.existing(this.matchSelectionBackground);
            this.add.image(0, 0, "texture_atlas_season", "frame.png");
            this.scrollButtonUp = new Phaser.Button(this.game, 390, 76, "texture_atlas_1", this.onClickScrollButton, this);
            this.scrollButtonUp.setFrames("button-scroll-up-on.png", "button-scroll-up-off.png", "button-scroll-up-on.png");
            this.scrollButtonUp.name = "up";
            this.scrollButtonUp.anchor.set(.5);
            this.add.existing(this.scrollButtonUp);
            this.scrollButtonDown = new Phaser.Button(this.game, 390, 348, "texture_atlas_1", this.onClickScrollButton, this);
            this.scrollButtonDown.setFrames("button-scroll-down-on.png", "button-scroll-down-off.png", "button-scroll-down-on.png");
            this.scrollButtonDown.name = "down";
            this.scrollButtonDown.anchor.set(.5);
            this.add.existing(this.scrollButtonDown);
            this.tournamentsContainer = new SuperSoccerNoggins.TournamentsContainer(this.game);
            var matchID = SuperSoccerNoggins.GameVars.getInstance().tournamentUnlocked ? SuperSoccerNoggins.GameVars.getInstance().achievedMatchID - 1 : SuperSoccerNoggins.GameVars.getInstance().achievedMatchID;
            matchID = matchID > SuperSoccerNoggins.GameConstants.NUM_MATCHES - 1 ? SuperSoccerNoggins.GameConstants.NUM_MATCHES - 1 : matchID;
            this.setTournament(matchID);
            this.add.existing(this.tournamentsContainer);
            this.upgradesContainer = new SuperSoccerNoggins.UpgradesContainer(this.game, this.tournamentsContainer.visibleTournamentIndex);
            this.add.existing(this.upgradesContainer);
            this.cupsContainer = new SuperSoccerNoggins.CupsContainer(this.game);
            this.add.existing(this.cupsContainer);
            var infoButton = new Phaser.Button(this.game, 552, 8, "texture_atlas_1", this.onClickInfo, this);
            infoButton.setFrames("button-info-on.png", "button-info-off.png", "button-info-on.png");
            infoButton.forceOut = true;
            this.add.existing(infoButton);
            var backButton = new Phaser.Button(this.game, 596, 8, "texture_atlas_1", this.onClickHome, this);
            backButton.setFrames("button-home-on.png", "button-home-off.png", "button-home-on.png");
            this.add.existing(backButton);
            this.changeTeamButton = new Phaser.Button(this.game, 22, 320, "texture_atlas_1", this.showChangeTeamLayer, this);
            this.changeTeamButton.setFrames("button-change-team-on.png", "button-change-team-off.png", "button-change-team-on.png");
            this.changeTeamButton.forceOut = true;
            this.add.existing(this.changeTeamButton);
            var achievementsButton = new Phaser.Button(this.game, 336, 386, "texture_atlas_1", this.onClickAchievements, this);
            achievementsButton.setFrames("button-achievements-on.png", "button-achievements-off.png", "button-achievements-on.png");
            this.add.existing(achievementsButton);
            if (SuperSoccerNoggins.GameVars.getInstance().playerTeamID < 0) {
                this.showChangeTeamLayer();
            }
            else {
                this.teamSelectionLayer = null;
            }
            this.clicksSwallowLayer = null;
            this.powerUpsLayer = null;
            if (SuperSoccerNoggins.GameVars.getInstance().tournamentUnlocked) {
                this.startCelebrating();
            }
            var key = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
            key.onDown.add(this.onSpaceBarPressed, this);
            if (SuperSoccerNoggins.AudioManager.getInstance().currentTrack !== "noggins_menu") {
                SuperSoccerNoggins.AudioManager.getInstance().stopLoop(SuperSoccerNoggins.AudioManager.getInstance().currentTrack);
                SuperSoccerNoggins.AudioManager.getInstance().playLoop("noggins_menu");
            }
            this.game.camera.flash(SuperSoccerNoggins.GameConstants.COLOR_FADE_IN_OUT, SuperSoccerNoggins.GameConstants.TIME_FADE_IN_OUT, false);
        };
        MatchSelectionState.prototype.shutdown = function () {
            SuperSoccerNoggins.SplashState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        MatchSelectionState.prototype.matchSelected = function () {
            this.goToScene("MatchState");
            SuperSoccerNoggins.AudioManager.getInstance().stopLoop(SuperSoccerNoggins.AudioManager.getInstance().currentTrack);
        };
        MatchSelectionState.prototype.removePowerUpsLayer = function () {
            this.powerUpsLayer.destroy();
            this.powerUpsLayer = null;
        };
        MatchSelectionState.prototype.teamSelected = function () {
            this.changeTeamButton.visible = true;
            this.tournamentsContainer.updateTeam();
            this.upgradesContainer.threadmill.updateTeam(this.tournamentsContainer.visibleTournamentIndex);
            this.teamSelectionLayer.destroy();
            this.teamSelectionLayer = null;
        };
        MatchSelectionState.prototype.abilityPurchased = function (abilityType) {
            this.upgradesContainer.abilityPurchased(abilityType);
        };
        MatchSelectionState.prototype.setTournament = function (matchID) {
            this.matchSelectionBackground.setColors(SuperSoccerNoggins.GameVars.getInstance().matchID);
            this.tournamentsContainer.setTournament(SuperSoccerNoggins.GameVars.getInstance().matchID);
            var currentTournamentID = Math.floor(SuperSoccerNoggins.GameVars.getInstance().matchID / 8);
            if (currentTournamentID === 0) {
                this.scrollButtonDown.visible = false;
            }
            else if (currentTournamentID === 5) {
                this.scrollButtonUp.visible = false;
            }
        };
        MatchSelectionState.prototype.onClickScrollButton = function (b) {
            if (this.tournamentsContainer.tweening) {
                return;
            }
            if (b.name === "up") {
                this.matchSelectionBackground.scroll(true, this.tournamentsContainer.visibleTournamentIndex);
                this.tournamentsContainer.scroll(true);
            }
            else {
                this.matchSelectionBackground.scroll(false, this.tournamentsContainer.visibleTournamentIndex);
                this.tournamentsContainer.scroll(false);
            }
            if (this.tournamentsContainer.visibleTournamentIndex === 0) {
                this.scrollButtonDown.visible = false;
            }
            else if (this.tournamentsContainer.visibleTournamentIndex === 5) {
                this.scrollButtonUp.visible = false;
            }
            else {
                this.scrollButtonUp.visible = true;
                this.scrollButtonDown.visible = true;
            }
            this.onScrollStarted();
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
        };
        MatchSelectionState.prototype.onScrollStarted = function () {
            this.upgradesContainer.threadmill.updateTeam(this.tournamentsContainer.visibleTournamentIndex);
            var team = SuperSoccerNoggins.GameVars.getInstance().selectedTeamsID[this.tournamentsContainer.visibleTournamentIndex];
            if (team < 0) {
                this.changeTeamButton.visible = false;
            }
            else {
                this.changeTeamButton.visible = true;
            }
        };
        MatchSelectionState.prototype.showChangeTeamLayer = function () {
            this.changeTeamButton.visible = false;
            this.teamSelectionLayer = new SuperSoccerNoggins.TeamSelectionLayer(this.game, this.tournamentsContainer.visibleTournamentIndex, this.delayTeamSelectionLayer);
            this.add.existing(this.teamSelectionLayer);
            if (this.delayTeamSelectionLayer) {
                this.delayTeamSelectionLayer = false;
            }
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
        };
        MatchSelectionState.prototype.onClickInfo = function () {
            this.powerUpsLayer = new SuperSoccerNoggins.PowerUpsLayer(this.game);
            this.add.existing(this.powerUpsLayer);
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
        };
        MatchSelectionState.prototype.onClickHome = function () {
            this.goToScene("SplashState");
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
        };
        MatchSelectionState.prototype.onClickAchievements = function () {
            this.goToScene("AchievementsState");
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
        };
        MatchSelectionState.prototype.goToScene = function (nextScene, args) {
            if (this.leavingScene) {
                return;
            }
            this.leavingScene = true;
            this.game.camera.fade(SuperSoccerNoggins.GameConstants.COLOR_FADE_IN_OUT, SuperSoccerNoggins.GameConstants.TIME_FADE_IN_OUT, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start(nextScene, true, false);
            }, this);
        };
        MatchSelectionState.prototype.startCelebrating = function () {
            this.clicksSwallowLayer = new Phaser.Sprite(this.game, 0, 0, this.game.cache.getBitmapData("yellow-square"));
            this.clicksSwallowLayer.scale.setTo(SuperSoccerNoggins.GameConstants.GAME_WIDTH / 16, SuperSoccerNoggins.GameConstants.GAME_HEIGHT / 16);
            this.clicksSwallowLayer.alpha = 0;
            this.clicksSwallowLayer.inputEnabled = true;
            this.clicksSwallowLayer.input.priorityID = 0;
            this.clicksSwallowLayer.events.onInputDown.add(this.swallowClick, this);
            this.add.existing(this.clicksSwallowLayer);
            this.confetti = new SuperSoccerNoggins.Confetti(this.game);
            this.add.existing(this.confetti);
            this.confetti.activate(3500);
            this.tournamentsContainer.startCelebrating();
            this.game.time.events.add(4500, this.stopCelebrating, this);
        };
        MatchSelectionState.prototype.stopCelebrating = function () {
            this.clicksSwallowLayer.destroy();
            this.clicksSwallowLayer = null;
            this.tournamentsContainer.stopCelebrating();
            if (!SuperSoccerNoggins.GameVars.getInstance().gameCompleted) {
                this.delayTeamSelectionLayer = true;
                this.onClickScrollButton(this.scrollButtonUp);
                this.showChangeTeamLayer();
            }
            SuperSoccerNoggins.GameManager.getInstance().onCelebrationFinished();
        };
        MatchSelectionState.prototype.onSpaceBarPressed = function () {
            if (this.teamSelectionLayer || this.clicksSwallowLayer || this.powerUpsLayer) {
                return;
            }
            var matchID = SuperSoccerNoggins.GameVars.getInstance().achievedMatchID;
            if (SuperSoccerNoggins.GameVars.getInstance().achievedMatchID === SuperSoccerNoggins.GameConstants.NUM_MATCHES) {
                matchID = SuperSoccerNoggins.GameConstants.NUM_MATCHES - 1;
            }
            var tournamentID = Math.floor(matchID / 8);
            var adversaryTeamID = SuperSoccerNoggins.GameVars.getInstance().tournamentsData[tournamentID].teams[matchID % 8];
            SuperSoccerNoggins.GameManager.getInstance().onMatchSelected(matchID, adversaryTeamID, SuperSoccerNoggins.GameVars.getInstance().playerTeamID);
        };
        MatchSelectionState.prototype.swallowClick = function () {
        };
        return MatchSelectionState;
    }(Phaser.State));
    SuperSoccerNoggins.MatchSelectionState = MatchSelectionState;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var NogginCursor = (function (_super) {
        __extends(NogginCursor, _super);
        function NogginCursor(game, tournamentID, victorious) {
            var _this = _super.call(this, game, null, "noggin-cursor") || this;
            _this.nogginBodyImage = new Phaser.Image(_this.game, 0, -5, "texture_atlas_1", null);
            _this.nogginBodyImage.anchor.setTo(.5, 1);
            _this.add(_this.nogginBodyImage);
            _this.nogginHeadImage = new Phaser.Image(_this.game, -8, -67, "texture_atlas_1", null);
            _this.nogginHeadImage.anchor.x = .37;
            _this.nogginHeadImage.scale.set(2 / 3);
            _this.add(_this.nogginHeadImage);
            if (victorious) {
                var sceptreImage = new Phaser.Image(_this.game, 26, -47, "texture_atlas_1", "winner_sceptre.png");
                sceptreImage.scale.x = -1;
                _this.addAt(sceptreImage, 0);
                var crown = new Phaser.Image(_this.game, 16, -80, "texture_atlas_1", "winner_crown.png");
                crown.scale.x = -1;
                _this.add(crown);
            }
            else {
                _this.playLevelButton = new Phaser.Button(_this.game, 35, -35, "texture_atlas_1", _this.onClickPlayButton, _this);
                _this.playLevelButton.setFrames("button-play-level-on.png", "button-play-level-off.png", "button-play-level-on.png");
                _this.playLevelButton.name = "down";
                _this.playLevelButton.anchor.set(.35, .5);
                _this.playLevelButton.angle = -5;
                _this.add(_this.playLevelButton);
                _this.game.add.tween(_this.playLevelButton)
                    .to({ angle: 5 }, 375, Phaser.Easing.Cubic.Out, true, 0, -1, true);
            }
            var id = SuperSoccerNoggins.GameVars.getInstance().selectedTeamsID[tournamentID];
            if (id >= 0) {
                _this.updateTeam(id);
            }
            return _this;
        }
        NogginCursor.prototype.updateTeam = function (id) {
            var teamID = id || SuperSoccerNoggins.GameVars.getInstance().playerTeamID;
            if (teamID + 1 < 10) {
                this.nogginHeadImage.frameName = "head_000" + (teamID + 1).toString() + ".png";
                this.nogginBodyImage.frameName = "body_01_000" + (teamID + 1).toString() + ".png";
            }
            else {
                this.nogginHeadImage.frameName = "head_00" + (teamID + 1).toString() + ".png";
                this.nogginBodyImage.frameName = "body_01_00" + (teamID + 1).toString() + ".png";
            }
        };
        NogginCursor.prototype.jump = function () {
            this.playLevelButton.visible = false;
            var y = this.y;
            this.y += 36.5;
            var nogginTween = this.game.add.tween(this.scale);
            nogginTween.to({ x: 1.02, y: .95 }, 300, Phaser.Easing.Linear.None, false, 700);
            nogginTween.to({ x: .98, y: 1.05 }, 500, Phaser.Easing.Elastic.Out);
            nogginTween.to({ x: 1, y: 1 }, 300, Phaser.Easing.Cubic.Out);
            nogginTween.start();
            this.game.add.tween(this)
                .to({ y: y }, 500, Phaser.Easing.Cubic.Out, true, 1000)
                .onComplete.add(function () {
                this.playLevelButton.visible = true;
            }, this);
        };
        NogginCursor.prototype.startCelebrating = function () {
            this.victoryTween = this.game.add.tween(this)
                .to({ y: this.y - 15 }, 150, Phaser.Easing.Cubic.Out, true, 500, -1, true);
        };
        NogginCursor.prototype.stopCelebrating = function () {
            this.victoryTween.pendingDelete = true;
        };
        NogginCursor.prototype.onClickPlayButton = function () {
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
            var matchID = SuperSoccerNoggins.GameVars.getInstance().achievedMatchID;
            var tournamentID = Math.floor(matchID / 8);
            var adversaryTeamID = SuperSoccerNoggins.GameVars.getInstance().tournamentsData[tournamentID].teams[matchID % 8];
            SuperSoccerNoggins.GameManager.getInstance().onMatchSelected(matchID, adversaryTeamID, SuperSoccerNoggins.GameVars.getInstance().playerTeamID);
        };
        return NogginCursor;
    }(Phaser.Group));
    SuperSoccerNoggins.NogginCursor = NogginCursor;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var PowerUpsLayer = (function (_super) {
        __extends(PowerUpsLayer, _super);
        function PowerUpsLayer(game) {
            var _this = _super.call(this, game, null, "power-ups-layer") || this;
            var backgroundImage = new Phaser.Image(_this.game, 0, 0, "texture_atlas_season", "powerups.png");
            backgroundImage.inputEnabled = true;
            backgroundImage.input.priorityID = 0;
            backgroundImage.events.onInputDown.add(_this.onClickBackgroundImage, _this);
            _this.add(backgroundImage);
            var backButton = new Phaser.Button(_this.game, 596, 8, "texture_atlas_1", _this.onClickBack, _this);
            backButton.setFrames("button-home-on.png", "button-home-off.png", "button-home-on.png");
            _this.add(backButton);
            return _this;
        }
        PowerUpsLayer.prototype.onClickBack = function (b) {
            b.clearFrames();
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
            SuperSoccerNoggins.MatchSelectionState.currentInstance.removePowerUpsLayer();
        };
        PowerUpsLayer.prototype.onClickBackgroundImage = function () {
        };
        return PowerUpsLayer;
    }(Phaser.Group));
    SuperSoccerNoggins.PowerUpsLayer = PowerUpsLayer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var TeamButton = (function (_super) {
        __extends(TeamButton, _super);
        function TeamButton(game, teamID, visibleTournamentIndex) {
            var _this = _super.call(this, game, null, "team-button") || this;
            _this.teamID = teamID;
            _this.scaled = false;
            _this.visibleTournamentIndex = visibleTournamentIndex;
            var backgroundSprite = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData("yellow-square"));
            backgroundSprite.scale.setTo(50 / 16, 70 / 16);
            backgroundSprite.anchor.x = .5;
            backgroundSprite.alpha = 0;
            backgroundSprite.inputEnabled = true;
            backgroundSprite.events.onInputDown.add(_this.onClickTeamButton, _this);
            backgroundSprite.events.onInputOver.add(_this.onOverTeamButton, _this);
            backgroundSprite.events.onInputOut.add(_this.onOutTeamButton, _this);
            backgroundSprite.input.useHandCursor = true;
            _this.add(backgroundSprite);
            var lookingToTheLeft = Math.random() > .5 ? true : false;
            _this.nogginContainer_py = 70 + 3 - 6 * Math.random();
            _this.nogginContainer = new Phaser.Group(_this.game);
            _this.nogginContainer.y = _this.nogginContainer_py;
            _this.add(_this.nogginContainer);
            var headTextureName;
            var bodyTextureName;
            if (_this.teamID + 1 < 10) {
                headTextureName = "head_000" + (_this.teamID + 1).toString() + ".png";
                bodyTextureName = "body_01_000" + (_this.teamID + 1).toString() + ".png";
            }
            else {
                headTextureName = "head_00" + (_this.teamID + 1).toString() + ".png";
                bodyTextureName = "body_01_00" + (_this.teamID + 1).toString() + ".png";
            }
            var nogginBodyImage = new Phaser.Image(_this.game, 0, -5, "texture_atlas_1", bodyTextureName);
            nogginBodyImage.anchor.setTo(.5, 1);
            nogginBodyImage.scale.x = lookingToTheLeft ? 1 : -1;
            _this.nogginContainer.add(nogginBodyImage);
            var nogginHeadImage = new Phaser.Image(_this.game, -8, -66, "texture_atlas_1", headTextureName);
            nogginHeadImage.anchor.x = .37;
            nogginHeadImage.x = lookingToTheLeft ? -8 : 8;
            nogginHeadImage.scale.x = lookingToTheLeft ? 2 / 3 : -2 / 3;
            nogginHeadImage.scale.y = 2 / 3;
            _this.nogginContainer.add(nogginHeadImage);
            _this.teamName = new Phaser.Text(_this.game, 0, 65, SuperSoccerNoggins.GameVars.getInstance().teamsData[_this.teamID].name.toUpperCase(), { font: "15px Open Sans", fontWeight: "800", fill: "#1A3544", stroke: "#C6F4F7", strokeThickness: 0 });
            _this.teamName.scale.x = _this.teamName.text.length > 9 ? .5 : .65;
            _this.teamName.x -= _this.teamName.width / 2;
            _this.add(_this.teamName);
            return _this;
        }
        TeamButton.prototype.shake = function () {
            if (this.scaled) {
                return;
            }
            var nogginTween = this.game.add.tween(this.nogginContainer.scale);
            nogginTween.to({ x: 1.03, y: .94 }, 300, Phaser.Easing.Linear.None, false);
            nogginTween.delay(400);
            nogginTween.to({ x: 1, y: 1 }, 700, Phaser.Easing.Elastic.Out);
            nogginTween.start();
        };
        TeamButton.prototype.onOverTeamButton = function () {
            this.scaled = true;
            this.nogginContainer.scale.set(1.1);
            this.nogginContainer.y = this.nogginContainer_py + 2;
            this.teamName.strokeThickness = 4;
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("rollover");
        };
        TeamButton.prototype.onOutTeamButton = function () {
            this.scaled = false;
            this.nogginContainer.scale.set(1);
            this.nogginContainer.y = this.nogginContainer_py;
            this.teamName.strokeThickness = 0;
        };
        TeamButton.prototype.onClickTeamButton = function () {
            SuperSoccerNoggins.GameManager.getInstance().onTeamSelected(this.teamID, this.visibleTournamentIndex);
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
        };
        return TeamButton;
    }(Phaser.Group));
    SuperSoccerNoggins.TeamButton = TeamButton;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var TeamSelectionLayer = (function (_super) {
        __extends(TeamSelectionLayer, _super);
        function TeamSelectionLayer(game, visibleTournamentIndex, delayed) {
            var _this = _super.call(this, game, null, "team-selection-layer") || this;
            _this.teamButtons = [];
            var backgroundImage = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "layer_country_selection.png");
            backgroundImage.inputEnabled = true;
            backgroundImage.input.priorityID = 0;
            backgroundImage.events.onInputDown.add(_this.onClickBackgroundImage, _this);
            _this.add(backgroundImage);
            var tournamentsData = SuperSoccerNoggins.GameVars.getInstance().tournamentsData;
            var tournamentData = tournamentsData[visibleTournamentIndex];
            var i;
            var teamButton;
            for (i = 0; i < tournamentData.teams.length; i++) {
                teamButton = new SuperSoccerNoggins.TeamButton(_this.game, tournamentData.teams[i], visibleTournamentIndex);
                teamButton.x = 40 + i * 70;
                teamButton.y = 190;
                _this.add(teamButton);
                _this.teamButtons.push(teamButton);
            }
            teamButton = new SuperSoccerNoggins.TeamButton(_this.game, tournamentData.reserve_team, visibleTournamentIndex);
            teamButton.x = 40 + i * 70;
            teamButton.y = 190;
            _this.add(teamButton);
            _this.teamButtons.push(teamButton);
            if (delayed) {
                _this.alpha = 0;
                _this.game.add.tween(_this)
                    .to({ alpha: 1 }, 400, Phaser.Easing.Cubic.Out, true, 1750);
            }
            return _this;
        }
        TeamSelectionLayer.prototype.update = function () {
            if (Math.random() > .985) {
                var teamButton = this.teamButtons[Math.floor(this.teamButtons.length * Math.random())];
                teamButton.shake();
            }
        };
        TeamSelectionLayer.prototype.onClickBackgroundImage = function () {
        };
        return TeamSelectionLayer;
    }(Phaser.Group));
    SuperSoccerNoggins.TeamSelectionLayer = TeamSelectionLayer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var ThreadMill = (function (_super) {
        __extends(ThreadMill, _super);
        function ThreadMill(game, visibleTournamentIndex) {
            var _this = _super.call(this, game, null, "upgrades-container") || this;
            ThreadMill.syringeAnimationActive = false;
            _this.deltaFrames = 20;
            _this.framesCounter = 0;
            _this.deltaHead_x = -.25;
            _this.threadmill = _this.create(40, 110, "texture_atlas_1", "treadmill_0001.png");
            _this.threadmill.animations.add("run", Phaser.Animation.generateFrameNames("treadmill_", 1, 7, ".png", 4), 20, true);
            _this.threadmill.play("run");
            _this.nogginContainer = new Phaser.Group(_this.game);
            _this.add(_this.nogginContainer);
            if (SuperSoccerNoggins.GameVars.getInstance().playerTeamID < 0) {
                _this.nogginContainer.visible = false;
            }
            var wires = new Phaser.Image(_this.game, 78, 66, "texture_atlas_1", "wires.png");
            _this.nogginContainer.add(wires);
            _this.nogginBodyImage = new Phaser.Image(_this.game, 100, 78, "texture_atlas_1", null);
            _this.nogginBodyImage.anchor.x = .5;
            _this.nogginBodyImage.angle = 1;
            _this.nogginContainer.add(_this.nogginBodyImage);
            _this.nogginHeadImage = new Phaser.Image(_this.game, 120 + _this.deltaHead_x, 80, "texture_atlas_1", null);
            _this.nogginHeadImage.scale.setTo(-1 / 1.5, 1 / 1.5);
            _this.nogginContainer.add(_this.nogginHeadImage);
            if (SuperSoccerNoggins.GameVars.getInstance().playerTeamID >= 0) {
                _this.setNoggin(visibleTournamentIndex);
            }
            return _this;
        }
        ThreadMill.prototype.update = function () {
            _super.prototype.update.call(this);
            this.framesCounter++;
            if (this.framesCounter % this.deltaFrames === 0) {
                this.framesCounter = 0;
                this.nogginBodyImage.angle = -this.nogginBodyImage.angle;
                this.nogginHeadImage.x = 122 + this.deltaHead_x;
                this.deltaHead_x = -this.deltaHead_x;
            }
        };
        ThreadMill.prototype.updateTeam = function (visibleTournamentIndex) {
            this.setNoggin(visibleTournamentIndex);
            this.nogginContainer.visible = true;
        };
        ThreadMill.prototype.abilityPurchased = function () {
            ThreadMill.syringeAnimationActive = true;
            this.syringe = new Phaser.Sprite(this.game, -5, 110, "texture_atlas_1", "syringe_0001.png");
            this.syringe.anchor.set(.45, .75);
            this.syringe.animations.add("inject", Phaser.Animation.generateFrameNames("syringe_", 1, 15, ".png", 4), 20, true);
            this.addAt(this.syringe, 0);
            this.game.add.tween(this.syringe)
                .to({ x: this.syringe.x + 30 }, 400, Phaser.Easing.Elastic.Out, true)
                .onComplete.add(function () {
                this.syringe.animations.play("inject", 16, false, false)
                    .onComplete.add(function () {
                    this.game.time.events.add(750, function () {
                        this.game.add.tween(this.syringe.scale)
                            .to({ x: 0, y: 0 }, 400, Phaser.Easing.Cubic.Out, true)
                            .onComplete.add(function () {
                            ThreadMill.syringeAnimationActive = false;
                            this.syringe.destroy();
                        }, this);
                    }, this);
                }, this);
                this.nogginHeadImage.tint = 0xffaaaa;
                this.nogginBodyImage.tint = 0xffaaaa;
                this.deltaFrames = 5;
                this.game.time.events.add(2000, function () {
                    this.deltaFrames = 20;
                    this.nogginHeadImage.tint = 0xffbbbb;
                    this.nogginBodyImage.tint = 0xffbbbb;
                }, this);
                this.game.time.events.add(2250, function () {
                    this.deltaFrames = 20;
                    this.nogginHeadImage.tint = 0xffdddd;
                    this.nogginBodyImage.tint = 0xffdddd;
                }, this);
                this.game.time.events.add(2500, function () {
                    this.deltaFrames = 20;
                    this.nogginHeadImage.tint = 0xffffff;
                    this.nogginBodyImage.tint = 0xffffff;
                }, this);
            }, this);
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("upgrade");
        };
        ThreadMill.prototype.setNoggin = function (visibleTournamentIndex) {
            var teamID = SuperSoccerNoggins.GameVars.getInstance().selectedTeamsID[visibleTournamentIndex];
            if (teamID >= 0) {
                if (teamID + 1 < 10) {
                    this.nogginHeadImage.frameName = "head_000" + (teamID + 1).toString() + ".png";
                }
                else {
                    this.nogginHeadImage.frameName = "head_00" + (teamID + 1).toString() + ".png";
                }
                this.nogginBodyImage.frameName = "naked_" + SuperSoccerNoggins.GameVars.getInstance().teamsData[teamID].race + ".png";
            }
        };
        return ThreadMill;
    }(Phaser.Group));
    SuperSoccerNoggins.ThreadMill = ThreadMill;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var Tournament = (function (_super) {
        __extends(Tournament, _super);
        function Tournament(game, tournamentID) {
            var _this = _super.call(this, game, null, "tournament") || this;
            _this.id = tournamentID;
            var tournamentsData = SuperSoccerNoggins.GameVars.getInstance().tournamentsData;
            _this.tournamentData = tournamentsData[_this.id];
            _this.cellSprites = [];
            _this.flags = [];
            _this.teamNames = [];
            _this.nogginCursor = null;
            var currentTournament = Math.floor(SuperSoccerNoggins.GameVars.getInstance().achievedMatchID / 8);
            var ribbon;
            if (_this.id < currentTournament) {
                ribbon = new Phaser.Image(_this.game, 0, 0, "texture_atlas_season", "ribbon_" + (currentTournament - 1) + ".png");
                _this.add(ribbon);
                if (SuperSoccerNoggins.GameVars.getInstance().tournamentUnlocked) {
                    ribbon.scale.y = 0;
                    _this.game.add.tween(ribbon.scale)
                        .to({ y: 1 }, 950, Phaser.Easing.Elastic.Out, true, 1000);
                }
                _this.nogginCursor = new SuperSoccerNoggins.NogginCursor(_this.game, tournamentID, true);
                _this.nogginCursor.x = 36;
                _this.nogginCursor.y = 200;
                _this.nogginCursor.scale.x = -1;
                _this.add(_this.nogginCursor);
            }
            var tournamentTitle = new Phaser.Image(_this.game, 9, 0, "texture_atlas_season", "trophy_title_" + (tournamentID + 1) + ".png");
            _this.add(tournamentTitle);
            var cells_px = 92;
            var cells_py = 74;
            var tournamentBase = new Phaser.Image(_this.game, cells_px, cells_py, "texture_atlas_1", "chart.png");
            _this.add(tournamentBase);
            var cellSprite;
            var flagImage;
            var teamName;
            var matchID;
            for (var i = 0; i < 8; i++) {
                matchID = 7 - i + 8 * _this.id;
                if (matchID <= SuperSoccerNoggins.GameVars.getInstance().achievedMatchID) {
                    cellSprite = new Phaser.Sprite(_this.game, cells_px, cells_py + 36.5 * i, _this.game.cache.getBitmapData("white-square"));
                    cellSprite.scale.setTo(Tournament.WIDTH_TOURNAMENT_CELLS[i] / 16, 36.5 / 16);
                    cellSprite.alpha = 0;
                    cellSprite.inputEnabled = true;
                    cellSprite.input.useHandCursor = true;
                    cellSprite.events.onInputDown.add(_this.onClickCell, _this);
                    cellSprite.events.onInputOver.add(_this.onOverCell, _this);
                    cellSprite.events.onInputOut.add(_this.onOutCell, _this);
                    _this.cellSprites.push(cellSprite);
                    cellSprite.name = matchID.toString() + "-" + SuperSoccerNoggins.GameVars.getInstance().teamsData[_this.tournamentData.teams[7 - i]].id.toString();
                    _this.add(cellSprite);
                }
                flagImage = new Phaser.Image(_this.game, cells_px + 8, i * 36.5 + cells_py + 6, "texture_atlas_1", "flag-" + SuperSoccerNoggins.GameVars.getInstance().teamsData[_this.tournamentData.teams[7 - i]].id + ".png");
                flagImage.scale.setTo(.75, .75);
                _this.add(flagImage);
                _this.flags.push(flagImage);
                teamName = new Phaser.Text(_this.game, cells_px + 48, i * 36 + cells_py + 10, SuperSoccerNoggins.GameVars.getInstance().teamsData[_this.tournamentData.teams[7 - i]].name.toUpperCase(), { font: "16px Open Sans", fontWeight: "600", fill: "#1A3544" });
                teamName.scale.x = teamName.text.length > 9 ? .65 : .75;
                _this.add(teamName);
                _this.teamNames.push(teamName);
                if (matchID > SuperSoccerNoggins.GameVars.getInstance().achievedMatchID) {
                    flagImage.alpha = .3;
                    teamName.alpha = .8;
                    teamName.fill = "#cccccc";
                }
                if (matchID === SuperSoccerNoggins.GameVars.getInstance().achievedMatchID) {
                    var px = cells_px + Tournament.DELTA_X_NOGGIN_CURSOR[i];
                    var py = i * 36.5 + cells_py + 50;
                    _this.nogginCursor = new SuperSoccerNoggins.NogginCursor(_this.game, tournamentID, false);
                    _this.nogginCursor.x = px;
                    _this.nogginCursor.y = py;
                    _this.add(_this.nogginCursor);
                    if (SuperSoccerNoggins.GameVars.getInstance().selectedTeamsID[tournamentID] < 0) {
                        _this.nogginCursor.visible = false;
                    }
                    if (SuperSoccerNoggins.GameVars.getInstance().matchUnlocked) {
                        _this.nogginCursor.jump();
                        SuperSoccerNoggins.GameManager.getInstance().onCursorNogginJumped();
                    }
                    if (SuperSoccerNoggins.GameVars.getInstance().playerTeamID < 0) {
                        _this.nogginCursor.visible = false;
                    }
                }
            }
            if (_this.nogginCursor !== null) {
                _this.bringToTop(_this.nogginCursor);
            }
            return _this;
        }
        Tournament.prototype.updateTeam = function () {
            var matchID;
            var i;
            for (i = 0; i < 8; i++) {
                this.flags[i].frameName = "flag-" + SuperSoccerNoggins.GameVars.getInstance().teamsData[this.tournamentData.teams[7 - i]].id + ".png";
                this.teamNames[i].text = SuperSoccerNoggins.GameVars.getInstance().teamsData[this.tournamentData.teams[7 - i]].name.toUpperCase();
                this.teamNames[i].scale.x = this.teamNames[i].text.length > 9 ? .65 : .75;
            }
            for (i = 0; i < this.cellSprites.length; i++) {
                matchID = this.cellSprites.length - 1 - i + 8 * this.id;
                this.cellSprites[i].name = matchID.toString() + "-" + SuperSoccerNoggins.GameVars.getInstance().teamsData[this.tournamentData.teams[this.cellSprites.length - 1 - i]].id.toString();
            }
            this.nogginCursor.updateTeam();
            this.nogginCursor.visible = true;
        };
        Tournament.prototype.startCelebrating = function () {
            this.nogginCursor.startCelebrating();
        };
        Tournament.prototype.stopCelebrating = function () {
            this.nogginCursor.stopCelebrating();
        };
        Tournament.prototype.onClickCell = function (cell) {
            var i = cell.name.search("-");
            var matchID = parseInt(cell.name.substr(0, i));
            var adversaryTeamID = parseInt(cell.name.substr(i + 1, cell.name.length - 1));
            var playerID = SuperSoccerNoggins.GameVars.getInstance().selectedTeamsID[this.id];
            SuperSoccerNoggins.GameManager.getInstance().onMatchSelected(matchID, adversaryTeamID, playerID);
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
        };
        Tournament.prototype.onOverCell = function (cell) {
            cell.alpha = .5;
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("rollover");
        };
        Tournament.prototype.onOutCell = function (cell) {
            cell.alpha = 0;
        };
        return Tournament;
    }(Phaser.Group));
    Tournament.WIDTH_TOURNAMENT_CELLS = [172, 188, 206, 226, 250, 250, 250, 250];
    Tournament.DELTA_X_NOGGIN_CURSOR = [152, 168, 186, 206, 206, 206, 206, 206];
    SuperSoccerNoggins.Tournament = Tournament;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var TournamentsContainer = (function (_super) {
        __extends(TournamentsContainer, _super);
        function TournamentsContainer(game) {
            var _this = _super.call(this, game, null, "tournaments-container") || this;
            _this.tweening = false;
            _this.visibleTournamentIndex = 0;
            var tournament;
            for (var i = 0; i < 6; i++) {
                tournament = new SuperSoccerNoggins.Tournament(_this.game, i);
                tournament.y = -TournamentsContainer.DELTA_Y * i;
                tournament.visible = false;
                _this.add(tournament);
            }
            return _this;
        }
        TournamentsContainer.prototype.scroll = function (up) {
            var dy = this.y;
            var currentTournament = this.getChildAt(this.visibleTournamentIndex);
            var currentTournamentAlphaTweenDelay;
            var nextTournamentAlphaTweenDelay;
            var alphaNextTournament;
            if (up) {
                this.visibleTournamentIndex++;
                dy += TournamentsContainer.DELTA_Y;
                currentTournamentAlphaTweenDelay = 0;
                nextTournamentAlphaTweenDelay = 0;
                alphaNextTournament = .5;
            }
            else {
                this.visibleTournamentIndex--;
                dy -= TournamentsContainer.DELTA_Y;
                currentTournamentAlphaTweenDelay = 250;
                nextTournamentAlphaTweenDelay = 200;
                alphaNextTournament = 0;
            }
            var nextTournament = this.getChildAt(this.visibleTournamentIndex);
            this.tweening = true;
            this.game.add.tween(this)
                .to({ y: dy }, 650, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.tweening = false;
            }, this);
            this.game.add.tween(currentTournament)
                .to({ alpha: 0 }, 400, Phaser.Easing.Cubic.Out, true, currentTournamentAlphaTweenDelay)
                .onComplete.add(function (currentTournament) {
                currentTournament.visible = false;
            }, this, 0, [currentTournament]);
            nextTournament.visible = true;
            nextTournament.alpha = alphaNextTournament;
            this.game.add.tween(nextTournament)
                .to({ alpha: 1 }, 500, Phaser.Easing.Cubic.Out, true, nextTournamentAlphaTweenDelay);
        };
        TournamentsContainer.prototype.setTournament = function (matchID) {
            this.visibleTournamentIndex = Math.floor(SuperSoccerNoggins.GameVars.getInstance().matchID / 8);
            var visibleTournament = this.getAt(this.visibleTournamentIndex);
            visibleTournament.visible = true;
            this.y = TournamentsContainer.DELTA_Y * this.visibleTournamentIndex;
        };
        TournamentsContainer.prototype.updateTeam = function () {
            var tournament = this.getAt(this.visibleTournamentIndex);
            tournament.updateTeam();
        };
        TournamentsContainer.prototype.startCelebrating = function () {
            var tournament = this.getAt(this.visibleTournamentIndex);
            tournament.startCelebrating();
        };
        TournamentsContainer.prototype.stopCelebrating = function () {
            var tournament = this.getAt(this.visibleTournamentIndex);
            tournament.stopCelebrating();
        };
        return TournamentsContainer;
    }(Phaser.Group));
    TournamentsContainer.DELTA_Y = 400;
    SuperSoccerNoggins.TournamentsContainer = TournamentsContainer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var UpgradesContainer = (function (_super) {
        __extends(UpgradesContainer, _super);
        function UpgradesContainer(game, visibleTournamentIndex) {
            var _this = _super.call(this, game, null, "upgrades-container") || this;
            _this.x = 438;
            var title = new Phaser.Image(_this.game, 54, 48, "texture_atlas_1", "upgrades.png");
            _this.add(title);
            _this.threadmill = new SuperSoccerNoggins.ThreadMill(_this.game, visibleTournamentIndex);
            _this.add(_this.threadmill);
            _this.creditsLabel = new Phaser.Text(_this.game, UpgradesContainer.CREDITS_LABEL_PX, 195, SuperSoccerNoggins.GameVars.getInstance().formatNumber(SuperSoccerNoggins.GameVars.getInstance().credits), { font: "22px Open Sans", fontWeight: "800", fill: "#1A3544", stroke: "#C6F4F7", strokeThickness: 4 });
            _this.creditsLabel.anchor.setTo(.5, .5);
            _this.add(_this.creditsLabel);
            _this.bankNotesicon = new Phaser.Image(_this.game, _this.creditsLabel.x + _this.creditsLabel.width / 2 + 6, 182, "texture_atlas_1", "icon-banknotes.png");
            _this.add(_this.bankNotesicon);
            var abilities = [SuperSoccerNoggins.GameConstants.ABILITY_RUSH, SuperSoccerNoggins.GameConstants.ABILITY_BACKTRACK, SuperSoccerNoggins.GameConstants.ABILITY_JUMP, SuperSoccerNoggins.GameConstants.ABILITY_KICK];
            var abilityContainer;
            _this.abilities = [];
            for (var i = 0; i < abilities.length; i++) {
                abilityContainer = new SuperSoccerNoggins.AbilityContainer(_this.game, abilities[i]);
                abilityContainer.y = 216 + i * 54;
                abilityContainer.name = abilities[i];
                _this.add(abilityContainer);
                _this.abilities.push(abilityContainer);
            }
            return _this;
        }
        UpgradesContainer.prototype.abilityPurchased = function (abilityType) {
            this.creditsLabel.text = SuperSoccerNoggins.GameVars.getInstance().formatNumber(SuperSoccerNoggins.GameVars.getInstance().credits);
            this.game.add.tween(this.creditsLabel.scale)
                .to({ x: 1.15, y: .92 }, 350, Phaser.Easing.Elastic.Out, true, 0, 0, true);
            var ability;
            var i;
            for (i = 0; i < 4; i++) {
                ability = this.abilities[i];
                if (ability.name === abilityType) {
                    break;
                }
            }
            ability.purchased();
            for (i = 0; i < 4; i++) {
                this.abilities[i].updateUpgradeBar();
            }
            this.threadmill.abilityPurchased();
        };
        return UpgradesContainer;
    }(Phaser.Group));
    UpgradesContainer.CREDITS_LABEL_PX = 86;
    SuperSoccerNoggins.UpgradesContainer = UpgradesContainer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var BackgroundManager = (function (_super) {
        __extends(BackgroundManager, _super);
        function BackgroundManager(game) {
            var _this = _super.call(this, game, null, "background-manager") || this;
            var backgroundImage;
            if (SuperSoccerNoggins.GameConstants.DEVELOPMENT) {
                backgroundImage = new Phaser.Image(_this.game, 0, 0, "texture_atlas_0", "development_background.png");
            }
            else {
                backgroundImage = new Phaser.Image(_this.game, 0, 0, "texture_atlas_season", "match-background-00.png");
            }
            _this.add(backgroundImage);
            if (SuperSoccerNoggins.GameVars.getInstance().matchID === 0) {
                _this.controlsImage = new Phaser.Image(_this.game, 495, 170, "texture_atlas_1", "controls.png");
                _this.controlsImage.anchor.set(.5);
                _this.add(_this.controlsImage);
                _this.controlsImageTimerEvent = _this.game.time.events.add(15000, function () {
                    this.game.add.tween(this.controlsImage)
                        .to({ alpha: 0 }, 400, Phaser.Easing.Cubic.Out, true, 1000)
                        .onComplete.add(function () {
                        this.controlsImage.kill();
                        this.controlsImage = null;
                    }, this);
                }, _this);
            }
            else {
                _this.controlsImage = null;
                _this.controlsImageTimerEvent = null;
            }
            return _this;
        }
        BackgroundManager.prototype.destroy = function (destroyChildren, soft) {
            if (this.controlsImageTimerEvent) {
                this.controlsImageTimerEvent.pendingDelete = true;
            }
            _super.prototype.destroy.call(this, destroyChildren, soft);
        };
        BackgroundManager.prototype.pause = function () {
            if (this.controlsImage) {
                this.controlsImage.visible = false;
            }
        };
        BackgroundManager.prototype.resume = function () {
            if (this.controlsImage) {
                this.controlsImage.visible = true;
            }
        };
        return BackgroundManager;
    }(Phaser.Group));
    SuperSoccerNoggins.BackgroundManager = BackgroundManager;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var BadgeAchievement = (function (_super) {
        __extends(BadgeAchievement, _super);
        function BadgeAchievement(game, matchEndLayer, unlockedAchievementID) {
            var _this = _super.call(this, game, null, "badge-achievement") || this;
            _this.matchEndLayer = matchEndLayer;
            _this.shown = false;
            _this.x = SuperSoccerNoggins.GameConstants.GAME_WIDTH - 74;
            _this.y = 68;
            _this.visible = false;
            _this.scale.set(0);
            _this.prize = SuperSoccerNoggins.AchievementsManager.getInstance().achievementsData[unlockedAchievementID].prize;
            var background = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "badge-achievement-unlocked.png");
            background.anchor.set(.5);
            _this.add(background);
            var achievementTextureName = "achievement_" + (unlockedAchievementID + 1) + ".png";
            _this.achievementImage = new Phaser.Image(_this.game, 2, 8, "texture_atlas_1", achievementTextureName);
            _this.achievementImage.anchor.set(.5);
            _this.achievementImage.scale.set(0.8);
            _this.add(_this.achievementImage);
            var i = SuperSoccerNoggins.AchievementsManager.getInstance().achievementsData[unlockedAchievementID].description.indexOf(":");
            _this.achievementLabel = new Phaser.Text(_this.game, 18, 38, SuperSoccerNoggins.AchievementsManager.getInstance().achievementsData[unlockedAchievementID].description.substr(0, i), { font: "12px Open Sans", fontWeight: "600", fill: "#FDC62E" });
            _this.achievementLabel.x -= _this.achievementLabel.width / 2;
            _this.achievementLabel.scale.x = .75;
            _this.add(_this.achievementLabel);
            return _this;
        }
        BadgeAchievement.prototype.show = function () {
            this.visible = true;
            this.game.add.tween(this.scale)
                .to({ x: 1, y: 1 }, 250, Phaser.Easing.Elastic.Out, true)
                .onComplete.add(function () {
                this.shown = true;
                this.matchEndLayer.refillBriefcase(this.prize);
            }, this);
        };
        BadgeAchievement.prototype.dissapear = function (nextAchiev) {
            this.game.add.tween(this.scale).to({ x: 0, y: 0 }, 500, Phaser.Easing.Cubic.In, true);
            if (typeof nextAchiev === "undefined") {
                this.game.add.tween(this.scale).to({ x: 0, y: 0 }, 1000, Phaser.Easing.Cubic.In, true);
                this.matchEndLayer.nextMatchButton.visible = true;
                return;
            }
            this.game.time.events.add(1000, function () {
                this.achievementImage.frameName = "achievement_" + (nextAchiev + 1) + ".png";
                var i = SuperSoccerNoggins.AchievementsManager.getInstance().achievementsData[nextAchiev].description.indexOf(":");
                this.prize = SuperSoccerNoggins.AchievementsManager.getInstance().achievementsData[nextAchiev].prize;
                this.achievementLabel.text = SuperSoccerNoggins.AchievementsManager.getInstance().achievementsData[nextAchiev].description.substr(0, i);
                this.show();
            }, this);
        };
        return BadgeAchievement;
    }(Phaser.Group));
    SuperSoccerNoggins.BadgeAchievement = BadgeAchievement;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var Briefcase = (function (_super) {
        __extends(Briefcase, _super);
        function Briefcase(game, matchEndLayer, badgeAchievement) {
            var _this = _super.call(this, game, null, "briefcase") || this;
            _this.achievement = false;
            _this.matchEndLayer = matchEndLayer;
            _this.bankNotesInside = 0;
            _this.bankNotesInsideAchievement = 0;
            _this.badgeAchievement = badgeAchievement;
            _this.star = new Phaser.Image(_this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, Briefcase.BRIEFCASE_PY, "texture_atlas_1", "star-briefcase.png");
            _this.star.anchor.set(.5);
            _this.star.scale.set(0);
            _this.add(_this.star);
            _this.briefCaseSprite = _this.create(-200, Briefcase.BRIEFCASE_PY, "texture_atlas_1", "briefcase_0001.png");
            _this.briefCaseSprite.anchor.set(.5);
            _this.briefCaseSprite.animations.add("open", Phaser.Animation.generateFrameNames("briefcase_", 1, 5, ".png", 4), 20, true);
            _this.briefCaseSprite.animations.add("close", Phaser.Animation.generateFrameNames("briefcase_", 5, 12, ".png", 4), 20, true);
            _this.add(_this.briefCaseSprite);
            _this.bankNoteContainer = new Phaser.Group(_this.game);
            _this.add(_this.bankNoteContainer);
            _this.creditsLabel = new Phaser.Text(_this.game, Briefcase.CREDITS_PX, 315, "0", { font: "22px Open Sans", fontWeight: "600", fill: "#FCDB29", align: "center" });
            _this.creditsLabel.x -= _this.creditsLabel.width / 2;
            _this.creditsLabel.visible = false;
            _this.add(_this.creditsLabel);
            return _this;
        }
        Briefcase.prototype.show = function (achievement) {
            this.achievement = achievement;
            this.game.add.tween(this.briefCaseSprite)
                .to({ x: SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2 + 26 }, 400, Phaser.Easing.Cubic.Out, true, 250)
                .onComplete.add(this.openBriefcase, this);
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("swish");
        };
        Briefcase.prototype.closeBriefcase = function () {
            this.creditsLabel.visible = false;
            this.game.add.tween(this.bankNoteContainer)
                .to({ alpha: 0 }, 200, Phaser.Easing.Cubic.Out, true);
            var closeAnimation = this.briefCaseSprite.play("close", 24, false);
            closeAnimation.onComplete.add(this.disappear, this);
            this.game.add.tween(this.star.scale)
                .to({ x: 0, y: 0 }, 500, Phaser.Easing.Elastic.In, true, 150)
                .onComplete.add(function () {
                this.star.kill();
            }, this);
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("briefcase_close");
        };
        Briefcase.prototype.showBanknotes = function (achievement, prize) {
            var banknote;
            var amount;
            if (achievement) {
                amount = prize / 100000;
            }
            else {
                amount = 10;
            }
            for (var i = 0; i < amount; i++) {
                if (achievement) {
                    banknote = new Phaser.Image(this.game, 540, 60, "texture_atlas_1", "achievement_bill.png");
                    banknote.anchor.set(0.10);
                }
                else {
                    banknote = new Phaser.Image(this.game, 700, 60, "texture_atlas_1", "banknote-loose.png");
                }
                this.bankNoteContainer.add(banknote);
                this.game.add.tween(banknote)
                    .to({ x: 290, y: 247 - 5 * (i + this.bankNotesInside) }, 400, Phaser.Easing.Cubic.Out, true, 200 + 125 * i)
                    .onComplete.add(this.updateCreditsCounter, this, 0, [i, amount, achievement]);
            }
        };
        Briefcase.prototype.openBriefcase = function () {
            var openAnimation = this.briefCaseSprite.play("open", 24, false);
            openAnimation.onComplete.add(function () {
                if (!this.achievement) {
                    this.matchEndLayer.onBriefcaseOpened();
                }
            }, this);
            this.game.add.tween(this.star.scale)
                .to({ x: 1, y: 1 }, 500, Phaser.Easing.Elastic.Out, true, 150);
            this.game.add.tween(this.star)
                .to({ angle: 360 }, 8000, Phaser.Easing.Linear.None, true, 0, -1, false);
        };
        Briefcase.prototype.updateCreditsCounter = function (sender, event, args) {
            var i = args[0];
            var amount = args[1];
            var achievement = args[2];
            if (i === Math.ceil(amount - 1)) {
                this.game.time.events.add(350, function () {
                    this.matchEndLayer.banknotesInsideBriefcase(achievement);
                }, this);
            }
            else {
                if (i === 0) {
                    this.creditsLabel.visible = true;
                }
            }
            if (achievement) {
                this.creditsLabel.text = SuperSoccerNoggins.GameVars.getInstance().formatNumber((this.bankNotesInsideAchievement + 1) * 100000);
                this.bankNotesInsideAchievement++;
            }
            else {
                this.creditsLabel.text = SuperSoccerNoggins.GameVars.getInstance().formatNumber((this.bankNotesInside + 1) * 10000);
            }
            this.creditsLabel.x = Briefcase.CREDITS_PX - this.creditsLabel.width / 2;
            this.bankNotesInside++;
        };
        Briefcase.prototype.disappear = function () {
            this.game.add.tween(this.briefCaseSprite)
                .to({ x: SuperSoccerNoggins.GameConstants.GAME_WIDTH + 200 }, 400, Phaser.Easing.Cubic.Out, true)
                .onComplete.add(function () {
                this.matchEndLayer.briefcaseDisappeared();
            }, this);
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("swish");
        };
        return Briefcase;
    }(Phaser.Group));
    Briefcase.BRIEFCASE_PY = 266;
    Briefcase.CREDITS_PX = 322;
    SuperSoccerNoggins.Briefcase = Briefcase;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var DebuggingContainer = (function (_super) {
        __extends(DebuggingContainer, _super);
        function DebuggingContainer(game) {
            var _this = _super.call(this, game, null, "debugging-container") || this;
            _this.fpsLabel = new Phaser.Text(_this.game, 4, SuperSoccerNoggins.GameConstants.GAME_HEIGHT - 18, "0", { font: "16px Arial", fill: "#ffffff" });
            _this.add(_this.fpsLabel);
            var levelLabel = new Phaser.Text(_this.game, 90, SuperSoccerNoggins.GameConstants.GAME_HEIGHT - 18, "level:" + (SuperSoccerNoggins.GameVars.getInstance().matchID + 1), { font: "16px Arial", fill: "#ffffff" });
            _this.add(levelLabel);
            _this.framesCounter = 0;
            _this.ballSpeedLabelX = new Phaser.Text(_this.game, 220, SuperSoccerNoggins.GameConstants.GAME_HEIGHT - 18, "", { font: "16px Arial", fill: "#ffffff" });
            _this.add(_this.ballSpeedLabelX);
            _this.ballSpeedLabelY = new Phaser.Text(_this.game, 400, SuperSoccerNoggins.GameConstants.GAME_HEIGHT - 18, "", { font: "16px Arial", fill: "#ffffff" });
            _this.add(_this.ballSpeedLabelY);
            _this.playerRushLabel = new Phaser.Text(_this.game, 450, 50, "player rush speed:", { font: "11px Arial", fill: "#333333" });
            _this.add(_this.playerRushLabel);
            _this.playerBacktrackLabel = new Phaser.Text(_this.game, 450, 60, "player backtrack speed:", { font: "11px Arial", fill: "#333333" });
            _this.add(_this.playerBacktrackLabel);
            _this.playerJumpLabel = new Phaser.Text(_this.game, 450, 70, "player jump speed:", { font: "11px Arial", fill: "#333333" });
            _this.add(_this.playerJumpLabel);
            return _this;
        }
        DebuggingContainer.prototype.update = function () {
            _super.prototype.update.call(this);
            this.fpsLabel.text = "fps: " + this.game.time.fps;
            this.playerRushLabel.text = "player rush speed:" + SuperSoccerNoggins.Player.currentInstance.rushSpeed;
            this.playerBacktrackLabel.text = "player backtrack speed:" + SuperSoccerNoggins.Player.currentInstance.backtrackSpeed;
            this.playerJumpLabel.text = "player jump speed:" + SuperSoccerNoggins.Player.currentInstance.jumpSpeed;
            if (SuperSoccerNoggins.BallsManager.currentInstance.ball.body && this.framesCounter % 10 === 0) {
                this.framesCounter = 0;
                var ballSpeedX = Math.floor(SuperSoccerNoggins.BallsManager.currentInstance.ball.body.velocity.x);
                var ballSpeedY = Math.floor(SuperSoccerNoggins.BallsManager.currentInstance.ball.body.velocity.y);
                this.ballSpeedLabelX.text = "ball speed x: " + ballSpeedX.toString();
                this.ballSpeedLabelY.text = "ball speed y: " + ballSpeedY.toString();
            }
            this.framesCounter++;
        };
        return DebuggingContainer;
    }(Phaser.Group));
    SuperSoccerNoggins.DebuggingContainer = DebuggingContainer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var EffectsContainer = (function (_super) {
        __extends(EffectsContainer, _super);
        function EffectsContainer(game) {
            var _this = _super.call(this, game, null, "effects-container") || this;
            var effect;
            for (var i = 0; i < EffectsContainer.MAX_EFFECTS_NUMBER; i++) {
                effect = _this.create(0, 0, "texture_atlas_1");
                effect.anchor.set(.5);
                effect.animations.add("splash", Phaser.Animation.generateFrameNames("water_splash_", 1, 6, ".png", 4), 16, true);
                effect.kill();
            }
            return _this;
        }
        EffectsContainer.prototype.addEffect = function (x, y, surfaceType, ballSpeed) {
            if (ballSpeed < 15 && surfaceType === SuperSoccerNoggins.GameConstants.SURFACE_WATER) {
                return;
            }
            var effect = this.getFirstDead();
            var tweenDuration;
            if (effect) {
                effect.reset(x, y);
                effect.alpha = 1;
                effect.angle = 0;
                effect.anchor.set(.5);
                effect.scale.set(1);
                switch (surfaceType) {
                    case SuperSoccerNoggins.GameConstants.SURFACE_GOAL_BAR:
                        effect.frameName = "hit-effect.png";
                        effect.scale.set(.5);
                        tweenDuration = 350;
                        break;
                    case SuperSoccerNoggins.GameConstants.SURFACE_BUMPER:
                        effect.frameName = "hit-effect.png";
                        tweenDuration = 350;
                        break;
                    case SuperSoccerNoggins.GameConstants.SURFACE_NOGGIN:
                        effect.frameName = "hit-effect-noggin.png";
                        tweenDuration = 350;
                        break;
                    case SuperSoccerNoggins.GameConstants.SURFACE_STAGE_WALLS:
                        effect.frameName = "hit-effect.png";
                        tweenDuration = 350;
                        break;
                    case SuperSoccerNoggins.GameConstants.SURFACE_FIELD:
                        effect.frameName = "fx_impacto_cesped.png";
                        tweenDuration = 350;
                        break;
                    case SuperSoccerNoggins.GameConstants.SURFACE_WATER:
                        effect.frameName = "water_splash_0001.png";
                        effect.animations.play("splash", 16, false);
                        effect.anchor.set(.5, 1);
                        if (ballSpeed < 30) {
                            effect.scale.set(.5);
                        }
                        tweenDuration = 350;
                        if (SuperSoccerNoggins.BallsManager.currentInstance.ball.isBig) {
                            effect.y += 21;
                        }
                        break;
                    case SuperSoccerNoggins.GameConstants.SURFACE_SMOKE_JETPACK:
                        effect.frameName = "jetpack_smoke.png";
                        tweenDuration = 500;
                        effect.angle = Math.random() * 360;
                        break;
                    default:
                        break;
                }
                this.game.add.tween(effect)
                    .to({ alpha: 0 }, tweenDuration, Phaser.Easing.Cubic.Out, true)
                    .onComplete.add(function (effect) {
                    effect.kill();
                }, this, 0, [effect]);
            }
        };
        return EffectsContainer;
    }(Phaser.Group));
    EffectsContainer.MAX_EFFECTS_NUMBER = 10;
    SuperSoccerNoggins.EffectsContainer = EffectsContainer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var GUI = (function (_super) {
        __extends(GUI, _super);
        function GUI(game) {
            var _this = _super.call(this, game, null, "gui") || this;
            _this.miniclipLogo = new Phaser.Button(_this.game, 5, 5, "texture_atlas_1", _this.onClickLogo, _this);
            _this.miniclipLogo.setFrames("miniclip-logo-on.png", "miniclip-logo-off.png", "miniclip-logo-on.png");
            _this.miniclipLogo.forceOut = true;
            _this.add(_this.miniclipLogo);
            _this.pauseButton = new Phaser.Button(_this.game, 586, 8, "texture_atlas_1", _this.onPause, _this);
            _this.pauseButton.setFrames("button-pause-on.png", "button-pause-off.png", "button-pause-on.png");
            _this.pauseButton.forceOut = true;
            _this.add(_this.pauseButton);
            var key = _this.game.input.keyboard.addKey(Phaser.Keyboard.P);
            key.onDown.add(_this.onPause, _this);
            _this.cheatButton = null;
            return _this;
        }
        GUI.prototype.onRefereeDisappeared = function () {
            if (SuperSoccerNoggins.GameConstants.DEVELOPMENT) {
                this.cheatButton = new Phaser.Button(this.game, 5, 55, "texture_atlas_0", this.onClickCheatButton, this);
                this.cheatButton.setFrames("button-cheat-menu-on.png", "button-cheat-menu-off.png", "button-cheat-menu-on.png");
                this.add(this.cheatButton);
            }
        };
        GUI.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
        };
        GUI.prototype.pause = function () {
            this.pauseButton.visible = false;
            this.miniclipLogo.visible = false;
            if (this.cheatButton) {
                this.cheatButton.visible = false;
            }
        };
        GUI.prototype.resume = function () {
            this.pauseButton.visible = true;
            this.miniclipLogo.visible = true;
            if (this.cheatButton) {
                this.cheatButton.visible = true;
            }
        };
        GUI.prototype.onPause = function () {
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
            if (SuperSoccerNoggins.GameVars.paused) {
                return;
            }
            SuperSoccerNoggins.MatchManager.currentInstance.pauseGame();
        };
        GUI.prototype.onClickCheatButton = function () {
            SuperSoccerNoggins.MatchManager.currentInstance.onClickCheatMenu();
        };
        GUI.prototype.onClickLogo = function () {
            var win = window.open("https://www.miniclip.com", "_blank");
            win.focus();
        };
        return GUI;
    }(Phaser.Group));
    SuperSoccerNoggins.GUI = GUI;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var HUD = (function (_super) {
        __extends(HUD, _super);
        function HUD(game) {
            var _this = _super.call(this, game, null, "hud") || this;
            _this.redFrame = null;
            _this.goldenGoalImage = null;
            _this.scoreLabel = new Phaser.BitmapText(_this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 0, "digital-display", SuperSoccerNoggins.GameVars.getInstance().adversaryGoals.toString() + "-" + SuperSoccerNoggins.GameVars.getInstance().playerGoals.toString(), 42);
            _this.scoreLabel.x -= _this.scoreLabel.width / 2;
            _this.add(_this.scoreLabel);
            var adversaryNameStr;
            var adversaryFlagName;
            var playerNameStr;
            var playerFlagName;
            if (SuperSoccerNoggins.GameVars.ai) {
                adversaryNameStr = SuperSoccerNoggins.GameVars.getInstance().teamsData[SuperSoccerNoggins.GameVars.getInstance().adversaryTeamID].name;
                adversaryFlagName = "flag-" + SuperSoccerNoggins.GameVars.getInstance().adversaryTeamID + ".png";
                playerNameStr = SuperSoccerNoggins.GameVars.getInstance().teamsData[SuperSoccerNoggins.GameVars.getInstance().playerTeamID].name;
                playerFlagName = "flag-" + SuperSoccerNoggins.GameVars.getInstance().playerTeamID + ".png";
            }
            else {
                adversaryNameStr = SuperSoccerNoggins.GameVars.getInstance().teamsData[SuperSoccerNoggins.GameVars.adversaryTeamIDPVP].name;
                adversaryFlagName = "flag-" + SuperSoccerNoggins.GameVars.adversaryTeamIDPVP + ".png";
                playerNameStr = SuperSoccerNoggins.GameVars.getInstance().teamsData[SuperSoccerNoggins.GameVars.playerTeamIDPVP].name;
                playerFlagName = "flag-" + SuperSoccerNoggins.GameVars.playerTeamIDPVP + ".png";
            }
            var adversaryFlag = new Phaser.Image(_this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2 - 60, 10, "texture_atlas_1", adversaryFlagName);
            adversaryFlag.anchor.x = 1;
            adversaryFlag.scale.setTo(.7);
            _this.add(adversaryFlag);
            var playerFlag = new Phaser.Image(_this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2 + 60, 10, "texture_atlas_1", playerFlagName);
            playerFlag.scale.setTo(.7);
            _this.add(playerFlag);
            var adversaryNameLabel = new Phaser.Text(_this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2 - 60, 36, adversaryNameStr.toUpperCase(), { font: "13px Open Sans", fontWeight: "800", fill: "#1A3544" });
            adversaryNameLabel.x -= adversaryNameLabel.width;
            _this.add(adversaryNameLabel);
            var playerNameLabel = new Phaser.Text(_this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2 + 60, 36, playerNameStr.toUpperCase(), { font: "13px Open Sans", fontWeight: "800", fill: "#1A3544" });
            _this.add(playerNameLabel);
            if (SuperSoccerNoggins.GameVars.ai || (!SuperSoccerNoggins.GameVars.ai && SuperSoccerNoggins.GameVars.pvpMatchType === SuperSoccerNoggins.GameConstants.TIMED_MATCH)) {
                _this.timer = new SuperSoccerNoggins.Timer(_this.game);
                _this.add(_this.timer);
            }
            else {
                _this.timer = null;
            }
            _this.messageContainer = new SuperSoccerNoggins.MessageContainer(_this.game);
            _this.add(_this.messageContainer);
            if (SuperSoccerNoggins.GameConstants.DEVELOPMENT) {
                _this.debuggingContainer = new SuperSoccerNoggins.DebuggingContainer(_this.game);
                _this.add(_this.debuggingContainer);
            }
            else {
                _this.debuggingContainer = null;
            }
            if (!SuperSoccerNoggins.GameVars.ai) {
                if (SuperSoccerNoggins.GameVars.pvpMatchType === SuperSoccerNoggins.GameConstants.GOLDEN_GOAL_MATCH) {
                    _this.pvpGoldenGoalMatch();
                }
                else if (SuperSoccerNoggins.GameVars.pvpMatchType === SuperSoccerNoggins.GameConstants.FIRST_TO_SEVEN_MATCH) {
                    _this.pvpFirstToSevenMatch();
                }
                else {
                    _this.timedMatch();
                }
            }
            return _this;
        }
        HUD.prototype.startGame = function () {
            if (this.timer) {
                this.timer.start();
            }
        };
        HUD.prototype.pause = function () {
            if (this.timer) {
                this.timer.pause();
            }
            if (this.debuggingContainer) {
                this.debuggingContainer.visible = false;
            }
        };
        HUD.prototype.resume = function () {
            if (this.timer) {
                this.timer.resume();
            }
            if (this.debuggingContainer) {
                this.debuggingContainer.visible = true;
            }
        };
        HUD.prototype.goalScored = function (playerGoal, isGoldenGoal) {
            this.scoreLabel.text = SuperSoccerNoggins.GameVars.getInstance().adversaryGoals.toString() + "-" + SuperSoccerNoggins.GameVars.getInstance().playerGoals.toString();
            this.scoreLabel.x = SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2 - this.scoreLabel.width / 2;
            if (!isGoldenGoal) {
                if (playerGoal) {
                    this.messageContainer.showMessage(SuperSoccerNoggins.GameConstants.MESSAGE_PLAYER_GOAL);
                }
                else {
                    this.messageContainer.showMessage(SuperSoccerNoggins.GameConstants.MESSAGE_ADVERSARY_GOAL);
                }
            }
        };
        HUD.prototype.activateGoldenGoal = function () {
            if (this.timer) {
                this.timer.destroy();
            }
            this.goldenGoalImage = new Phaser.Image(this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 75, "texture_atlas_1", "golden-goal_tab.png");
            this.goldenGoalImage.anchor.set(.5);
            this.goldenGoalImage.scale.setTo(0);
            this.add(this.goldenGoalImage);
            this.game.add.tween(this.goldenGoalImage.scale)
                .to({ x: 1, y: 1 }, 250, Phaser.Easing.Elastic.Out, true, 300);
            this.redFrame = new Phaser.Image(this.game, 0, 0, "texture_atlas_1", "frame_tension.png");
            this.redFrame.scale.set(2);
            this.redFrame.alpha = 0;
            this.add(this.redFrame);
            this.game.add.tween(this.redFrame)
                .to({ alpha: 1 }, 500, Phaser.Easing.Cubic.Out, true, 300, -1, true);
        };
        HUD.prototype.matchEnded = function () {
            if (SuperSoccerNoggins.GameVars.getInstance().goldenGoal) {
                if (this.goldenGoalImage) {
                    this.goldenGoalImage.destroy();
                }
                if (this.redFrame) {
                    this.redFrame.destroy();
                }
            }
        };
        HUD.prototype.pvpGoldenGoalMatch = function () {
            this.goldenGoalImage = new Phaser.Image(this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 75, "texture_atlas_1", "golden-goal_tab.png");
            this.goldenGoalImage.anchor.set(.5);
            this.goldenGoalImage.scale.setTo(0);
            this.add(this.goldenGoalImage);
            this.game.add.tween(this.goldenGoalImage.scale)
                .to({ x: 1, y: 1 }, 250, Phaser.Easing.Elastic.Out, true, 300)
                .onComplete.add(function () {
                this.game.add.tween(this.goldenGoalImage.scale)
                    .to({ x: 0.1, y: 0.1 }, 750, Phaser.Easing.Elastic.In, true, 3000)
                    .onComplete.add(function () {
                    this.goldenGoalImage.destroy();
                }, this);
            }, this);
        };
        HUD.prototype.pvpFirstToSevenMatch = function () {
            this.firstToSevenlImage = new Phaser.Image(this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 75, "texture_atlas_1", "first-to-seven.png");
            this.firstToSevenlImage.anchor.set(.5);
            this.firstToSevenlImage.scale.setTo(0);
            this.add(this.firstToSevenlImage);
            this.game.add.tween(this.firstToSevenlImage.scale)
                .to({ x: 1, y: 1 }, 250, Phaser.Easing.Elastic.Out, true, 300)
                .onComplete.add(function () {
                this.game.add.tween(this.firstToSevenlImage.scale)
                    .to({ x: 0.1, y: 0.1 }, 750, Phaser.Easing.Elastic.In, true, 3000)
                    .onComplete.add(function () {
                    this.firstToSevenlImage.destroy();
                }, this);
            }, this);
        };
        HUD.prototype.timedMatch = function () {
            this.timedImage = new Phaser.Image(this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 105, "texture_atlas_1", "timed_match.png");
            this.timedImage.anchor.set(.5);
            this.timedImage.scale.setTo(0);
            this.add(this.timedImage);
            this.game.add.tween(this.timedImage.scale)
                .to({ x: 1, y: 1 }, 250, Phaser.Easing.Elastic.Out, true, 300)
                .onComplete.add(function () {
                this.game.add.tween(this.timedImage.scale)
                    .to({ x: 0.1, y: 0.1 }, 750, Phaser.Easing.Elastic.In, true, 3000)
                    .onComplete.add(function () {
                    this.timedImage.destroy();
                }, this);
            }, this);
        };
        return HUD;
    }(Phaser.Group));
    SuperSoccerNoggins.HUD = HUD;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var MatchState = (function (_super) {
        __extends(MatchState, _super);
        function MatchState() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        MatchState.prototype.init = function (args) {
            MatchState.currentInstance = this;
            if (args) {
                SuperSoccerNoggins.GameManager.getInstance().onMatchSelected(args[0], args[1], args[2]);
            }
            this.pauseLayer = null;
            this.leavingScene = false;
        };
        MatchState.prototype.create = function () {
            this.matchManager = new SuperSoccerNoggins.MatchManager(this.game);
            this.backgroundManager = new SuperSoccerNoggins.BackgroundManager(this.game);
            this.add.existing(this.backgroundManager);
            this.adversaryAI = new SuperSoccerNoggins.AdversaryAI(this.game);
            this.rivalBodyguardAI = new SuperSoccerNoggins.RivalBodyguardAI(this.game);
            this.stageContainer = new SuperSoccerNoggins.StageContainer(this.game);
            this.add.existing(this.stageContainer);
            this.playerController = new SuperSoccerNoggins.PlayerController(this.game);
            this.playerController.player = this.stageContainer.player;
            this.adversaryManualController = new SuperSoccerNoggins.AdversaryManualController(this.game);
            this.adversaryManualController.setAdversary(this.stageContainer.adversary);
            this.gui = new SuperSoccerNoggins.GUI(this.game);
            this.add.existing(this.gui);
            this.hud = new SuperSoccerNoggins.HUD(this.game);
            this.add.existing(this.hud);
            this.playerGoalSounds = ["goal_1", "goal_2", "goal_3", "goal_4", "goal_5", "goal_6", "goal_7"];
            this.adversaryGoalSound = ["goal_1", "goal_2"];
            SuperSoccerNoggins.AudioManager.getInstance().playLoop("match_music");
            SuperSoccerNoggins.AudioManager.getInstance().setVolumePlayingLoop(0.3);
            this.game.camera.flash(SuperSoccerNoggins.GameConstants.COLOR_FADE_IN_OUT, SuperSoccerNoggins.GameConstants.TIME_FADE_IN_OUT, false);
        };
        MatchState.prototype.shutdown = function () {
            MatchState.currentInstance = null;
            this.matchManager.destroy();
            if (this.playerController) {
                this.playerController.destroy();
            }
            _super.prototype.shutdown.call(this);
        };
        MatchState.prototype.update = function () {
            if (SuperSoccerNoggins.GameVars.ai) {
                this.adversaryAI.update();
                this.rivalBodyguardAI.update();
            }
            else {
                this.adversaryManualController.update();
            }
            if (this.playerController) {
                this.playerController.update();
            }
            _super.prototype.update.call(this);
        };
        MatchState.prototype.render = function () {
            if (SuperSoccerNoggins.GameConstants.SHOW_PHYSICS_BODIES) {
                this.game.debug.box2dWorld();
            }
        };
        MatchState.prototype.startGame = function (right) {
            this.hud.startGame();
            this.stageContainer.startGame(right);
        };
        MatchState.prototype.pauseGame = function () {
            this.pauseLayer = new SuperSoccerNoggins.PauseLayer(this.game);
            this.add.existing(this.pauseLayer);
            this.gui.pause();
            this.hud.pause();
            this.stageContainer.pause();
            this.backgroundManager.pause();
            SuperSoccerNoggins.AudioManager.getInstance().setVolumePlayingLoop(.3);
        };
        MatchState.prototype.exitPauseMenu = function () {
            this.pauseLayer.destroy();
            this.gui.resume();
            this.hud.resume();
            this.stageContainer.resume();
            this.backgroundManager.resume();
        };
        MatchState.prototype.showCheatMenu = function () {
            this.cheatLayer = new SuperSoccerNoggins.CheatLayer(this.game);
            this.add.existing(this.cheatLayer);
            this.gui.pause();
        };
        MatchState.prototype.hideCheatMenu = function () {
            this.cheatLayer.destroy();
            this.gui.resume();
        };
        MatchState.prototype.onGoal = function (playerGoal, isGoldenGoal) {
            this.hud.goalScored(playerGoal, isGoldenGoal);
            if (!isGoldenGoal) {
                this.stageContainer.goalScored();
            }
        };
        MatchState.prototype.activateGoldenGoal = function () {
            SuperSoccerNoggins.AudioManager.getInstance().stopLoop(SuperSoccerNoggins.AudioManager.getInstance().currentTrack);
            SuperSoccerNoggins.AudioManager.getInstance().setVolumePlayingLoop(1);
            SuperSoccerNoggins.AudioManager.getInstance().playLoop("tension_golden_goal");
            this.hud.activateGoldenGoal();
            this.stageContainer.activateGoldenGoal();
        };
        MatchState.prototype.matchEnded = function () {
            this.stageContainer.matchEnded();
            this.hud.matchEnded();
            this.gui.pause();
            this.playerController.destroy();
            this.playerController = null;
            SuperSoccerNoggins.AudioManager.getInstance().stopLoop(SuperSoccerNoggins.AudioManager.getInstance().currentTrack);
        };
        MatchState.prototype.onRefereeWhistled = function () {
            this.stageContainer.removePlayers();
            if (SuperSoccerNoggins.GameVars.ai) {
                this.matchEndLayer = new SuperSoccerNoggins.MatchEndLayer(this.game);
                this.add.existing(this.matchEndLayer);
            }
            else {
                this.matchEndLayerPVP = new SuperSoccerNoggins.MatchEndLayerPVP(this.game);
                this.add.existing(this.matchEndLayerPVP);
            }
        };
        MatchState.prototype.resign = function () {
            this.game.state.restart(true, false);
        };
        MatchState.prototype.replay = function () {
            if (this.leavingScene) {
                return;
            }
            this.leavingScene = true;
            SuperSoccerNoggins.AudioManager.getInstance().stopEffect(SuperSoccerNoggins.AudioManager.getInstance().currentEffect);
            this.game.time.events.add(100, function () {
                SuperSoccerNoggins.AudioManager.getInstance().stopEffect(SuperSoccerNoggins.AudioManager.getInstance().currentEffect);
                this.game.state.restart(true, false);
            }, this);
        };
        MatchState.prototype.gotToPVPConfiguration = function () {
            this.game.state.start("LocalMultiPlayerState", true, false);
        };
        MatchState.prototype.reset = function () {
            if (this.leavingScene) {
                return;
            }
            this.leavingScene = true;
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
            this.game.time.events.add(100, function () {
                SuperSoccerNoggins.AudioManager.getInstance().stopEffect(SuperSoccerNoggins.AudioManager.getInstance().currentEffect);
                this.game.state.restart(true, false);
            }, this);
        };
        MatchState.prototype.quit = function () {
            if (this.leavingScene) {
                return;
            }
            this.leavingScene = true;
            this.game.camera.fade(SuperSoccerNoggins.GameConstants.COLOR_FADE_IN_OUT, SuperSoccerNoggins.GameConstants.TIME_FADE_IN_OUT, true);
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
            this.game.camera.onFadeComplete.add(function () {
                SuperSoccerNoggins.AudioManager.getInstance().stopEffect(SuperSoccerNoggins.AudioManager.getInstance().currentEffect);
                if (SuperSoccerNoggins.GameVars.ai) {
                    this.game.state.start("MatchSelectionState", true, false);
                }
                else {
                    this.game.state.start("LocalMultiPlayerState", true, false);
                }
            }, this);
        };
        MatchState.prototype.nextMatch = function () {
            if (this.leavingScene) {
                return;
            }
            this.leavingScene = true;
            this.game.camera.fade(SuperSoccerNoggins.GameConstants.COLOR_FADE_IN_OUT, SuperSoccerNoggins.GameConstants.TIME_FADE_IN_OUT, true);
            SuperSoccerNoggins.AudioManager.getInstance().stopEffect(SuperSoccerNoggins.AudioManager.getInstance().currentEffect);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start("MatchSelectionState", true, false);
            }, this);
        };
        MatchState.prototype.playGoalAudio = function (playerGoal) {
            var rndNumber = Math.floor(Math.random() * 3) + 1;
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("crowd_goal_0" + rndNumber);
            if (playerGoal) {
                if (this.playerGoalSounds.length > 0) {
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect(this.playerGoalSounds[0]);
                    this.playerGoalSounds.splice(0, 1);
                }
                else {
                    var cel = [5, 6, 7];
                    cel = Phaser.ArrayUtils.shuffle(cel);
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect("goal_" + cel[0]);
                }
            }
            else {
                if (this.adversaryGoalSound.length > 0) {
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect(this.adversaryGoalSound[0]);
                    this.adversaryGoalSound.splice(0, 1);
                }
                else {
                    this.adversaryGoalSound = ["goal_1", "goal_2"];
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect(this.adversaryGoalSound[0]);
                    this.adversaryGoalSound.splice(0, 1);
                }
            }
        };
        return MatchState;
    }(Phaser.State));
    SuperSoccerNoggins.MatchState = MatchState;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var MessageContainer = (function (_super) {
        __extends(MessageContainer, _super);
        function MessageContainer(game) {
            var _this = _super.call(this, game) || this;
            _this.message = new Phaser.Image(_this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 120, "texture_atlas_1", null);
            _this.message.anchor.setTo(.5, .5);
            _this.message.visible = false;
            _this.add(_this.message);
            return _this;
        }
        MessageContainer.prototype.showMessage = function (messageType) {
            this.setMessage(messageType);
            this.displayMessage(messageType);
        };
        MessageContainer.prototype.setMessage = function (messageType) {
            this.message.visible = false;
            switch (messageType) {
                case SuperSoccerNoggins.GameConstants.MESSAGE_PLAYER_GOAL:
                    this.message.frameName = "message-player-goal.png";
                    break;
                case SuperSoccerNoggins.GameConstants.MESSAGE_ADVERSARY_GOAL:
                    this.message.frameName = "message-adversary-goal.png";
                    break;
                default:
            }
        };
        MessageContainer.prototype.displayMessage = function (messageType) {
            this.message.visible = true;
            this.message.alpha = 1;
            if (messageType === SuperSoccerNoggins.GameConstants.MESSAGE_PLAYER_GOAL || messageType === SuperSoccerNoggins.GameConstants.MESSAGE_ADVERSARY_GOAL) {
                this.message.scale.setTo(0, 0);
                this.game.add.tween(this.message.scale)
                    .to({ x: 1, y: 1 }, 350, Phaser.Easing.Elastic.Out, true)
                    .onComplete.add(function () {
                    this.game.add.tween(this.message)
                        .to({ alpha: 0 }, 400, Phaser.Easing.Cubic.Out, true, 550);
                    this.game.add.tween(this.message.scale)
                        .to({ x: 1.25, y: 1.25 }, 200, Phaser.Easing.Cubic.Out, true, 550);
                }, this);
            }
        };
        return MessageContainer;
    }(Phaser.Group));
    SuperSoccerNoggins.MessageContainer = MessageContainer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var PauseLayer = (function (_super) {
        __extends(PauseLayer, _super);
        function PauseLayer(game) {
            var _this = _super.call(this, game, null, "pause-layer") || this;
            var darkLayer = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData("black-square"));
            darkLayer.scale.setTo(SuperSoccerNoggins.GameConstants.GAME_WIDTH / 16, SuperSoccerNoggins.GameConstants.GAME_HEIGHT / 16);
            darkLayer.alpha = .5;
            _this.add(darkLayer);
            if (SuperSoccerNoggins.GameVars.ai) {
                var tournamentID = Math.floor(SuperSoccerNoggins.GameVars.getInstance().matchID / 8);
                var tournamentTitle = new Phaser.Image(_this.game, 5, 5, "texture_atlas_season", "trophy_title_" + (tournamentID + 1) + ".png");
                tournamentTitle.scale.set(.6);
                _this.add(tournamentTitle);
            }
            var pauseTitleImage = new Phaser.Image(_this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 130, "texture_atlas_1", "pause_title.png");
            pauseTitleImage.anchor.set(.5);
            _this.add(pauseTitleImage);
            var resetButton = new Phaser.Button(_this.game, 400, 165, "texture_atlas_1", _this.onClickReset, _this);
            resetButton.setFrames("button-reset-on.png", "button-reset-off.png", "button-reset-on.png");
            resetButton.anchor.set(.5);
            _this.add(resetButton);
            var resumeButton = new Phaser.Button(_this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 165, "texture_atlas_1", _this.onClickExit, _this);
            resumeButton.setFrames("button-resume-on.png", "button-resume-off.png", "button-resume-on.png");
            resumeButton.anchor.set(.5);
            _this.add(resumeButton);
            var exitButton = new Phaser.Button(_this.game, 230, 165, "texture_atlas_1", _this.onClickQuit, _this);
            exitButton.setFrames("button-exit-on.png", "button-exit-off.png", "button-exit-on.png");
            exitButton.anchor.set(.5);
            _this.add(exitButton);
            var audioButtonsContainer = new SuperSoccerNoggins.AudioButtonsContainer(_this.game);
            audioButtonsContainer.x = SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2;
            audioButtonsContainer.y = 210;
            _this.add(audioButtonsContainer);
            return _this;
        }
        PauseLayer.prototype.onClickReset = function (b) {
            b.clearFrames();
            SuperSoccerNoggins.MatchManager.currentInstance.reset();
        };
        PauseLayer.prototype.onClickQuit = function (b) {
            b.clearFrames();
            SuperSoccerNoggins.MatchManager.currentInstance.quit();
        };
        PauseLayer.prototype.onClickExit = function (b) {
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
            b.clearFrames();
            SuperSoccerNoggins.MatchManager.currentInstance.exitPauseMenu();
        };
        return PauseLayer;
    }(Phaser.Group));
    SuperSoccerNoggins.PauseLayer = PauseLayer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var Referee = (function (_super) {
        __extends(Referee, _super);
        function Referee(game) {
            var _this = _super.call(this, game, 350, Referee.REFEREE_PY, "texture_atlas_season", "referee_start_0001.png") || this;
            Referee.currentInstance = _this;
            _this.anchor.set(.5);
            _this.animations.add("fly", Phaser.Animation.generateFrameNames("referee_start_", 1, 5, ".png", 4));
            _this.animations.add("end", Phaser.Animation.generateFrameNames("referee_end_", 1, 5, ".png", 4));
            _this.animations.add("whistle", Phaser.Animation.generateFrameNames("referee_whistle_", 1, 30, ".png", 4));
            _this.animations.play("fly", 24, true);
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("heli_referee");
            _this.game.time.events.add(2000, _this.kickOff, _this);
            return _this;
        }
        Referee.prototype.kickOff = function () {
            var right;
            if (SuperSoccerNoggins.GameVars.getInstance().matchID === 0) {
                right = true;
            }
            else {
                right = Math.random() > .5;
            }
            SuperSoccerNoggins.MatchManager.currentInstance.onKickOff(right);
            this.game.add.tween(this)
                .to({ angle: right ? -5 : 5 }, 100, Phaser.Easing.Elastic.Out, true, 0, 0, true);
            this.game.add.tween(this)
                .to({ y: -200 }, 2000, Phaser.Easing.Cubic.Out, true, 600)
                .onComplete.add(function () {
                this.visible = false;
                SuperSoccerNoggins.MatchState.currentInstance.gui.onRefereeDisappeared();
            }, this);
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("swish");
        };
        Referee.prototype.whistle = function () {
            this.y = Referee.REFEREE_PY;
            this.visible = true;
            if (!SuperSoccerNoggins.GameVars.getInstance().christmasVersion) {
                SuperSoccerNoggins.AudioManager.getInstance().playEffect("end_match");
            }
            this.animations.play("end", 24, false)
                .onComplete.add(function () {
                this.animations.play("whistle", 16, false)
                    .onComplete.add(function () {
                    this.game.time.events.add(600, function () {
                        SuperSoccerNoggins.MatchState.currentInstance.onRefereeWhistled();
                    }, this);
                    this.animations.play("end", 24, true);
                    this.game.add.tween(this)
                        .to({ y: -200 }, 2000, Phaser.Easing.Cubic.Out, true, 1000);
                }, this);
            }, this);
        };
        return Referee;
    }(Phaser.Sprite));
    Referee.REFEREE_PY = 176;
    SuperSoccerNoggins.Referee = Referee;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var ShadowsContainer = (function (_super) {
        __extends(ShadowsContainer, _super);
        function ShadowsContainer(game) {
            var _this = _super.call(this, game) || this;
            ShadowsContainer.currentInstance = _this;
            _this.playerBodyGuardShadow = null;
            _this.adversaryBodyGuardShadow = null;
            _this.playerShadow = new Phaser.Image(_this.game, 0, SuperSoccerNoggins.GameConstants.FLAT_FIELD_Y - 5, "texture_atlas_1", "shadow-player.png");
            _this.playerShadow.anchor.setTo(.5, 0);
            _this.playerShadow.scale.x = 1.2;
            _this.add(_this.playerShadow);
            _this.adversaryShadow = new Phaser.Image(_this.game, 0, SuperSoccerNoggins.GameConstants.FLAT_FIELD_Y - 5, "texture_atlas_1", "shadow-ball.png");
            _this.adversaryShadow.anchor.setTo(.5, 0);
            _this.adversaryShadow.scale.x = 1.2;
            _this.add(_this.adversaryShadow);
            _this.ballShadow = new Phaser.Image(_this.game, 0, SuperSoccerNoggins.GameConstants.FLAT_FIELD_Y - 5, "texture_atlas_1", "shadow-adversary.png");
            _this.ballShadow.anchor.setTo(.5, 0);
            _this.add(_this.ballShadow);
            return _this;
        }
        ShadowsContainer.prototype.destroy = function (destroyChildren, soft) {
            ShadowsContainer.currentInstance = null;
            _super.prototype.destroy.call(this, destroyChildren, soft);
        };
        ShadowsContainer.prototype.update = function () {
            this.playerShadow.x = SuperSoccerNoggins.Player.currentInstance.torso.x + 6;
            this.adversaryShadow.x = SuperSoccerNoggins.Adversary.currentInstance.torso.x - 6;
            if (this.adversaryBodyGuardShadow) {
                this.adversaryBodyGuardShadow.x = SuperSoccerNoggins.Adversary.currentInstance.brother.torso.x - 6;
            }
            if (this.playerBodyGuardShadow) {
                this.playerBodyGuardShadow.x = SuperSoccerNoggins.Player.currentInstance.brother.torso.x + 6;
            }
            if (SuperSoccerNoggins.BallsManager.currentInstance.ball && SuperSoccerNoggins.BallsManager.currentInstance.ball.alive) {
                this.ballShadow.x = SuperSoccerNoggins.BallsManager.currentInstance.ball.x;
            }
            _super.prototype.update.call(this);
        };
        ShadowsContainer.prototype.resetShadow = function () {
            this.ballShadow.scale.set(1);
            this.ballShadow.anchor.setTo(.5, 0);
        };
        ShadowsContainer.prototype.ballShrunken = function () {
            this.ballShadow.scale.set(.5);
            this.ballShadow.anchor.setTo(.5, -.65);
        };
        ShadowsContainer.prototype.ballBlownUp = function () {
            this.ballShadow.scale.set(1.75, 1.25);
            this.ballShadow.anchor.setTo(.5, 0);
        };
        ShadowsContainer.prototype.addBodyGuardShadow = function (isPlayer) {
            var shadow = new Phaser.Image(this.game, 0, SuperSoccerNoggins.GameConstants.FLAT_FIELD_Y - 2, "texture_atlas_1", "shadow-ball.png");
            shadow.anchor.setTo(.5, 0);
            shadow.scale.x = 1.2;
            this.add(shadow);
            if (isPlayer) {
                this.playerBodyGuardShadow = shadow;
            }
            else {
                this.adversaryBodyGuardShadow = shadow;
            }
        };
        ShadowsContainer.prototype.removeBodyGuardShadow = function (isPlayer) {
            if (isPlayer) {
                this.playerBodyGuardShadow.kill();
                this.playerBodyGuardShadow = null;
            }
            else {
                this.adversaryBodyGuardShadow.kill();
                this.adversaryBodyGuardShadow = null;
            }
        };
        ShadowsContainer.prototype.removeBallShadow = function () {
            this.ballShadow.visible = false;
        };
        ShadowsContainer.prototype.showBallShadow = function () {
            this.ballShadow.visible = true;
        };
        return ShadowsContainer;
    }(Phaser.Group));
    ShadowsContainer.currentInstance = null;
    SuperSoccerNoggins.ShadowsContainer = ShadowsContainer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var StageContainer = (function (_super) {
        __extends(StageContainer, _super);
        function StageContainer(game) {
            var _this = _super.call(this, game) || this;
            StageContainer.currentInstance = _this;
            _this.game.physics.startSystem(Phaser.Physics.BOX2D);
            _this.game.physics.box2d.gravity.y = 500;
            _this.game.physics.box2d.frameRate = 1 / 60;
            _this.game.physics.box2d.paused = false;
            _this.game.physics.box2d.debugDraw.joints = true;
            _this.stageBoundaries = new SuperSoccerNoggins.StageBoundaries(_this.game);
            _this.add(_this.stageBoundaries);
            _this.powerUpsManager = new SuperSoccerNoggins.PowerUpsManager(_this.game);
            _this.add(_this.powerUpsManager);
            _this.nogginsContainer = new Phaser.Group(_this.game);
            _this.add(_this.nogginsContainer);
            _this.adversary = new SuperSoccerNoggins.Adversary(_this.game, false);
            _this.nogginsContainer.add(_this.adversary);
            _this.player = new SuperSoccerNoggins.Player(_this.game, false);
            _this.nogginsContainer.add(_this.player);
            _this.adversary.rival = _this.player;
            _this.player.rival = _this.adversary;
            _this.referee = new SuperSoccerNoggins.Referee(_this.game);
            _this.add(_this.referee);
            _this.ballsManager = new SuperSoccerNoggins.BallsManager(_this.game);
            _this.add(_this.ballsManager);
            if (SuperSoccerNoggins.GameVars.getInstance().water) {
                _this.water = new SuperSoccerNoggins.Water(_this.game);
                _this.add(_this.water);
            }
            if (SuperSoccerNoggins.GameVars.getInstance().terrain === SuperSoccerNoggins.GameConstants.TERRAIN_FLAT) {
                _this.shadowsContainer = new SuperSoccerNoggins.ShadowsContainer(_this.game);
                _this.addAt(_this.shadowsContainer, _this.nogginsContainer.z - 1);
            }
            _this.goalsManager = new SuperSoccerNoggins.GoalsManager(_this.game);
            _this.add(_this.goalsManager);
            _this.effectsContainer = new SuperSoccerNoggins.EffectsContainer(_this.game);
            _this.add(_this.effectsContainer);
            _this.addCallbacks(_this.player);
            _this.addCallbacks(_this.adversary);
            SuperSoccerNoggins.AdversaryAI.currentInstance.adversary = _this.adversary;
            SuperSoccerNoggins.AdversaryAI.currentInstance.setCallBacksWithPlayer(_this.player);
            return _this;
        }
        StageContainer.prototype.destroy = function (destroyChildren, soft) {
            StageContainer.currentInstance = null;
            _super.prototype.destroy.call(this, destroyChildren, soft);
        };
        StageContainer.prototype.startGame = function (right) {
            this.ballsManager.startGame(right);
            this.powerUpsManager.startGame();
        };
        StageContainer.prototype.pause = function () {
            this.game.physics.box2d.paused = true;
            this.powerUpsManager.pause();
        };
        StageContainer.prototype.resume = function () {
            this.game.physics.box2d.paused = false;
            this.powerUpsManager.resume();
        };
        StageContainer.prototype.matchEnded = function () {
            if (SuperSoccerNoggins.GameVars.ai) {
                if (SuperSoccerNoggins.GameVars.getInstance().victory) {
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect("subidon");
                }
                else {
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect("bajon");
                }
            }
            else {
                SuperSoccerNoggins.AudioManager.getInstance().playEffect("subidon");
            }
            this.ballsManager.removeBall(true);
            this.game.time.events.add(500, function () {
                SuperSoccerNoggins.BallsManager.currentInstance.ball.visible = false;
                SuperSoccerNoggins.Referee.currentInstance.whistle();
                SuperSoccerNoggins.AudioManager.getInstance().playEffect("heli_referee");
            }, this);
            this.game.add.tween(this.game.physics.box2d)
                .to({ frameRate: 1 / 300 }, 1000, Phaser.Easing.Cubic.Out, true, 2000)
                .onComplete.add(function () {
                this.game.physics.box2d.paused = true;
            }, this);
        };
        StageContainer.prototype.removePlayers = function () {
            this.player.matchEnded();
            this.adversary.matchEnded();
            if (this.adversary.brother) {
                this.adversary.brother.matchEnded();
            }
            if (this.shadowsContainer) {
                this.shadowsContainer.destroy();
            }
        };
        StageContainer.prototype.removeBall = function () {
            this.ballsManager.removeBall();
        };
        StageContainer.prototype.goalScored = function () {
            this.player.reset();
            this.adversary.reset();
            this.goalsManager.resetGoals();
        };
        StageContainer.prototype.spawnBodyGuard = function (ballSender, green) {
            var bodyguard;
            if ((ballSender === SuperSoccerNoggins.GameConstants.PLAYER && green) || (ballSender === SuperSoccerNoggins.GameConstants.ADVERSARY && !green)) {
                if (this.player.brother) {
                    return;
                }
                bodyguard = new SuperSoccerNoggins.Player(this.game, true);
                this.addCallbacks(bodyguard);
                this.nogginsContainer.add(bodyguard);
                bodyguard.brother = this.player;
                this.player.brother = bodyguard;
                if (this.shadowsContainer) {
                    this.shadowsContainer.addBodyGuardShadow(true);
                }
                SuperSoccerNoggins.PlayerController.currentInstance.playerTwin = bodyguard;
            }
            else {
                if (this.adversary.brother) {
                    return;
                }
                bodyguard = new SuperSoccerNoggins.Adversary(this.game, true);
                this.addCallbacks(bodyguard);
                SuperSoccerNoggins.RivalBodyguardAI.currentInstance.bodyguard = bodyguard;
                SuperSoccerNoggins.RivalBodyguardAI.currentInstance.adversary = this.adversary;
                SuperSoccerNoggins.RivalBodyguardAI.currentInstance.setCallBacks();
                this.nogginsContainer.add(bodyguard);
                bodyguard.brother = this.adversary;
                this.adversary.brother = bodyguard;
                if (this.shadowsContainer) {
                    this.shadowsContainer.addBodyGuardShadow(false);
                }
                SuperSoccerNoggins.AdversaryAI.currentInstance.bodyguard = bodyguard;
                SuperSoccerNoggins.AdversaryManualController.currentInstance.bodyguard = bodyguard;
            }
            bodyguard.setCallBacksWithBall(SuperSoccerNoggins.BallsManager.currentInstance.ball);
            bodyguard.setHarakiri();
        };
        StageContainer.prototype.bigHead = function (ballSender, green, isGood) {
            this.getNoggingToApplyPowerUp(ballSender, green, isGood).makeHeadBig();
        };
        StageContainer.prototype.vicking = function (ballSender, green, isGood) {
            this.getNoggingToApplyPowerUp(ballSender, green, isGood).addVickingHelm();
        };
        StageContainer.prototype.jetpack = function (ballSender, green, isGood) {
            this.getNoggingToApplyPowerUp(ballSender, green, isGood).addJetpack();
        };
        StageContainer.prototype.disableKick = function (ballSender, green, isGood) {
            this.getNoggingToApplyPowerUp(ballSender, green, isGood).disableKick();
        };
        StageContainer.prototype.ballHitStageWalls = function (ball, contact, surfaceType) {
            var worldManifold = new box2d.b2WorldManifold();
            contact.GetWorldManifold(worldManifold);
            var collisionPoint = worldManifold.points[0].SelfMul(-this.game.physics.box2d.ptmRatio);
            var ballSpeed = Phaser.Math.distance(0, 0, ball.body.velocity.x, ball.body.velocity.y);
            if (surfaceType !== SuperSoccerNoggins.GameConstants.SURFACE_WATER) {
                if (!SuperSoccerNoggins.GameVars.getInstance().water || SuperSoccerNoggins.GameVars.getInstance().water && collisionPoint.y < SuperSoccerNoggins.GameConstants.WATER_PY) {
                    this.effectsContainer.addEffect(collisionPoint.x, collisionPoint.y, surfaceType, ballSpeed);
                }
            }
            else {
                this.effectsContainer.addEffect(ball.x, ball.y + SuperSoccerNoggins.Ball.BALL_RADIUS, surfaceType, ballSpeed);
            }
        };
        StageContainer.prototype.activateGoldenGoal = function () {
            this.ballsManager.ball.goldenBall();
        };
        StageContainer.prototype.addCallbacks = function (noggin) {
            switch (SuperSoccerNoggins.GameVars.getInstance().terrain) {
                case SuperSoccerNoggins.GameConstants.TERRAIN_SMALL_ISLANDS:
                    noggin.setCallbackWithJumpSurfaces(this.stageBoundaries.smallIslands.body);
                    break;
                case SuperSoccerNoggins.GameConstants.TERRAIN_BIG_LAKE:
                    noggin.setCallbackWithJumpSurfaces(this.stageBoundaries.bigLake.body);
                    break;
                case SuperSoccerNoggins.GameConstants.TERRAIN_FLAT:
                    noggin.setCallbackWithJumpSurfaces(this.stageBoundaries.flatField.body);
                    break;
                case SuperSoccerNoggins.GameConstants.TERRAIN_MOVING_SLICES_1:
                case SuperSoccerNoggins.GameConstants.TERRAIN_MOVING_SLICES_2:
                case SuperSoccerNoggins.GameConstants.TERRAIN_MOVING_SLICES_3:
                    noggin.setCallBacksWithMovingField(this.stageBoundaries.threeVerticalMovingSlices);
                    break;
                case SuperSoccerNoggins.GameConstants.TERRAIN_ISLAND:
                    noggin.setCallbackWithJumpSurfaces(this.stageBoundaries.island.body);
                    break;
                default:
                    break;
            }
            if (SuperSoccerNoggins.GameVars.getInstance().obstacles === SuperSoccerNoggins.GameConstants.OBSTACLES_THREE_MOVING_CIRCLES) {
                var movingCircles = this.stageBoundaries.stageObstacles.movingCircles;
                for (var i = 0; i < movingCircles.length; i++) {
                    noggin.setCallbackWithJumpSurfaces(movingCircles[i].body);
                }
            }
            noggin.setCallbackWithJumpSurfaces(this.goalsManager.playerGoal.goalBar.body);
            noggin.setCallbackWithJumpSurfaces(this.goalsManager.adversaryGoal.goalBar.body);
            if (noggin.rival) {
                noggin.setCallBackWithTheOtherNoggin(noggin.rival.head.body);
            }
        };
        StageContainer.prototype.getNoggingToApplyPowerUp = function (ballSender, green, isGood) {
            var noggin;
            if (ballSender === SuperSoccerNoggins.GameConstants.PLAYER || ballSender === SuperSoccerNoggins.GameConstants.PLAYER_WITH_JETPACK_FLYING || ballSender === SuperSoccerNoggins.GameConstants.PLAYER_BODYGUARD) {
                if (isGood) {
                    noggin = green ? this.player : this.adversary;
                }
                else {
                    noggin = green ? this.adversary : this.player;
                }
            }
            else {
                if (isGood) {
                    noggin = green ? this.adversary : this.player;
                }
                else {
                    noggin = green ? this.player : this.adversary;
                }
            }
            return noggin;
        };
        return StageContainer;
    }(Phaser.Group));
    SuperSoccerNoggins.StageContainer = StageContainer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var Timer = (function (_super) {
        __extends(Timer, _super);
        function Timer(game) {
            var _this = _super.call(this, game, null, "timer") || this;
            _this.paused = true;
            _this.pulsing = false;
            _this.x = SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2;
            _this.timeLabel = new Phaser.Text(_this.game, 0, 60, SuperSoccerNoggins.GameVars.getInstance().time.toString(), { font: "28px Open Sans", fontWeight: "800", fill: "#20404d", align: "center" });
            _this.timeLabel.anchor.set(.5);
            _this.add(_this.timeLabel);
            return _this;
        }
        Timer.prototype.start = function () {
            this.paused = false;
            this.timerEvent = this.game.time.events.loop(500, this.updateTimeLabel, this);
        };
        Timer.prototype.pause = function () {
            this.paused = true;
        };
        Timer.prototype.resume = function () {
            this.paused = false;
        };
        Timer.prototype.updateTimeLabel = function () {
            if (this.paused) {
                return;
            }
            if (SuperSoccerNoggins.GameVars.getInstance().time > 0) {
                SuperSoccerNoggins.GameVars.getInstance().time -= .5;
                if (SuperSoccerNoggins.GameVars.getInstance().time === Math.floor(SuperSoccerNoggins.GameVars.getInstance().time)) {
                    this.timeLabel.text = SuperSoccerNoggins.GameVars.getInstance().time.toString();
                    if (SuperSoccerNoggins.GameVars.getInstance().time < 11 && !this.pulsing) {
                        this.pulsing = true;
                        this.pulse();
                    }
                }
            }
            else {
                this.timerEvent.pendingDelete = true;
                this.pulsingTween.pendingDelete = true;
                SuperSoccerNoggins.MatchManager.currentInstance.onTimeOver();
            }
        };
        Timer.prototype.pulse = function () {
            this.timeLabel.y = 68;
            this.timeLabel.fill = "#ff0000";
            this.timeLabel.fontSize = 36;
            this.pulsingTween = this.game.add.tween(this.timeLabel.scale)
                .to({ x: 1.15, y: 1.15 }, 250, Phaser.Easing.Cubic.Out, true, 0, -1, true);
        };
        return Timer;
    }(Phaser.Group));
    SuperSoccerNoggins.Timer = Timer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var VictoriousPlayer = (function (_super) {
        __extends(VictoriousPlayer, _super);
        function VictoriousPlayer(game) {
            var _this = _super.call(this, game, null, "victorious-player") || this;
            var playerTeamID;
            var mirrorNoggin = false;
            if (SuperSoccerNoggins.GameVars.ai) {
                playerTeamID = SuperSoccerNoggins.GameVars.getInstance().playerTeamID;
                _this.x = SuperSoccerNoggins.GameConstants.PLAYER_INITIAL_PX - 25;
            }
            else {
                if (SuperSoccerNoggins.GameVars.getInstance().playerGoals > SuperSoccerNoggins.GameVars.getInstance().adversaryGoals) {
                    playerTeamID = SuperSoccerNoggins.GameVars.playerTeamIDPVP;
                    _this.x = SuperSoccerNoggins.GameConstants.PLAYER_INITIAL_PX - 25;
                }
                else {
                    mirrorNoggin = true;
                    playerTeamID = SuperSoccerNoggins.GameVars.adversaryTeamIDPVP;
                    _this.x = SuperSoccerNoggins.GameConstants.ADVERSARY_INITIAL_PX + 25;
                }
            }
            switch (SuperSoccerNoggins.GameVars.getInstance().terrain) {
                case SuperSoccerNoggins.GameConstants.TERRAIN_SMALL_ISLANDS:
                    _this.y = SuperSoccerNoggins.GameConstants.FLAT_FIELD_Y - SuperSoccerNoggins.GameConstants.NOGGIN_RADIUS;
                    break;
                case SuperSoccerNoggins.GameConstants.TERRAIN_BIG_LAKE:
                    _this.y = SuperSoccerNoggins.GameConstants.FLAT_FIELD_Y - SuperSoccerNoggins.GameConstants.NOGGIN_RADIUS;
                    break;
                case SuperSoccerNoggins.GameConstants.TERRAIN_FLAT:
                    _this.y = SuperSoccerNoggins.GameConstants.FLAT_FIELD_Y - SuperSoccerNoggins.GameConstants.NOGGIN_RADIUS;
                    break;
                case SuperSoccerNoggins.GameConstants.TERRAIN_MOVING_SLICES_1:
                case SuperSoccerNoggins.GameConstants.TERRAIN_MOVING_SLICES_2:
                case SuperSoccerNoggins.GameConstants.TERRAIN_MOVING_SLICES_3:
                    _this.y = SuperSoccerNoggins.GameConstants.FLAT_FIELD_Y - SuperSoccerNoggins.GameConstants.NOGGIN_RADIUS;
                    break;
                case SuperSoccerNoggins.GameConstants.TERRAIN_ISLAND:
                    _this.y = SuperSoccerNoggins.GameConstants.FIELD_WITH_WATER_Y - SuperSoccerNoggins.GameConstants.NOGGIN_RADIUS;
                    break;
                default:
                    break;
            }
            var headFrameName = playerTeamID + 1 < 10 ? "head_000" + (playerTeamID + 1) + ".png" :
                "head_00" + (playerTeamID + 1) + ".png";
            var headImage = new Phaser.Image(_this.game, -2, -17, "texture_atlas_1", headFrameName);
            headImage.scale.set(1 / SuperSoccerNoggins.Head.BIG_HEAD_SCALE_FACTOR);
            _this.add(headImage);
            var nogginBodyImageFrameName = playerTeamID + 1 < 10 ? "body_01_000" + (playerTeamID + 1) + ".png" :
                "body_01_00" + (playerTeamID + 1) + ".png";
            var nogginBodyImage = new Phaser.Image(_this.game, 0, 8, "texture_atlas_1", nogginBodyImageFrameName);
            _this.addAt(nogginBodyImage, 0);
            if (mirrorNoggin) {
                headImage.x = 2;
                headImage.scale.x *= -1;
                nogginBodyImage.scale.x = -1;
            }
            _this.alpha = 0;
            _this.game.add.tween(_this)
                .to({ alpha: 1 }, 400, Phaser.Easing.Cubic.Out, true, 1000).onComplete.add(function () {
                SuperSoccerNoggins.AudioManager.getInstance().playLoop("jump");
            }, _this);
            _this.game.add.tween(_this)
                .to({ y: _this.y - 15 }, 150, Phaser.Easing.Cubic.Out, true, 500, -1, true);
            return _this;
        }
        VictoriousPlayer.prototype.destroy = function (destroyChildren, soft) {
            SuperSoccerNoggins.AudioManager.getInstance().stopLoop("jump");
            _super.prototype.destroy.call(this, destroyChildren, soft);
        };
        return VictoriousPlayer;
    }(Phaser.Group));
    SuperSoccerNoggins.VictoriousPlayer = VictoriousPlayer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var CheatLayer = (function (_super) {
        __extends(CheatLayer, _super);
        function CheatLayer(game) {
            var _this = _super.call(this, game, null, "cheat-menu", false) || this;
            CheatLayer.currentInstance = _this;
            var backgroundSprite = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData("yellow-square"));
            backgroundSprite.scale.setTo(SuperSoccerNoggins.GameConstants.GAME_WIDTH / 16, SuperSoccerNoggins.GameConstants.GAME_HEIGHT / 16);
            backgroundSprite.alpha = .85;
            backgroundSprite.inputEnabled = true;
            backgroundSprite.input.priorityID = 0;
            backgroundSprite.events.onInputDown.add(_this.onClickBackground, _this);
            _this.add(backgroundSprite);
            var closeButton = new Phaser.Button(_this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH - 5, 5, "texture_atlas_1", _this.onClickCloseMenu, _this);
            closeButton.anchor.x = 1;
            closeButton.setFrames("button-exit-pause-on.png", "button-exit-pause-off.png", "button-exit-pause-on.png");
            _this.add(closeButton);
            var cheatMenuLabel = new Phaser.Text(_this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 5, "CHEAT MENU", { font: "22px Open Sans", fontWeight: "800", fill: "#ff0000" });
            cheatMenuLabel.x -= cheatMenuLabel.width / 2;
            _this.add(cheatMenuLabel);
            _this.addPassFailButtons();
            _this.addAdversaryControlsSwitchButtons();
            _this.addAbilitiesButtons();
            _this.addPhysicsButton();
            return _this;
        }
        CheatLayer.prototype.addPassFailButtons = function () {
            var levelPassedButton = new Phaser.Button(this.game, 15, 42, "texture_atlas_0", this.onClickLevelPassed, this);
            levelPassedButton.setFrames("level-passed-button-on.png", "level-passed-button-off.png", "level-passed-button-on.png");
            this.add(levelPassedButton);
            var levelFailedButton = new Phaser.Button(this.game, 90, 42, "texture_atlas_0", this.onClickLevelLost, this);
            levelFailedButton.setFrames("level-failed-button-on.png", "level-failed-button-off.png", "level-failed-button-on.png");
            this.add(levelFailedButton);
        };
        CheatLayer.prototype.addAdversaryControlsSwitchButtons = function () {
            var adversaryAILabel = new Phaser.Text(this.game, 25, 100, "adv. AI", { font: "10px Arial", fill: "#000000" });
            this.add(adversaryAILabel);
            var adversaryManual = new Phaser.Text(this.game, 90, 100, "adv. manual", { font: "10px Arial", fill: "#000000" });
            this.add(adversaryManual);
            this.aiButtonOff = new Phaser.Button(this.game, 40, 140, "texture_atlas_0", this.clickAIButtonOff, this);
            this.aiButtonOff.setFrames("button-off-on.png", "button-off-off.png", "button-off-on.png");
            this.aiButtonOff.anchor.setTo(.5, .5);
            this.aiButtonOff.visible = !SuperSoccerNoggins.GameVars.ai;
            this.aiButtonOff.forceOut = true;
            this.add(this.aiButtonOff);
            this.aiButtonOnImage = new Phaser.Image(this.game, 40, 140, "texture_atlas_0", "button-on-on.png");
            this.aiButtonOnImage.anchor.setTo(.5, .5);
            this.aiButtonOnImage.visible = SuperSoccerNoggins.GameVars.ai;
            this.add(this.aiButtonOnImage);
            this.manualButtonOff = new Phaser.Button(this.game, 115, 140, "texture_atlas_0", this.clickManualButtonOff, this);
            this.manualButtonOff.setFrames("button-off-on.png", "button-off-off.png", "button-off-on.png");
            this.manualButtonOff.anchor.setTo(.5, .5);
            this.manualButtonOff.forceOut = true;
            this.manualButtonOff.visible = SuperSoccerNoggins.GameVars.ai;
            this.add(this.manualButtonOff);
            this.manualButtonOnImage = new Phaser.Image(this.game, 115, 140, "texture_atlas_0", "button-on-on.png");
            this.manualButtonOnImage.anchor.setTo(.5, .5);
            this.manualButtonOnImage.visible = !SuperSoccerNoggins.GameVars.ai;
            this.add(this.manualButtonOnImage);
        };
        CheatLayer.prototype.addAbilitiesButtons = function () {
            var jumpLabel = new Phaser.Text(this.game, 10, 170, "JUMP", { font: "12px Arial", fill: "#000000" });
            this.add(jumpLabel);
            var numberButtonsContainer = new SuperSoccerNoggins.NumberButtonsContainer(this.game, SuperSoccerNoggins.GameConstants.ABILITY_JUMP);
            numberButtonsContainer.x = 20;
            numberButtonsContainer.y = 200;
            this.add(numberButtonsContainer);
            var rushLabel = new Phaser.Text(this.game, 10, 220, "RUSH", { font: "12px Arial", fill: "#000000" });
            this.add(rushLabel);
            numberButtonsContainer = new SuperSoccerNoggins.NumberButtonsContainer(this.game, SuperSoccerNoggins.GameConstants.ABILITY_RUSH);
            numberButtonsContainer.x = 20;
            numberButtonsContainer.y = 250;
            this.add(numberButtonsContainer);
            var backtrackLabel = new Phaser.Text(this.game, 10, 270, "BACKTRACK", { font: "12px Arial", fill: "#000000" });
            this.add(backtrackLabel);
            numberButtonsContainer = new SuperSoccerNoggins.NumberButtonsContainer(this.game, SuperSoccerNoggins.GameConstants.ABILITY_BACKTRACK);
            numberButtonsContainer.x = 20;
            numberButtonsContainer.y = 300;
            this.add(numberButtonsContainer);
            var kickLabel = new Phaser.Text(this.game, 10, 320, "KICK", { font: "12px Arial", fill: "#000000" });
            this.add(kickLabel);
            numberButtonsContainer = new SuperSoccerNoggins.NumberButtonsContainer(this.game, SuperSoccerNoggins.GameConstants.ABILITY_KICK);
            numberButtonsContainer.x = 20;
            numberButtonsContainer.y = 350;
            this.add(numberButtonsContainer);
        };
        CheatLayer.prototype.addPhysicsButton = function () {
            var showPhysicsLabel = new Phaser.Text(this.game, 10, 385, "show physics bodies", { font: "16px Arial", fill: "#000000" });
            this.add(showPhysicsLabel);
            this.physicsBodiesOn = new Phaser.Button(this.game, 170, 370, "texture_atlas_0", this.onPhysicsBodiesOn, this);
            this.physicsBodiesOn.setFrames("button-off-on.png", "button-off-off.png", "button-off-on.png");
            this.add(this.physicsBodiesOn);
            this.physicsBodiesOff = new Phaser.Button(this.game, 170, 370, "texture_atlas_0", this.onPhysicsBodiesOff, this);
            this.physicsBodiesOff.setFrames("button-on-on.png", "button-on-off.png", "button-on-on.png");
            this.add(this.physicsBodiesOff);
            if (SuperSoccerNoggins.GameConstants.SHOW_PHYSICS_BODIES) {
                this.physicsBodiesOn.visible = false;
            }
            else {
                this.physicsBodiesOff.visible = false;
            }
        };
        CheatLayer.prototype.onPhysicsBodiesOn = function () {
            this.physicsBodiesOn.visible = false;
            this.physicsBodiesOff.visible = true;
            SuperSoccerNoggins.GameConstants.SHOW_PHYSICS_BODIES = true;
        };
        CheatLayer.prototype.onPhysicsBodiesOff = function () {
            this.physicsBodiesOn.visible = true;
            this.physicsBodiesOff.visible = false;
            this.game.debug.reset();
            SuperSoccerNoggins.GameConstants.SHOW_PHYSICS_BODIES = false;
        };
        CheatLayer.prototype.onClickCloseMenu = function (b) {
            b.clearFrames();
            SuperSoccerNoggins.MatchManager.currentInstance.closeCheatMenu();
        };
        CheatLayer.prototype.clickAIButtonOff = function (b) {
            b.clearFrames();
            this.aiButtonOff.visible = false;
            this.aiButtonOnImage.visible = true;
            this.manualButtonOff.visible = true;
            this.manualButtonOnImage.visible = false;
            SuperSoccerNoggins.GameManager.getInstance().switchAIManual();
        };
        CheatLayer.prototype.clickManualButtonOff = function (b) {
            b.clearFrames();
            this.aiButtonOff.visible = true;
            this.aiButtonOnImage.visible = false;
            this.manualButtonOff.visible = false;
            this.manualButtonOnImage.visible = true;
            SuperSoccerNoggins.GameManager.getInstance().switchAIManual();
        };
        CheatLayer.prototype.onClickLevelPassed = function (b) {
            b.clearFrames();
            SuperSoccerNoggins.GameVars.getInstance().playerGoals = 5;
            SuperSoccerNoggins.GameVars.getInstance().adversaryGoals = 3;
            SuperSoccerNoggins.GameVars.getInstance().time = 1;
            SuperSoccerNoggins.MatchManager.currentInstance.closeCheatMenu();
        };
        CheatLayer.prototype.onClickLevelLost = function (b) {
            b.clearFrames();
            SuperSoccerNoggins.GameVars.getInstance().playerGoals = 3;
            SuperSoccerNoggins.GameVars.getInstance().adversaryGoals = 7;
            SuperSoccerNoggins.GameVars.getInstance().time = 1;
            SuperSoccerNoggins.MatchManager.currentInstance.closeCheatMenu();
        };
        CheatLayer.prototype.onClickBackground = function () {
        };
        return CheatLayer;
    }(Phaser.Group));
    SuperSoccerNoggins.CheatLayer = CheatLayer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var NumberButtonsContainer = (function (_super) {
        __extends(NumberButtonsContainer, _super);
        function NumberButtonsContainer(game, ability) {
            var _this = _super.call(this, game, null, "number-buttons-container", false) || this;
            _this.abilityValue = 1;
            _this.ability = ability;
            switch (_this.ability) {
                case SuperSoccerNoggins.GameConstants.ABILITY_JUMP:
                    _this.abilityValue = SuperSoccerNoggins.GameVars.getInstance().playerJumpIndex;
                    break;
                case SuperSoccerNoggins.GameConstants.ABILITY_RUSH:
                    _this.abilityValue = SuperSoccerNoggins.GameVars.getInstance().playerRushIndex;
                    break;
                case SuperSoccerNoggins.GameConstants.ABILITY_BACKTRACK:
                    _this.abilityValue = SuperSoccerNoggins.GameVars.getInstance().playerBacktrackIndex;
                    break;
                case SuperSoccerNoggins.GameConstants.ABILITY_KICK:
                    _this.abilityValue = SuperSoccerNoggins.GameVars.getInstance().playerKickIndex;
                    break;
                default:
                    break;
            }
            _this.numberButtons = [];
            _this.numberButtonDeactivatedImages = [];
            var numberButton;
            var numberButtonDeactivatedImage;
            for (var i = 1; i < 6; i++) {
                numberButton = new Phaser.Button(_this.game, i * 30 - 30, 0, "texture_atlas_0", _this.onClickNumberButton, _this);
                numberButton.setFrames("button-" + i + "-on.png", "button-" + i + "-off.png", "button-" + i + "-on.png");
                numberButton.anchor.setTo(.5, .5);
                numberButton.name = ability + "-" + i;
                numberButton.forceOut = true;
                _this.add(numberButton);
                _this.numberButtons.push(numberButton);
                numberButtonDeactivatedImage = new Phaser.Image(_this.game, i * 30 - 30, 0, "texture_atlas_0", "button-" + i + "-deactivated.png");
                numberButtonDeactivatedImage.anchor.setTo(.5, .5);
                numberButtonDeactivatedImage.name = ability + "-" + i + "deactivated";
                _this.add(numberButtonDeactivatedImage);
                if (i === _this.abilityValue) {
                    numberButton.visible = true;
                }
                else {
                    numberButtonDeactivatedImage.visible = false;
                }
                _this.numberButtonDeactivatedImages.push(numberButtonDeactivatedImage);
            }
            return _this;
        }
        NumberButtonsContainer.prototype.onClickNumberButton = function (b) {
            b.clearFrames();
            var selectedButton = this.numberButtons[this.abilityValue - 1];
            selectedButton.visible = true;
            var numberButtonDeactivatedImage = this.numberButtonDeactivatedImages[this.abilityValue - 1];
            numberButtonDeactivatedImage.visible = false;
            this.abilityValue = parseInt(b.name.substr(b.name.length - 1));
            selectedButton = this.numberButtons[this.abilityValue - 1];
            selectedButton.visible = false;
            numberButtonDeactivatedImage = this.numberButtonDeactivatedImages[this.abilityValue - 1];
            numberButtonDeactivatedImage.visible = true;
            SuperSoccerNoggins.GameManager.getInstance().changePlayerAbility(this.ability, this.abilityValue);
        };
        return NumberButtonsContainer;
    }(Phaser.Group));
    SuperSoccerNoggins.NumberButtonsContainer = NumberButtonsContainer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var CreditsContainerDefeatAchievements = (function (_super) {
        __extends(CreditsContainerDefeatAchievements, _super);
        function CreditsContainerDefeatAchievements(game, matchEndLayer, isMatchUnlocked, achievementUnlockedID) {
            var _this = _super.call(this, game, null, "cre-con-vic-ach") || this;
            if (isMatchUnlocked) {
                _this.hand = new Phaser.Image(_this.game, 320, 330, "texture_atlas_1", "poor_reward_hand.png");
                _this.hand.anchor.set(.5);
                _this.hand.visible = false;
                _this.add(_this.hand);
                _this.billContainer = new Phaser.Group(_this.game);
                _this.billContainer.x = 320;
                _this.billContainer.y = 210;
                _this.add(_this.billContainer);
                _this.bill = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "banknote-loose.png");
                _this.bill.anchor.set(.5, -.5);
                _this.bill.visible = false;
                _this.bill.angle = -25;
                _this.billContainer.add(_this.bill);
                _this.creditsLabel = new Phaser.Text(_this.game, 322, 360, SuperSoccerNoggins.GameVars.getInstance().formatNumber(10000), { font: "22px Open Sans", fontWeight: "600", fill: "#FCDB29", align: "center" });
                _this.creditsLabel.x -= _this.creditsLabel.width / 2;
                _this.creditsLabel.visible = false;
                _this.add(_this.creditsLabel);
                _this.shakeHand = false;
                _this.shakeBill = false;
                _this.game.time.events.add(750, function () {
                    this.hand.visible = true;
                    this.shakeHand = true;
                    this.bill.visible = true;
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect("poor_reward");
                    this.game.add.tween(this.billContainer).to({ y: 300 }, 2000, Phaser.Easing.Linear.None, true);
                    var movTween = this.game.add.tween(this.bill);
                    movTween.to({ angle: 25 }, 650, Phaser.Easing.Cubic.InOut, true, 0, 0, true).onComplete.add(function () {
                        this.game.add.tween(this.bill).to({ angle: -10 }, 350, Phaser.Easing.Cubic.Out, true);
                        this.shakeBill = true;
                    }, this);
                    this.creditsLabel.visible = true;
                    this.creditsLabel.x = 322 - this.creditsLabel.width / 2;
                }, _this);
                _this.briefcase = new SuperSoccerNoggins.Briefcase(_this.game, matchEndLayer);
                _this.game.time.events.add(3000, function () {
                    this.creditsLabel.visible = false;
                    this.bill.visible = false;
                    this.hand.visible = false;
                    this.add(this.briefcase);
                    this.briefcase.show(true);
                    this.badgeAchievement = new SuperSoccerNoggins.BadgeAchievement(this.game, matchEndLayer, achievementUnlockedID);
                    this.add(this.badgeAchievement);
                    this.badgeAchievement.show();
                }, _this);
            }
            else {
                _this.briefcase = new SuperSoccerNoggins.Briefcase(_this.game, matchEndLayer);
                _this.add(_this.briefcase);
                _this.briefcase.show(true);
                _this.game.time.events.add(1500, function () {
                    this.badgeAchievement = new SuperSoccerNoggins.BadgeAchievement(this.game, matchEndLayer, achievementUnlockedID);
                    this.add(this.badgeAchievement);
                    this.badgeAchievement.show();
                }, _this);
            }
            return _this;
        }
        CreditsContainerDefeatAchievements.prototype.nextAchievement = function (nextAchiev) {
            this.game.time.events.add(500, function () {
                this.badgeAchievement.dissapear(nextAchiev);
            }, this);
        };
        CreditsContainerDefeatAchievements.prototype.update = function () {
            _super.prototype.update.call(this);
            if (this.shakeHand && !this.shakeBill) {
                if (Math.random() > .5) {
                    this.hand.y = 330 + Math.random() * 3;
                }
            }
            else if (this.shakeHand && this.shakeBill) {
                if (Math.random() > .5) {
                    this.hand.y = 330 + Math.random() * 3;
                    this.billContainer.y = 300 + Math.random() * 3;
                }
            }
        };
        return CreditsContainerDefeatAchievements;
    }(Phaser.Group));
    SuperSoccerNoggins.CreditsContainerDefeatAchievements = CreditsContainerDefeatAchievements;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var CreditsContainerDefeatNoAchievements = (function (_super) {
        __extends(CreditsContainerDefeatNoAchievements, _super);
        function CreditsContainerDefeatNoAchievements(game, matchEndLayer) {
            var _this = _super.call(this, game, null, "cre-con-def-no-ach") || this;
            _this.hand = new Phaser.Image(_this.game, 320, 330, "texture_atlas_1", "poor_reward_hand.png");
            _this.hand.anchor.set(.5);
            _this.hand.visible = false;
            _this.add(_this.hand);
            _this.billContainer = new Phaser.Group(_this.game);
            _this.billContainer.x = 320;
            _this.billContainer.y = 210;
            _this.add(_this.billContainer);
            _this.bill = new Phaser.Image(_this.game, 0, 0, "texture_atlas_1", "banknote-loose.png");
            _this.bill.anchor.set(.5, -.5);
            _this.bill.visible = false;
            _this.bill.angle = -25;
            _this.billContainer.add(_this.bill);
            _this.creditsLabel = new Phaser.Text(_this.game, 322, 360, SuperSoccerNoggins.GameVars.getInstance().formatNumber(10000), { font: "22px Open Sans", fontWeight: "600", fill: "#FCDB29", align: "center" });
            _this.creditsLabel.x -= _this.creditsLabel.width / 2;
            _this.creditsLabel.visible = false;
            _this.add(_this.creditsLabel);
            _this.shakeHand = false;
            _this.shakeBill = false;
            _this.game.time.events.add(750, function () {
                this.hand.visible = true;
                this.shakeHand = true;
                this.bill.visible = true;
                SuperSoccerNoggins.AudioManager.getInstance().playEffect("poor_reward");
                this.game.add.tween(this.billContainer).to({ y: 300 }, 2000, Phaser.Easing.Linear.None, true);
                var movTween = this.game.add.tween(this.bill);
                movTween.to({ angle: 25 }, 650, Phaser.Easing.Cubic.InOut, true, 0, 0, true).onComplete.add(function () {
                    this.game.add.tween(this.bill).to({ angle: -10 }, 350, Phaser.Easing.Cubic.Out, true);
                    this.shakeBill = true;
                }, this);
                this.creditsLabel.visible = true;
                this.creditsLabel.x = 322 - this.creditsLabel.width / 2;
            }, _this);
            return _this;
        }
        CreditsContainerDefeatNoAchievements.prototype.update = function () {
            _super.prototype.update.call(this);
            if (this.shakeHand && !this.shakeBill) {
                if (Math.random() > .5) {
                    this.hand.y = 330 + Math.random() * 3;
                }
            }
            else if (this.shakeHand && this.shakeBill) {
                if (Math.random() > .5) {
                    this.hand.y = 330 + Math.random() * 3;
                    this.billContainer.y = 300 + Math.random() * 3;
                }
            }
        };
        return CreditsContainerDefeatNoAchievements;
    }(Phaser.Group));
    SuperSoccerNoggins.CreditsContainerDefeatNoAchievements = CreditsContainerDefeatNoAchievements;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var CreditsContainerVictoryAchievements = (function (_super) {
        __extends(CreditsContainerVictoryAchievements, _super);
        function CreditsContainerVictoryAchievements(game, matchEndLayer, isMatchUnlocked, achievementUnlockedID) {
            var _this = _super.call(this, game, null, "cre-con-vic-ach") || this;
            _this.briefcase = new SuperSoccerNoggins.Briefcase(_this.game, matchEndLayer);
            _this.add(_this.briefcase);
            if (isMatchUnlocked) {
                _this.briefcase.show();
                _this.briefcase.bankNotesInsideAchievement = 1;
                _this.game.time.events.add(2500, function () {
                    this.badgeAchievement = new SuperSoccerNoggins.BadgeAchievement(this.game, matchEndLayer, achievementUnlockedID);
                    this.add(this.badgeAchievement);
                    this.badgeAchievement.show();
                }, _this);
            }
            else {
                _this.briefcase.show(true);
                _this.game.time.events.add(1000, function () {
                    this.badgeAchievement = new SuperSoccerNoggins.BadgeAchievement(this.game, matchEndLayer, achievementUnlockedID);
                    this.add(this.badgeAchievement);
                    this.badgeAchievement.show();
                }, _this);
            }
            return _this;
        }
        CreditsContainerVictoryAchievements.prototype.nextAchievement = function (nextAchiev) {
            this.game.time.events.add(500, function () {
                this.badgeAchievement.dissapear(nextAchiev);
            }, this);
        };
        return CreditsContainerVictoryAchievements;
    }(Phaser.Group));
    SuperSoccerNoggins.CreditsContainerVictoryAchievements = CreditsContainerVictoryAchievements;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var CreditsContainerVictoryNoAchievements = (function (_super) {
        __extends(CreditsContainerVictoryNoAchievements, _super);
        function CreditsContainerVictoryNoAchievements(game, matchEndLayer, isMatchUnlocked) {
            var _this = _super.call(this, game, null, "cre-con-vic-no-ach") || this;
            _this.briefcase = new SuperSoccerNoggins.Briefcase(_this.game, matchEndLayer);
            _this.add(_this.briefcase);
            if (isMatchUnlocked) {
                _this.briefcase.show();
            }
            else {
                matchEndLayer.exitButton.visible = false;
                matchEndLayer.replayButton.visible = false;
            }
            return _this;
        }
        return CreditsContainerVictoryNoAchievements;
    }(Phaser.Group));
    SuperSoccerNoggins.CreditsContainerVictoryNoAchievements = CreditsContainerVictoryNoAchievements;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var MatchEndLayer = (function (_super) {
        __extends(MatchEndLayer, _super);
        function MatchEndLayer(game) {
            var _this = _super.call(this, game, null, "match-end-layer") || this;
            _this.briefcase = null;
            _this.badgeAchievement = null;
            _this.nextMatchButton = null;
            _this.replayButton = null;
            _this.exitButton = null;
            _this.achievementWithoutNewMatch = false;
            _this.achievementWithNewMatch = false;
            _this.achievementDefeat = false;
            var darkLayer = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData("black-square"));
            darkLayer.scale.setTo(SuperSoccerNoggins.GameConstants.GAME_WIDTH / 16, SuperSoccerNoggins.GameConstants.GAME_HEIGHT / 16);
            darkLayer.alpha = 0;
            _this.add(darkLayer);
            _this.game.add.tween(darkLayer)
                .to({ alpha: .5 }, 500, Phaser.Easing.Cubic.Out, true, 250);
            var tournamentID = Math.floor(SuperSoccerNoggins.GameVars.getInstance().matchID / 8);
            var tournamentTitle = new Phaser.Image(_this.game, 5, 5, "texture_atlas_season", "trophy_title_" + (tournamentID + 1) + ".png");
            tournamentTitle.scale.set(.6);
            _this.add(tournamentTitle);
            var titleStain = new Phaser.Image(_this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 90, "texture_atlas_1", "mancha-resalte-textos.png");
            titleStain.anchor.set(.5);
            _this.add(titleStain);
            var titleFrameName;
            _this.achievements = SuperSoccerNoggins.AchievementsManager.getInstance().unlockedAchievements;
            if (SuperSoccerNoggins.GameVars.getInstance().victory) {
                titleFrameName = "title-victory.png";
            }
            else {
                titleFrameName = "title-defeat.png";
            }
            var titleImage = new Phaser.Image(_this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 90, "texture_atlas_1", titleFrameName);
            titleImage.anchor.set(.5);
            _this.add(titleImage);
            _this.nextMatchButton = new Phaser.Button(_this.game, 450, 270, "texture_atlas_1", _this.onClickNextMatch, _this);
            _this.nextMatchButton.setFrames("button-next-on.png", "button-next-off.png", "button-next-on.png");
            _this.nextMatchButton.anchor.set(.5);
            _this.nextMatchButton.angle = -5;
            _this.add(_this.nextMatchButton);
            _this.game.add.tween(_this.nextMatchButton)
                .to({ angle: 5 }, 375, Phaser.Easing.Cubic.Out, true, 0, -1, true);
            var key = _this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
            key.onDown.add(_this.onSpaceBarPressed, _this);
            if (SuperSoccerNoggins.GameVars.getInstance().victory) {
                _this.victoriousPlayer = new SuperSoccerNoggins.VictoriousPlayer(_this.game);
                _this.add(_this.victoriousPlayer);
                if (SuperSoccerNoggins.GameVars.getInstance().matchUnlocked) {
                    if (_this.achievements.length > 0) {
                        _this.achievementWithNewMatch = true;
                        _this.nextMatchButton.visible = false;
                        _this.creditsLayer = new SuperSoccerNoggins.CreditsContainerVictoryAchievements(_this.game, _this, true, _this.achievements[0]);
                        _this.briefcase = _this.creditsLayer.briefcase;
                        _this.add(_this.creditsLayer);
                    }
                    else {
                        _this.creditsLayer = new SuperSoccerNoggins.CreditsContainerVictoryNoAchievements(_this.game, _this, true);
                        _this.add(_this.creditsLayer);
                        _this.briefcase = _this.creditsLayer.briefcase;
                    }
                }
                else {
                    if (_this.achievements.length > 0) {
                        _this.achievementWithoutNewMatch = true;
                        _this.nextMatchButton.visible = false;
                        _this.creditsLayer = new SuperSoccerNoggins.CreditsContainerVictoryAchievements(_this.game, _this, false, _this.achievements[0]);
                        _this.briefcase = _this.creditsLayer.briefcase;
                        _this.add(_this.creditsLayer);
                    }
                    else {
                        _this.nextMatchButton.x = SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2;
                        _this.nextMatchButton.y = 160;
                        _this.nextMatchButton.visible = true;
                    }
                }
            }
            else {
                _this.exitButton = new Phaser.Button(_this.game, 285, 170, "texture_atlas_1", _this.onClickExit, _this);
                _this.exitButton.setFrames("button-exit-on.png", "button-exit-off.png", "button-exit-on.png");
                _this.exitButton.anchor.setTo(.5, .5);
                _this.add(_this.exitButton);
                _this.replayButton = new Phaser.Button(_this.game, 355, 170, "texture_atlas_1", _this.onClickReplay, _this);
                _this.replayButton.setFrames("button-replay-level-on.png", "button-replay-level-off.png", "button-replay-level-on.png");
                _this.replayButton.anchor.setTo(.5, .5);
                _this.add(_this.replayButton);
                if (SuperSoccerNoggins.GameVars.getInstance().achievedMatchID === SuperSoccerNoggins.GameVars.getInstance().matchID) {
                    if (_this.achievements.length > 0) {
                        _this.exitButton.visible = false;
                        _this.replayButton.visible = false;
                        _this.nextMatchButton.visible = false;
                        _this.achievementDefeat = true;
                        _this.creditsLayer = new SuperSoccerNoggins.CreditsContainerDefeatAchievements(_this.game, _this, true, _this.achievements[0]);
                        _this.add(_this.creditsLayer);
                        _this.briefcase = _this.creditsLayer.briefcase;
                    }
                    else {
                        _this.nextMatchButton.visible = false;
                        _this.creditsLayer = new SuperSoccerNoggins.CreditsContainerDefeatNoAchievements(_this.game, _this);
                        _this.add(_this.creditsLayer);
                        _this.briefcase = _this.creditsLayer.briefcase;
                    }
                }
                else {
                    if (_this.achievements.length > 0) {
                        _this.exitButton.visible = false;
                        _this.replayButton.visible = false;
                        _this.nextMatchButton.visible = false;
                        _this.achievementDefeat = true;
                        _this.creditsLayer = new SuperSoccerNoggins.CreditsContainerDefeatAchievements(_this.game, _this, false, _this.achievements[0]);
                        _this.add(_this.creditsLayer);
                        _this.briefcase = _this.creditsLayer.briefcase;
                    }
                    else {
                        _this.exitButton.visible = true;
                        _this.replayButton.visible = true;
                        _this.nextMatchButton.visible = false;
                    }
                }
            }
            return _this;
        }
        MatchEndLayer.prototype.showBriefcase = function (prize) {
            if (this.briefcase === null) {
                this.briefcase = new SuperSoccerNoggins.Briefcase(this.game, this);
                this.add(this.briefcase);
                this.briefcase.show();
            }
            else {
                this.briefcase.show();
            }
        };
        MatchEndLayer.prototype.refillBriefcase = function (prize) {
            this.briefcase.showBanknotes(true, prize);
        };
        MatchEndLayer.prototype.onBriefcaseOpened = function () {
            if (SuperSoccerNoggins.GameVars.getInstance().victory) {
                this.briefcase.showBanknotes(false);
            }
            else {
                this.briefcase.showBanknotes(true);
            }
        };
        MatchEndLayer.prototype.banknotesInsideBriefcase = function (achievement) {
            if (achievement) {
                this.nextAchievement();
            }
            else if (this.achievementWithNewMatch) {
                this.nextMatchButton.visible = false;
            }
            else {
                this.nextMatchButton.visible = true;
            }
        };
        MatchEndLayer.prototype.briefcaseDisappeared = function () {
            SuperSoccerNoggins.MatchState.currentInstance.nextMatch();
        };
        MatchEndLayer.prototype.nextAchievement = function () {
            this.achievements.splice(0, 1);
            this.creditsLayer.nextAchievement(this.achievements[0]);
        };
        MatchEndLayer.prototype.onClickExit = function () {
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
            this.game.time.events.add(100, function () {
                SuperSoccerNoggins.MatchState.currentInstance.nextMatch();
            }, this);
        };
        MatchEndLayer.prototype.onClickReplay = function () {
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
            this.game.time.events.add(100, function () {
                SuperSoccerNoggins.MatchState.currentInstance.replay();
            }, this);
        };
        MatchEndLayer.prototype.onClickNextMatch = function (b) {
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
            this.game.time.events.add(100, function () {
                b.clearFrames();
                if (SuperSoccerNoggins.GameVars.getInstance().matchUnlocked) {
                    this.briefcase.closeBriefcase();
                }
                else if (this.achievementWithoutNewMatch) {
                    this.briefcase.closeBriefcase();
                }
                else if (this.achievementDefeat) {
                    this.briefcase.closeBriefcase();
                }
                else {
                    SuperSoccerNoggins.MatchState.currentInstance.nextMatch();
                }
            }, this);
        };
        MatchEndLayer.prototype.onSpaceBarPressed = function () {
            SuperSoccerNoggins.MatchState.currentInstance.nextMatch();
        };
        return MatchEndLayer;
    }(Phaser.Group));
    SuperSoccerNoggins.MatchEndLayer = MatchEndLayer;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var MatchEndLayerPVP = (function (_super) {
        __extends(MatchEndLayerPVP, _super);
        function MatchEndLayerPVP(game) {
            var _this = _super.call(this, game, null, "match-end-layer-pvp") || this;
            var darkLayer = new Phaser.Sprite(_this.game, 0, 0, _this.game.cache.getBitmapData("black-square"));
            darkLayer.scale.setTo(SuperSoccerNoggins.GameConstants.GAME_WIDTH / 16, SuperSoccerNoggins.GameConstants.GAME_HEIGHT / 16);
            darkLayer.alpha = 0;
            _this.add(darkLayer);
            _this.game.add.tween(darkLayer)
                .to({ alpha: .5 }, 500, Phaser.Easing.Cubic.Out, true, 250);
            var stain = new Phaser.Image(_this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 102, "texture_atlas_1", "mancha-resalte-textos.png");
            stain.anchor.set(.5);
            _this.add(stain);
            var winnerImage;
            if (SuperSoccerNoggins.GameVars.getInstance().playerGoals > SuperSoccerNoggins.GameVars.getInstance().adversaryGoals) {
                winnerImage = new Phaser.Image(_this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 65, "texture_atlas_1", "2_player_big.png");
            }
            else {
                winnerImage = new Phaser.Image(_this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 65, "texture_atlas_1", "1_player_big.png");
            }
            winnerImage.anchor.set(.5);
            _this.add(winnerImage);
            var victory = new Phaser.Image(_this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 120, "texture_atlas_1", "title-victory.png");
            victory.anchor.set(.5);
            _this.add(victory);
            var replayButton = new Phaser.Button(_this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 200, "texture_atlas_1", _this.onClickReplay, _this);
            replayButton.setFrames("button_replay_on.png", "button_replay_off.png", "button_replay_on.png");
            replayButton.anchor.set(.5);
            _this.add(replayButton);
            _this.victoriousPlayer = new SuperSoccerNoggins.VictoriousPlayer(_this.game);
            _this.add(_this.victoriousPlayer);
            var gotToPVPConfigurationButton = new Phaser.Button(_this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 260, "texture_atlas_1", _this.gotToPVPConfiguration, _this);
            gotToPVPConfigurationButton.setFrames("button_match_settings_on.png", "button_match_settings_off.png", "button_match_settings_on.png");
            gotToPVPConfigurationButton.anchor.set(.5);
            _this.add(gotToPVPConfigurationButton);
            var settingsLabel = new Phaser.Text(_this.game, SuperSoccerNoggins.GameConstants.GAME_WIDTH / 2, 290, "MATCH SETTINGS", { font: "16px Open Sans", fontWeight: "600", fill: "#FFFFFF" });
            settingsLabel.anchor.x = .5;
            settingsLabel.scale.x = .7;
            _this.add(settingsLabel);
            return _this;
        }
        MatchEndLayerPVP.prototype.onClickReplay = function () {
            SuperSoccerNoggins.MatchManager.currentInstance.reset();
        };
        MatchEndLayerPVP.prototype.gotToPVPConfiguration = function () {
            SuperSoccerNoggins.MatchState.currentInstance.gotToPVPConfiguration();
        };
        return MatchEndLayerPVP;
    }(Phaser.Group));
    SuperSoccerNoggins.MatchEndLayerPVP = MatchEndLayerPVP;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var Ronaldo = (function (_super) {
        __extends(Ronaldo, _super);
        function Ronaldo(game) {
            var _this = _super.call(this, game, null, "ronaldo", false) || this;
            _this.i = 0;
            _this.arm = new Phaser.Image(_this.game, 89, 168, "texture_atlas_season", "splash_cristiano_2.png");
            _this.arm.anchor.set(.41, .598);
            _this.add(_this.arm);
            _this.body = new Phaser.Image(_this.game, SuperSoccerNoggins.GameVars.getInstance().christmasVersion ? 35 : 0, 270, "texture_atlas_season", "splash_cristiano_3.png");
            _this.body.anchor.y = .95;
            _this.add(_this.body);
            _this.rightArmRelaxedImage = new Phaser.Image(_this.game, 55, 150, "texture_atlas_season", "splash_cristiano_5.png");
            _this.rightArmRelaxedImage.visible = false;
            _this.add(_this.rightArmRelaxedImage);
            _this.head = new Phaser.Image(_this.game, 20, 215, "texture_atlas_season", "splash_cristiano_1.png");
            _this.head.anchor.y = .95;
            _this.add(_this.head);
            var ballShadow = new Phaser.Image(_this.game, 38, 260, "texture_atlas_1", "shadow-ball.png");
            ballShadow.scale.set(1.25, 1.25);
            _this.add(ballShadow);
            var ball = new Phaser.Image(_this.game, 44, 240, "texture_atlas_season", "ball.png");
            ball.scale.set(1.25, 1.25);
            _this.add(ball);
            _this.game.time.events.add(2000, function () {
                this.setState();
                this.loopTimerEvent = this.game.time.events.loop(3350, this.setState, this);
            }, _this);
            return _this;
        }
        Ronaldo.prototype.destroy = function (destroyChildren, soft) {
            if (this.loopTimerEvent) {
                this.loopTimerEvent.pendingDelete = true;
            }
            _super.prototype.destroy.call(this, destroyChildren, soft);
        };
        Ronaldo.prototype.setState = function () {
            if (Ronaldo.STATES_SEQUENCE[this.i] === Ronaldo.SII) {
                this.siiiii();
            }
            else {
                this.laugh();
            }
            this.i = this.i < Ronaldo.STATES_SEQUENCE.length - 1 ? this.i + 1 : 0;
        };
        Ronaldo.prototype.laugh = function () {
            this.game.add.tween(this.arm)
                .to({ angle: -5 }, 300, Phaser.Easing.Cubic.In, true, 0, 1, true)
                .onComplete.add(function () {
                SuperSoccerNoggins.AudioManager.getInstance().playEffect("risa_ronaldo");
                this.game.add.tween(this.body.scale)
                    .to({ y: .98 }, 100, Phaser.Easing.Cubic.Out, true, 0, 2, true);
                this.game.add.tween(this.head)
                    .to({ y: 222 }, 100, Phaser.Easing.Cubic.Out, true, 100, 2, true);
            }, this);
        };
        Ronaldo.prototype.siiiii = function () {
            SuperSoccerNoggins.SplashCharacters.currentInstance.onSiiStart();
            this.arm.visible = false;
            this.rightArmRelaxedImage.visible = true;
            this.head.frameName = "splash_cristiano_4.png";
            this.game.add.tween(this.head)
                .to({ y: 222 }, 100, Phaser.Easing.Cubic.Out, true, 100, 8, true);
            this.game.time.events.add(1800, function () {
                SuperSoccerNoggins.SplashCharacters.currentInstance.onSiiEnd();
                this.head.frameName = "splash_cristiano_1.png";
                this.arm.visible = true;
                this.rightArmRelaxedImage.visible = false;
            }, this);
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("siuuuuu_ronaldo");
        };
        return Ronaldo;
    }(Phaser.Group));
    Ronaldo.SII = "sii";
    Ronaldo.LAUGH = "laugh";
    Ronaldo.STATES_SEQUENCE = [Ronaldo.SII, Ronaldo.LAUGH, Ronaldo.LAUGH, Ronaldo.LAUGH];
    SuperSoccerNoggins.Ronaldo = Ronaldo;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var SplashCharacters = (function (_super) {
        __extends(SplashCharacters, _super);
        function SplashCharacters(game) {
            var _this = _super.call(this, game, null, "splash-characters", false) || this;
            SplashCharacters.currentInstance = _this;
            _this.lastCharacterTween = null;
            _this.nogginsInclined = false;
            _this.characters = [];
            var characterImage;
            var positions = SuperSoccerNoggins.GameVars.getInstance().christmasVersion ? SplashCharacters.POSITIONS_CHRISTMAS : SplashCharacters.POSITIONS;
            for (var i = 0; i < 9; i++) {
                characterImage = new Phaser.Image(_this.game, positions[i][0], positions[i][1], "texture_atlas_season", "splash_char_" + (i + 1) + ".png");
                characterImage.anchor.set(.5, .85);
                _this.add(characterImage);
                _this.characters.push(characterImage);
            }
            if (SuperSoccerNoggins.GameVars.getInstance().christmasVersion) {
                _this.bringToTop(_this.characters[0]);
                _this.bringToTop(_this.characters[2]);
                _this.bringToTop(_this.characters[4]);
            }
            else {
                _this.bringToTop(_this.characters[1]);
                _this.bringToTop(_this.characters[2]);
                _this.bringToTop(_this.characters[4]);
            }
            return _this;
        }
        SplashCharacters.prototype.update = function () {
            if (Math.random() > .985) {
                var character = this.characters[Math.floor(Math.random() * 9)];
                if (character.scale.x === 1 && !this.nogginsInclined) {
                    this.lastCharacterTween = this.game.add.tween(character.scale);
                    this.lastCharacterTween.to({ x: 1.03, y: .94 }, 300, Phaser.Easing.Linear.None, false);
                    this.lastCharacterTween.delay(400);
                    this.lastCharacterTween.to({ x: 1, y: 1 }, 700, Phaser.Easing.Elastic.Out);
                    this.lastCharacterTween.start();
                }
            }
            if (this.nogginsInclined) {
                if (this.framesCounter === 4) {
                    this.framesCounter = 0;
                    var i = this.characters.length;
                    while (i--) {
                        this.characters[i].angle = this.characters[i].angle === -5 ? -4.25 : -5;
                    }
                }
                this.framesCounter++;
            }
        };
        SplashCharacters.prototype.destroy = function (destroyChildren, soft) {
            SplashCharacters.currentInstance = null;
            _super.prototype.destroy.call(this, destroyChildren, soft);
        };
        SplashCharacters.prototype.onSiiStart = function () {
            this.framesCounter = 0;
            this.nogginsInclined = true;
            if (this.lastCharacterTween) {
                this.lastCharacterTween.pendingDelete = true;
            }
            for (var i = 0; i < this.characters.length; i++) {
                this.characters[i].angle = Math.random() > .5 ? -5 : -4.25;
                this.characters[i].scale.y = 1.01;
            }
        };
        SplashCharacters.prototype.onSiiEnd = function () {
            this.nogginsInclined = false;
            for (var i = 0; i < this.characters.length; i++) {
                this.characters[i].angle = 0;
                this.characters[i].scale.y = 1;
            }
        };
        return SplashCharacters;
    }(Phaser.Group));
    SplashCharacters.POSITIONS = [[-5, 0],
        [33, 5],
        [64, 0],
        [83, -6],
        [120, 12],
        [142, 4],
        [175, 6],
        [205, 8],
        [256, 12],
    ];
    SplashCharacters.POSITIONS_CHRISTMAS = [[-5, 10],
        [20, 5],
        [58, 18],
        [78, 4],
        [110, 12],
        [137, 4],
        [165, 10],
        [200, 8],
        [245, 12],
    ];
    SuperSoccerNoggins.SplashCharacters = SplashCharacters;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var SuperSoccerNoggins;
(function (SuperSoccerNoggins) {
    var SplashState = (function (_super) {
        __extends(SplashState, _super);
        function SplashState() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SplashState.prototype.init = function () {
            SplashState.currentInstance = this;
        };
        SplashState.prototype.create = function () {
            this.leavingScene = false;
            this.add.text(0, 0, "abcede", { font: "22px Open Sans", fontWeight: "800", fill: "#1A3544" });
            this.add.text(0, 0, "fghijk", { font: "16px Open Sans", fontWeight: "600", fill: "#1A3544" });
            this.add.image(0, 0, "texture_atlas_season", "match-background-00.png");
            if (SuperSoccerNoggins.GameVars.getInstance().christmasVersion) {
                this.add.image(0, 250, "texture_atlas_season", "snow_splash.png");
            }
            var flagStripes = new SuperSoccerNoggins.FlagStripes(this.game);
            this.add.existing(flagStripes);
            var miniclipLogo = this.add.button(5, 380, "texture_atlas_1", this.onClickLogo, this);
            miniclipLogo.setFrames("miniclip-logo-on.png", "miniclip-logo-off.png", "miniclip-logo-on.png");
            miniclipLogo.forceOut = true;
            this.add.image(5, 5, "texture_atlas_season", "title_noggins.png");
            var audioButtonsContainer = new SuperSoccerNoggins.AudioButtonsContainer(this.game);
            audioButtonsContainer.x = 570;
            audioButtonsContainer.y = 30;
            this.add.existing(audioButtonsContainer);
            this.add.button(486, 12, "texture_atlas_1", this.onClickCreditsButton, this, "button-info-on.png", "button-info-off.png", "button-info-on.png");
            this.add.image(320, 40, "texture_atlas_season", "splash_iniesta.png");
            var referee = this.add.sprite(530, 60, "texture_atlas_season", "referee_start_0001.png");
            referee.animations.add("fly", Phaser.Animation.generateFrameNames("referee_start_", 1, 5, ".png", 4));
            referee.animations.play("fly", 24, true);
            this.game.add.tween(referee)
                .to({ y: 70 }, 2500, Phaser.Easing.Cubic.Out, true, 0, -1, true);
            var characters = new SuperSoccerNoggins.SplashCharacters(this.game);
            characters.x = 24;
            characters.y = 354;
            this.add.existing(characters);
            var ronaldo = new SuperSoccerNoggins.Ronaldo(this.game);
            ronaldo.x = 355;
            ronaldo.y = 100;
            this.add.existing(ronaldo);
            var star = this.add.image(78, 258, "texture_atlas_1", "star-briefcase.png");
            star.anchor.set(.5);
            star.scale.set(.36);
            this.game.add.tween(star.scale)
                .to({ x: .4, y: .4 }, 500, Phaser.Easing.Cubic.Out, true, 0, -1, true);
            var playButton = this.add.button(82, 258, "texture_atlas_1", this.onClickPlay, this);
            playButton.setFrames("button_play_on.png", "button_play_off.png", "button_play_on.png");
            playButton.anchor.set(.5);
            this.pvpButton = this.add.sprite(216, 258, "texture_atlas_1");
            this.pvpButton.animations.add("shine", Phaser.Animation.generateFrameNames("btn_multiplayer_", 1, 14, ".png", 4));
            this.pvpButton.animations.play("shine", 14, true);
            this.pvpButton.inputEnabled = true;
            this.pvpButton.input.useHandCursor = true;
            this.pvpButton.events.onInputDown.add(this.onClickPVP, this);
            this.pvpButton.anchor.set(.5);
            var endNewPeriodDate = new Date("11/1/2017");
            var currentDate = new Date();
            if (currentDate <= endNewPeriodDate) {
                var newSign = this.add.image(314, 256, "texture_atlas_1", "new.png");
                newSign.anchor.set(.5);
                var pulseTween = this.game.add.tween(newSign.scale);
                pulseTween.to({ x: 1.05, y: .95 }, 300, Phaser.Easing.Linear.None, false);
                pulseTween.delay(50);
                pulseTween.to({ x: .95, y: 1.05 }, 700, Phaser.Easing.Elastic.Out);
                pulseTween.loop();
                pulseTween.start();
            }
            this.game.time.events.add(250, function () {
                var key = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
                key.onDown.add(this.onClickPlay, this);
            }, this);
            SuperSoccerNoggins.AudioManager.getInstance().playLoop("noggins_menu");
            if (SuperSoccerNoggins.GameVars.getInstance().christmasVersion) {
                this.time.events.add(150, function () {
                    SuperSoccerNoggins.AudioManager.getInstance().playEffect("merry-christmas");
                }, this);
            }
            this.game.camera.flash(SuperSoccerNoggins.GameConstants.COLOR_FADE_IN_OUT, SuperSoccerNoggins.GameConstants.TIME_FADE_IN_OUT, false);
        };
        SplashState.prototype.shutdown = function () {
            SplashState.currentInstance = null;
            _super.prototype.shutdown.call(this);
        };
        SplashState.prototype.onClickPVP = function () {
            if (this.leavingScene) {
                return;
            }
            this.leavingScene = true;
            this.game.camera.fade(SuperSoccerNoggins.GameConstants.COLOR_FADE_IN_OUT, SuperSoccerNoggins.GameConstants.TIME_FADE_IN_OUT, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start("LocalMultiPlayerState", true, false);
            }, this);
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
        };
        SplashState.prototype.onClickPlay = function () {
            if (this.leavingScene) {
                return;
            }
            this.leavingScene = true;
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
            this.game.camera.fade(SuperSoccerNoggins.GameConstants.COLOR_FADE_IN_OUT, SuperSoccerNoggins.GameConstants.TIME_FADE_IN_OUT, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start("MatchSelectionState", true, false);
            }, this);
        };
        SplashState.prototype.onClickCreditsButton = function () {
            if (this.leavingScene) {
                return;
            }
            this.leavingScene = true;
            SuperSoccerNoggins.AudioManager.getInstance().playEffect("click");
            this.game.camera.fade(SuperSoccerNoggins.GameConstants.COLOR_FADE_IN_OUT, SuperSoccerNoggins.GameConstants.TIME_FADE_IN_OUT, true);
            this.game.camera.onFadeComplete.add(function () {
                this.game.state.start("CreditsState", true, false);
            }, this);
        };
        SplashState.prototype.onClickLogo = function () {
            var win = window.open("https://www.miniclip.com", "_blank");
            win.focus();
        };
        return SplashState;
    }(Phaser.State));
    SuperSoccerNoggins.SplashState = SplashState;
})(SuperSoccerNoggins || (SuperSoccerNoggins = {}));
var Fabrique;
(function (Fabrique) {
    var Plugins;
    (function (Plugins) {
        var CacheBuster = (function (_super) {
            __extends(CacheBuster, _super);
            function CacheBuster(game, parent) {
                var _this = _super.call(this, game, parent) || this;
                _this.patchLoader();
                return _this;
            }
            CacheBuster.prototype.patchLoader = function () {
                Object.defineProperty(Phaser.Loader, 'cacheBuster', {
                    value: null
                });
                Phaser.Loader.prototype.transformUrl = function (url, file) {
                    if (!url) {
                        return '';
                    }
                    if (this.cacheBuster !== null && null === url.match(/^(data:)/)) {
                        url += '?v=' + this.cacheBuster;
                    }
                    if (url.match(/^(?:blob:|data:|http:\/\/|https:\/\/|\/\/)/)) {
                        return url;
                    }
                    else {
                        return this.baseURL + file.path + url;
                    }
                };
            };
            return CacheBuster;
        }(Phaser.Plugin));
        Plugins.CacheBuster = CacheBuster;
    })(Plugins = Fabrique.Plugins || (Fabrique.Plugins = {}));
})(Fabrique || (Fabrique = {}));
//# sourceMappingURL=supper-soccer-noggins.min.js.map